04:24:26,261 graphrag.cli.index INFO Logging enabled at /home/sbarke/copilot-kanagawa/ragtest/logs/indexing-engine.log
04:24:27,563 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:32,432 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:24:32,434 graphrag.cli.index INFO Starting pipeline run. dry_run=False
04:24:32,434 graphrag.cli.index INFO Using default configuration: {
    "root_dir": "/home/sbarke/copilot-kanagawa/ragtest",
    "models": {
        "default_chat_model": {
            "api_key": "==== REDACTED ====",
            "auth_type": "api_key",
            "type": "openai_chat",
            "model": "gpt-4-turbo-preview",
            "encoding_model": "cl100k_base",
            "api_base": null,
            "api_version": null,
            "deployment_name": null,
            "proxy": null,
            "audience": null,
            "model_supports_json": true,
            "request_timeout": 180.0,
            "tokens_per_minute": 0,
            "requests_per_minute": 0,
            "retry_strategy": "native",
            "max_retries": 10,
            "max_retry_wait": 10.0,
            "concurrent_requests": 25,
            "async_mode": "threaded",
            "responses": null,
            "max_tokens": null,
            "temperature": 0,
            "max_completion_tokens": null,
            "reasoning_effort": null,
            "top_p": 1,
            "n": 1,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0
        },
        "default_embedding_model": {
            "api_key": "==== REDACTED ====",
            "auth_type": "api_key",
            "type": "openai_embedding",
            "model": "text-embedding-3-small",
            "encoding_model": "cl100k_base",
            "api_base": null,
            "api_version": null,
            "deployment_name": null,
            "proxy": null,
            "audience": null,
            "model_supports_json": true,
            "request_timeout": 180.0,
            "tokens_per_minute": 0,
            "requests_per_minute": 0,
            "retry_strategy": "native",
            "max_retries": 10,
            "max_retry_wait": 10.0,
            "concurrent_requests": 25,
            "async_mode": "threaded",
            "responses": null,
            "max_tokens": null,
            "temperature": 0,
            "max_completion_tokens": null,
            "reasoning_effort": null,
            "top_p": 1,
            "n": 1,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0
        }
    },
    "input": {
        "type": "file",
        "file_type": "text",
        "base_dir": "input",
        "storage_account_blob_url": null,
        "encoding": "utf-8",
        "file_pattern": ".*\\.txt$",
        "file_filter": null,
        "text_column": "text",
        "title_column": null,
        "metadata": null
    },
    "chunks": {
        "size": 1200,
        "overlap": 100,
        "group_by_columns": [
            "id"
        ],
        "strategy": "tokens",
        "encoding_model": "cl100k_base",
        "prepend_metadata": false,
        "chunk_size_includes_metadata": false
    },
    "output": {
        "type": "file",
        "base_dir": "/home/sbarke/copilot-kanagawa/ragtest/output",
        "storage_account_blob_url": null,
        "cosmosdb_account_url": null
    },
    "outputs": null,
    "update_index_output": {
        "type": "file",
        "base_dir": "/home/sbarke/copilot-kanagawa/ragtest/update_output",
        "storage_account_blob_url": null,
        "cosmosdb_account_url": null
    },
    "cache": {
        "type": "file",
        "base_dir": "cache",
        "storage_account_blob_url": null,
        "cosmosdb_account_url": null
    },
    "reporting": {
        "type": "file",
        "base_dir": "/home/sbarke/copilot-kanagawa/ragtest/logs",
        "storage_account_blob_url": null
    },
    "vector_store": {
        "default_vector_store": {
            "type": "lancedb",
            "db_uri": "/home/sbarke/copilot-kanagawa/ragtest/output/lancedb",
            "url": null,
            "audience": null,
            "container_name": "==== REDACTED ====",
            "database_name": null,
            "overwrite": true
        }
    },
    "workflows": null,
    "embed_text": {
        "model_id": "default_embedding_model",
        "vector_store_id": "default_vector_store",
        "batch_size": 16,
        "batch_max_tokens": 8191,
        "target": "required",
        "names": [],
        "strategy": null
    },
    "extract_graph": {
        "model_id": "default_chat_model",
        "prompt": "prompts/extract_graph.txt",
        "entity_types": [
            "organization",
            "person",
            "geo",
            "event"
        ],
        "max_gleanings": 1,
        "strategy": null
    },
    "summarize_descriptions": {
        "model_id": "default_chat_model",
        "prompt": "prompts/summarize_descriptions.txt",
        "max_length": 500,
        "max_input_tokens": 4000,
        "strategy": null
    },
    "extract_graph_nlp": {
        "normalize_edge_weights": true,
        "text_analyzer": {
            "extractor_type": "regex_english",
            "model_name": "en_core_web_md",
            "max_word_length": 15,
            "word_delimiter": " ",
            "include_named_entities": true,
            "exclude_nouns": [
                "stuff",
                "thing",
                "things",
                "bunch",
                "bit",
                "bits",
                "people",
                "person",
                "okay",
                "hey",
                "hi",
                "hello",
                "laughter",
                "oh"
            ],
            "exclude_entity_tags": [
                "DATE"
            ],
            "exclude_pos_tags": [
                "DET",
                "PRON",
                "INTJ",
                "X"
            ],
            "noun_phrase_tags": [
                "PROPN",
                "NOUNS"
            ],
            "noun_phrase_grammars": {
                "PROPN,PROPN": "PROPN",
                "NOUN,NOUN": "NOUNS",
                "NOUNS,NOUN": "NOUNS",
                "ADJ,ADJ": "ADJ",
                "ADJ,NOUN": "NOUNS"
            }
        },
        "concurrent_requests": 25
    },
    "prune_graph": {
        "min_node_freq": 2,
        "max_node_freq_std": null,
        "min_node_degree": 1,
        "max_node_degree_std": null,
        "min_edge_weight_pct": 40.0,
        "remove_ego_nodes": true,
        "lcc_only": false
    },
    "cluster_graph": {
        "max_cluster_size": 10,
        "use_lcc": true,
        "seed": 3735928559
    },
    "extract_claims": {
        "enabled": false,
        "model_id": "default_chat_model",
        "prompt": "prompts/extract_claims.txt",
        "description": "Any claims or facts that could be relevant to information discovery.",
        "max_gleanings": 1,
        "strategy": null
    },
    "community_reports": {
        "model_id": "default_chat_model",
        "graph_prompt": "prompts/community_report_graph.txt",
        "text_prompt": "prompts/community_report_text.txt",
        "max_length": 2000,
        "max_input_length": 8000,
        "strategy": null
    },
    "embed_graph": {
        "enabled": false,
        "dimensions": 1536,
        "num_walks": 10,
        "walk_length": 40,
        "window_size": 2,
        "iterations": 3,
        "random_seed": 597832,
        "use_lcc": true
    },
    "umap": {
        "enabled": false
    },
    "snapshots": {
        "embeddings": false,
        "graphml": false,
        "raw_graph": false
    },
    "local_search": {
        "prompt": "prompts/local_search_system_prompt.txt",
        "chat_model_id": "default_chat_model",
        "embedding_model_id": "default_embedding_model",
        "text_unit_prop": 0.5,
        "community_prop": 0.15,
        "conversation_history_max_turns": 5,
        "top_k_entities": 10,
        "top_k_relationships": 10,
        "max_context_tokens": 12000
    },
    "global_search": {
        "map_prompt": "prompts/global_search_map_system_prompt.txt",
        "reduce_prompt": "prompts/global_search_reduce_system_prompt.txt",
        "chat_model_id": "default_chat_model",
        "knowledge_prompt": "prompts/global_search_knowledge_system_prompt.txt",
        "max_context_tokens": 12000,
        "data_max_tokens": 12000,
        "map_max_length": 1000,
        "reduce_max_length": 2000,
        "dynamic_search_threshold": 1,
        "dynamic_search_keep_parent": false,
        "dynamic_search_num_repeats": 1,
        "dynamic_search_use_summary": false,
        "dynamic_search_max_level": 2
    },
    "drift_search": {
        "prompt": "prompts/drift_search_system_prompt.txt",
        "reduce_prompt": "prompts/drift_search_reduce_prompt.txt",
        "chat_model_id": "default_chat_model",
        "embedding_model_id": "default_embedding_model",
        "data_max_tokens": 12000,
        "reduce_max_tokens": null,
        "reduce_temperature": 0,
        "reduce_max_completion_tokens": null,
        "concurrency": 32,
        "drift_k_followups": 20,
        "primer_folds": 5,
        "primer_llm_max_tokens": 12000,
        "n_depth": 3,
        "local_search_text_unit_prop": 0.9,
        "local_search_community_prop": 0.1,
        "local_search_top_k_mapped_entities": 10,
        "local_search_top_k_relationships": 10,
        "local_search_max_data_tokens": 12000,
        "local_search_temperature": 0,
        "local_search_top_p": 1,
        "local_search_n": 1,
        "local_search_llm_max_gen_tokens": null,
        "local_search_llm_max_gen_completion_tokens": null
    },
    "basic_search": {
        "prompt": "prompts/basic_search_system_prompt.txt",
        "chat_model_id": "default_chat_model",
        "embedding_model_id": "default_embedding_model",
        "k": 10,
        "max_context_tokens": 12000
    }
}
04:24:32,435 graphrag.storage.file_pipeline_storage INFO Creating file storage at /home/sbarke/copilot-kanagawa/ragtest/output
04:24:32,435 graphrag.index.input.factory INFO loading input from root_dir=input
04:24:32,435 graphrag.index.input.factory INFO using file storage for input
04:24:32,694 graphrag.storage.file_pipeline_storage INFO search /home/sbarke/copilot-kanagawa/ragtest/input for files matching .*\.txt$
04:24:32,761 graphrag.index.input.util INFO Found 6 InputFileType.text files, loading 6
04:24:32,762 graphrag.index.input.util INFO Total number of unfiltered InputFileType.text rows: 6
04:24:32,857 graphrag.index.run.run_pipeline INFO Final # of rows loaded: 6
04:24:32,866 graphrag.utils.storage INFO reading table from storage: documents.parquet
04:24:32,954 graphrag.utils.storage INFO reading table from storage: documents.parquet
04:24:32,958 graphrag.utils.storage INFO reading table from storage: text_units.parquet
04:24:32,992 graphrag.utils.storage INFO reading table from storage: text_units.parquet
04:24:33,242 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,243 openai._base_client INFO Retrying request to /chat/completions in 3.898000 seconds
04:24:33,243 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,244 openai._base_client INFO Retrying request to /chat/completions in 4.392000 seconds
04:24:33,244 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,245 openai._base_client INFO Retrying request to /chat/completions in 4.796000 seconds
04:24:33,247 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,247 openai._base_client INFO Retrying request to /chat/completions in 4.446000 seconds
04:24:33,247 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,248 openai._base_client INFO Retrying request to /chat/completions in 4.316000 seconds
04:24:33,258 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,258 openai._base_client INFO Retrying request to /chat/completions in 4.494000 seconds
04:24:33,259 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,259 openai._base_client INFO Retrying request to /chat/completions in 4.130000 seconds
04:24:33,261 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,261 openai._base_client INFO Retrying request to /chat/completions in 4.640000 seconds
04:24:33,263 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,264 openai._base_client INFO Retrying request to /chat/completions in 4.228000 seconds
04:24:33,269 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,270 openai._base_client INFO Retrying request to /chat/completions in 4.274000 seconds
04:24:33,272 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,273 openai._base_client INFO Retrying request to /chat/completions in 4.138000 seconds
04:24:33,273 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,274 openai._base_client INFO Retrying request to /chat/completions in 4.522000 seconds
04:24:33,274 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,275 openai._base_client INFO Retrying request to /chat/completions in 4.372000 seconds
04:24:33,282 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,282 openai._base_client INFO Retrying request to /chat/completions in 4.330000 seconds
04:24:33,302 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:33,303 openai._base_client INFO Retrying request to /chat/completions in 4.682000 seconds
04:24:33,985 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:34,96 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:34,96 openai._base_client INFO Retrying request to /chat/completions in 3.630000 seconds
04:24:34,130 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:34,184 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:34,208 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:34,225 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:34,226 openai._base_client INFO Retrying request to /chat/completions in 3.132000 seconds
04:24:34,276 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:34,276 openai._base_client INFO Retrying request to /chat/completions in 2.704000 seconds
04:24:34,304 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:34,305 openai._base_client INFO Retrying request to /chat/completions in 2.822000 seconds
04:24:37,221 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,222 openai._base_client INFO Retrying request to /chat/completions in 5.520000 seconds
04:24:37,240 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,241 openai._base_client INFO Retrying request to /chat/completions in 5.152000 seconds
04:24:37,458 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,459 openai._base_client INFO Retrying request to /chat/completions in 5.514000 seconds
04:24:37,505 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,505 openai._base_client INFO Retrying request to /chat/completions in 5.160000 seconds
04:24:37,534 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,534 openai._base_client INFO Retrying request to /chat/completions in 5.102000 seconds
04:24:37,614 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,615 openai._base_client INFO Retrying request to /chat/completions in 5.130000 seconds
04:24:37,635 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,636 openai._base_client INFO Retrying request to /chat/completions in 5.158000 seconds
04:24:37,657 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,657 openai._base_client INFO Retrying request to /chat/completions in 5.160000 seconds
04:24:37,712 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,713 openai._base_client INFO Retrying request to /chat/completions in 5.158000 seconds
04:24:37,726 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,727 openai._base_client INFO Retrying request to /chat/completions in 5.164000 seconds
04:24:37,738 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,739 openai._base_client INFO Retrying request to /chat/completions in 5.154000 seconds
04:24:37,795 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,796 openai._base_client INFO Retrying request to /chat/completions in 5.152000 seconds
04:24:37,822 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,823 openai._base_client INFO Retrying request to /chat/completions in 5.834000 seconds
04:24:37,845 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,845 openai._base_client INFO Retrying request to /chat/completions in 5.160000 seconds
04:24:37,892 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,893 openai._base_client INFO Retrying request to /chat/completions in 5.154000 seconds
04:24:37,995 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:37,996 openai._base_client INFO Retrying request to /chat/completions in 5.160000 seconds
04:24:38,78 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:38,79 openai._base_client INFO Retrying request to /chat/completions in 5.144000 seconds
04:24:38,137 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:38,137 openai._base_client INFO Retrying request to /chat/completions in 5.156000 seconds
04:24:39,887 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:40,5 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:40,6 openai._base_client INFO Retrying request to /chat/completions in 3.794000 seconds
04:24:42,314 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:42,409 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,409 openai._base_client INFO Retrying request to /chat/completions in 0.808000 seconds
04:24:42,508 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,509 openai._base_client INFO Retrying request to /chat/completions in 0.552000 seconds
04:24:42,738 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,739 openai._base_client INFO Retrying request to /chat/completions in 0.570000 seconds
04:24:42,765 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,766 openai._base_client INFO Retrying request to /chat/completions in 0.576000 seconds
04:24:42,837 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,838 openai._base_client INFO Retrying request to /chat/completions in 0.574000 seconds
04:24:42,840 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,840 openai._base_client INFO Retrying request to /chat/completions in 0.574000 seconds
04:24:42,903 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,903 openai._base_client INFO Retrying request to /chat/completions in 0.562000 seconds
04:24:42,908 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,909 openai._base_client INFO Retrying request to /chat/completions in 0.578000 seconds
04:24:42,963 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,963 openai._base_client INFO Retrying request to /chat/completions in 0.576000 seconds
04:24:42,982 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:42,982 openai._base_client INFO Retrying request to /chat/completions in 0.578000 seconds
04:24:43,2 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,2 openai._base_client INFO Retrying request to /chat/completions in 0.566000 seconds
04:24:43,34 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,35 openai._base_client INFO Retrying request to /chat/completions in 0.580000 seconds
04:24:43,67 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,67 openai._base_client INFO Retrying request to /chat/completions in 0.570000 seconds
04:24:43,102 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,102 openai._base_client INFO Retrying request to /chat/completions in 0.578000 seconds
04:24:43,137 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,138 openai._base_client INFO Retrying request to /chat/completions in 0.574000 seconds
04:24:43,264 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,264 openai._base_client INFO Retrying request to /chat/completions in 5.978000 seconds
04:24:43,306 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,307 openai._base_client INFO Retrying request to /chat/completions in 5.320000 seconds
04:24:43,314 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,315 openai._base_client INFO Retrying request to /chat/completions in 5.996000 seconds
04:24:43,387 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,387 openai._base_client INFO Retrying request to /chat/completions in 5.990000 seconds
04:24:43,400 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,400 openai._base_client INFO Retrying request to /chat/completions in 5.320000 seconds
04:24:43,436 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,436 openai._base_client INFO Retrying request to /chat/completions in 5.316000 seconds
04:24:43,502 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,503 openai._base_client INFO Retrying request to /chat/completions in 5.318000 seconds
04:24:43,520 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,521 openai._base_client INFO Retrying request to /chat/completions in 5.316000 seconds
04:24:43,584 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,584 openai._base_client INFO Retrying request to /chat/completions in 5.306000 seconds
04:24:43,590 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,590 openai._base_client INFO Retrying request to /chat/completions in 5.326000 seconds
04:24:43,629 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,629 openai._base_client INFO Retrying request to /chat/completions in 5.326000 seconds
04:24:43,655 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,656 openai._base_client INFO Retrying request to /chat/completions in 5.320000 seconds
04:24:43,691 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,691 openai._base_client INFO Retrying request to /chat/completions in 5.290000 seconds
04:24:43,711 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,711 openai._base_client INFO Retrying request to /chat/completions in 5.326000 seconds
04:24:43,727 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,728 openai._base_client INFO Retrying request to /chat/completions in 5.322000 seconds
04:24:43,744 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,744 openai._base_client INFO Retrying request to /chat/completions in 5.988000 seconds
04:24:43,764 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,765 openai._base_client INFO Retrying request to /chat/completions in 5.324000 seconds
04:24:43,814 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,815 openai._base_client INFO Retrying request to /chat/completions in 5.312000 seconds
04:24:43,908 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:43,908 openai._base_client INFO Retrying request to /chat/completions in 5.900000 seconds
04:24:44,800 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:44,905 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:44,905 openai._base_client INFO Retrying request to /chat/completions in 4.306000 seconds
04:24:44,993 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:45,98 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:45,99 openai._base_client INFO Retrying request to /chat/completions in 6.282000 seconds
04:24:47,59 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:47,156 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:47,157 openai._base_client INFO Retrying request to /chat/completions in 5.090000 seconds
04:24:47,767 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:47,871 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:47,871 openai._base_client INFO Retrying request to /chat/completions in 5.000000 seconds
04:24:48,0 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:48,97 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:48,97 openai._base_client INFO Retrying request to /chat/completions in 5.770000 seconds
04:24:48,736 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:48,736 openai._base_client INFO Retrying request to /chat/completions in 4.036000 seconds
04:24:48,813 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:48,813 openai._base_client INFO Retrying request to /chat/completions in 4.054000 seconds
04:24:48,918 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:48,919 openai._base_client INFO Retrying request to /chat/completions in 4.050000 seconds
04:24:48,929 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:48,930 openai._base_client INFO Retrying request to /chat/completions in 4.042000 seconds
04:24:48,980 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:48,981 openai._base_client INFO Retrying request to /chat/completions in 4.039000 seconds
04:24:49,36 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,36 openai._base_client INFO Retrying request to /chat/completions in 4.026000 seconds
04:24:49,36 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,37 openai._base_client INFO Retrying request to /chat/completions in 3.856000 seconds
04:24:49,52 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,52 openai._base_client INFO Retrying request to /chat/completions in 4.046000 seconds
04:24:49,71 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,71 openai._base_client INFO Retrying request to /chat/completions in 4.046000 seconds
04:24:49,71 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,72 openai._base_client INFO Retrying request to /chat/completions in 4.050000 seconds
04:24:49,144 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,145 openai._base_client INFO Retrying request to /chat/completions in 4.034000 seconds
04:24:49,145 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,146 openai._base_client INFO Retrying request to /chat/completions in 4.050000 seconds
04:24:49,184 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,185 openai._base_client INFO Retrying request to /chat/completions in 4.055000 seconds
04:24:49,220 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,221 openai._base_client INFO Retrying request to /chat/completions in 4.052000 seconds
04:24:49,302 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,302 openai._base_client INFO Retrying request to /chat/completions in 3.510000 seconds
04:24:49,347 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,347 openai._base_client INFO Retrying request to /chat/completions in 4.036000 seconds
04:24:49,426 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,427 openai._base_client INFO Retrying request to /chat/completions in 4.034000 seconds
04:24:49,466 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,467 openai._base_client INFO Retrying request to /chat/completions in 4.055000 seconds
04:24:49,826 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,826 openai._base_client INFO Retrying request to /chat/completions in 4.050000 seconds
04:24:49,911 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:49,912 openai._base_client INFO Retrying request to /chat/completions in 4.038000 seconds
04:24:51,495 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:51,496 openai._base_client INFO Retrying request to /chat/completions in 2.880000 seconds
04:24:52,340 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:52,341 openai._base_client INFO Retrying request to /chat/completions in 2.224000 seconds
04:24:52,959 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:52,960 openai._base_client INFO Retrying request to /chat/completions in 5.472000 seconds
04:24:52,969 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:52,969 openai._base_client INFO Retrying request to /chat/completions in 6.746000 seconds
04:24:52,983 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:52,983 openai._base_client INFO Retrying request to /chat/completions in 5.478000 seconds
04:24:53,32 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,33 openai._base_client INFO Retrying request to /chat/completions in 5.348000 seconds
04:24:53,63 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,64 openai._base_client INFO Retrying request to /chat/completions in 5.472000 seconds
04:24:53,74 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,74 openai._base_client INFO Retrying request to /chat/completions in 5.462000 seconds
04:24:53,115 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,116 openai._base_client INFO Retrying request to /chat/completions in 5.476000 seconds
04:24:53,188 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,188 openai._base_client INFO Retrying request to /chat/completions in 5.476000 seconds
04:24:53,191 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,192 openai._base_client INFO Retrying request to /chat/completions in 5.422000 seconds
04:24:53,215 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,216 openai._base_client INFO Retrying request to /chat/completions in 5.466000 seconds
04:24:53,218 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,218 openai._base_client INFO Retrying request to /chat/completions in 5.470000 seconds
04:24:53,293 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,293 openai._base_client INFO Retrying request to /chat/completions in 5.468000 seconds
04:24:53,303 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,304 openai._base_client INFO Retrying request to /chat/completions in 5.434000 seconds
04:24:53,354 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,355 openai._base_client INFO Retrying request to /chat/completions in 5.454000 seconds
04:24:53,369 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,370 openai._base_client INFO Retrying request to /chat/completions in 5.466000 seconds
04:24:53,481 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,481 openai._base_client INFO Retrying request to /chat/completions in 5.468000 seconds
04:24:53,552 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,552 openai._base_client INFO Retrying request to /chat/completions in 5.470000 seconds
04:24:53,594 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:24:53,623 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,623 openai._base_client INFO Retrying request to /chat/completions in 6.314000 seconds
04:24:53,703 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,704 openai._base_client INFO Retrying request to /chat/completions in 6.292000 seconds
04:24:53,964 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,964 openai._base_client INFO Retrying request to /chat/completions in 6.372000 seconds
04:24:53,969 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:53,970 openai._base_client INFO Retrying request to /chat/completions in 6.374000 seconds
04:24:54,43 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:54,43 openai._base_client INFO Retrying request to /chat/completions in 6.368000 seconds
04:24:54,490 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:54,490 openai._base_client INFO Retrying request to /chat/completions in 6.358000 seconds
04:24:54,677 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:54,677 openai._base_client INFO Retrying request to /chat/completions in 6.358000 seconds
04:24:58,490 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,490 openai._base_client INFO Retrying request to /chat/completions in 0.794000 seconds
04:24:58,522 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,522 openai._base_client INFO Retrying request to /chat/completions in 0.810000 seconds
04:24:58,558 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,558 openai._base_client INFO Retrying request to /chat/completions in 0.802000 seconds
04:24:58,633 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,633 openai._base_client INFO Retrying request to /chat/completions in 0.808000 seconds
04:24:58,638 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,638 openai._base_client INFO Retrying request to /chat/completions in 0.796000 seconds
04:24:58,684 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,684 openai._base_client INFO Retrying request to /chat/completions in 0.804000 seconds
04:24:58,764 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,764 openai._base_client INFO Retrying request to /chat/completions in 0.802000 seconds
04:24:58,771 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,771 openai._base_client INFO Retrying request to /chat/completions in 0.814000 seconds
04:24:58,786 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,787 openai._base_client INFO Retrying request to /chat/completions in 0.798000 seconds
04:24:58,857 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,857 openai._base_client INFO Retrying request to /chat/completions in 0.786000 seconds
04:24:58,880 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,881 openai._base_client INFO Retrying request to /chat/completions in 0.780000 seconds
04:24:58,904 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,904 openai._base_client INFO Retrying request to /chat/completions in 0.800000 seconds
04:24:58,926 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,927 openai._base_client INFO Retrying request to /chat/completions in 0.814000 seconds
04:24:58,990 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:58,990 openai._base_client INFO Retrying request to /chat/completions in 0.520000 seconds
04:24:59,51 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,52 openai._base_client INFO Retrying request to /chat/completions in 0.800000 seconds
04:24:59,121 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,122 openai._base_client INFO Retrying request to /chat/completions in 0.804000 seconds
04:24:59,423 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,423 openai._base_client INFO Retrying request to /chat/completions in 5.514000 seconds
04:24:59,470 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,470 openai._base_client INFO Retrying request to /chat/completions in 5.494000 seconds
04:24:59,526 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,527 openai._base_client INFO Retrying request to /chat/completions in 5.512000 seconds
04:24:59,533 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,533 openai._base_client INFO Retrying request to /chat/completions in 5.508000 seconds
04:24:59,598 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,598 openai._base_client INFO Retrying request to /chat/completions in 5.500000 seconds
04:24:59,616 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,616 openai._base_client INFO Retrying request to /chat/completions in 5.510000 seconds
04:24:59,656 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,657 openai._base_client INFO Retrying request to /chat/completions in 5.514000 seconds
04:24:59,685 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,685 openai._base_client INFO Retrying request to /chat/completions in 5.510000 seconds
04:24:59,711 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,712 openai._base_client INFO Retrying request to /chat/completions in 5.488000 seconds
04:24:59,755 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,756 openai._base_client INFO Retrying request to /chat/completions in 5.492000 seconds
04:24:59,756 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,756 openai._base_client INFO Retrying request to /chat/completions in 5.516000 seconds
04:24:59,798 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,799 openai._base_client INFO Retrying request to /chat/completions in 5.510000 seconds
04:24:59,814 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,814 openai._base_client INFO Retrying request to /chat/completions in 6.404000 seconds
04:24:59,833 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,834 openai._base_client INFO Retrying request to /chat/completions in 5.510000 seconds
04:24:59,951 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:24:59,952 openai._base_client INFO Retrying request to /chat/completions in 5.506000 seconds
04:25:00,15 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:00,16 openai._base_client INFO Retrying request to /chat/completions in 5.510000 seconds
04:25:00,33 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:00,34 openai._base_client INFO Retrying request to /chat/completions in 5.562000 seconds
04:25:00,90 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:00,91 openai._base_client INFO Retrying request to /chat/completions in 5.510000 seconds
04:25:00,441 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:00,441 openai._base_client INFO Retrying request to /chat/completions in 5.498000 seconds
04:25:00,471 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:00,471 openai._base_client INFO Retrying request to /chat/completions in 5.504000 seconds
04:25:00,511 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:00,511 openai._base_client INFO Retrying request to /chat/completions in 5.510000 seconds
04:25:00,943 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:00,944 openai._base_client INFO Retrying request to /chat/completions in 5.508000 seconds
04:25:01,153 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:01,154 openai._base_client INFO Retrying request to /chat/completions in 5.486000 seconds
04:25:05,61 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,62 openai._base_client INFO Retrying request to /chat/completions in 5.570000 seconds
04:25:05,134 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,135 openai._base_client INFO Retrying request to /chat/completions in 5.558000 seconds
04:25:05,151 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,151 openai._base_client INFO Retrying request to /chat/completions in 5.550000 seconds
04:25:05,189 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,190 openai._base_client INFO Retrying request to /chat/completions in 5.562000 seconds
04:25:05,256 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,257 openai._base_client INFO Retrying request to /chat/completions in 5.524000 seconds
04:25:05,260 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,260 openai._base_client INFO Retrying request to /chat/completions in 5.566000 seconds
04:25:05,283 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,283 openai._base_client INFO Retrying request to /chat/completions in 5.566000 seconds
04:25:05,287 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,287 openai._base_client INFO Retrying request to /chat/completions in 5.560000 seconds
04:25:05,374 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,375 openai._base_client INFO Retrying request to /chat/completions in 5.548000 seconds
04:25:05,387 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,388 openai._base_client INFO Retrying request to /chat/completions in 5.520000 seconds
04:25:05,405 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,405 openai._base_client INFO Retrying request to /chat/completions in 5.558000 seconds
04:25:05,432 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,433 openai._base_client INFO Retrying request to /chat/completions in 5.568000 seconds
04:25:05,558 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,558 openai._base_client INFO Retrying request to /chat/completions in 5.562000 seconds
04:25:05,618 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,619 openai._base_client INFO Retrying request to /chat/completions in 5.566000 seconds
04:25:05,688 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,688 openai._base_client INFO Retrying request to /chat/completions in 5.568000 seconds
04:25:05,698 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:05,699 openai._base_client INFO Retrying request to /chat/completions in 5.556000 seconds
04:25:06,41 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:06,41 openai._base_client INFO Retrying request to /chat/completions in 5.560000 seconds
04:25:06,127 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:06,128 openai._base_client INFO Retrying request to /chat/completions in 5.550000 seconds
04:25:06,323 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:06,324 openai._base_client INFO Retrying request to /chat/completions in 5.562000 seconds
04:25:06,416 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:06,416 openai._base_client INFO Retrying request to /chat/completions in 5.192000 seconds
04:25:06,556 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:06,556 openai._base_client INFO Retrying request to /chat/completions in 5.550000 seconds
04:25:06,749 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:06,749 openai._base_client INFO Retrying request to /chat/completions in 5.546000 seconds
04:25:09,916 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:10,29 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,30 openai._base_client INFO Retrying request to /chat/completions in 1.981000 seconds
04:25:10,728 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,728 openai._base_client INFO Retrying request to /chat/completions in 1.170000 seconds
04:25:10,792 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,792 openai._base_client INFO Retrying request to /chat/completions in 1.182000 seconds
04:25:10,796 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,796 openai._base_client INFO Retrying request to /chat/completions in 1.170000 seconds
04:25:10,839 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,839 openai._base_client INFO Retrying request to /chat/completions in 1.188000 seconds
04:25:10,875 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,875 openai._base_client INFO Retrying request to /chat/completions in 1.178000 seconds
04:25:10,919 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,919 openai._base_client INFO Retrying request to /chat/completions in 1.184000 seconds
04:25:10,956 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,956 openai._base_client INFO Retrying request to /chat/completions in 1.166000 seconds
04:25:10,980 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,981 openai._base_client INFO Retrying request to /chat/completions in 1.150000 seconds
04:25:10,999 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:10,999 openai._base_client INFO Retrying request to /chat/completions in 1.184000 seconds
04:25:11,11 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,12 openai._base_client INFO Retrying request to /chat/completions in 1.184000 seconds
04:25:11,51 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,51 openai._base_client INFO Retrying request to /chat/completions in 1.188000 seconds
04:25:11,96 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,96 openai._base_client INFO Retrying request to /chat/completions in 1.178000 seconds
04:25:11,210 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,211 openai._base_client INFO Retrying request to /chat/completions in 1.178000 seconds
04:25:11,278 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,279 openai._base_client INFO Retrying request to /chat/completions in 1.184000 seconds
04:25:11,351 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,351 openai._base_client INFO Retrying request to /chat/completions in 1.172000 seconds
04:25:11,361 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,361 openai._base_client INFO Retrying request to /chat/completions in 1.166000 seconds
04:25:11,704 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,705 openai._base_client INFO Retrying request to /chat/completions in 1.176000 seconds
04:25:11,710 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,710 openai._base_client INFO Retrying request to /chat/completions in 1.164000 seconds
04:25:11,773 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,774 openai._base_client INFO Retrying request to /chat/completions in 1.182000 seconds
04:25:11,974 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:11,974 openai._base_client INFO Retrying request to /chat/completions in 1.174000 seconds
04:25:12,61 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,63 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: <uint32>\n    ecc<uint32> result = mem[addr];\n\n    if (result.error)\n    {\n        // An error (corrected or not) was encountered\n    }\n\n    if (result.data.is_valid)\n    {\n        // Either there was no ECC error\n        // or an error was corrected\n        // result.data.value can be used\n        sim_assert(result.data.value == data);\n    }\n}\n\nmemory_ecc_norep behaves like memory_ecc but without replication.\n\n\nmemory_ecc_strict\n\nReads from a memory_ecc_strict return a value of type: optional<T> . The is_valid field is set to true if no ECC errors (corrected or not) were detected.\n\n\nmemory_ecc_relaxed\n\nReads from a memory_ecc_relaxed return a value of type: optional<T> . The is_valid field is set to true if no ECC uncorrectable errors were detected.\n\n\nECC restrictions\n\n- Memories with ECC enabled may not have initial values\n- Quad port memories do not support ECC\n\n\necc attribute\n\nThe ECC memory aliases defined above are implemented with the ecc attribute and an associated inline function. The function creates values returned by reads from the memory. The function takes 3 arguments:\n\n- error - A bool set to true when an ECC error was detected, regardless of whether it was corrected or not.\n- valid - A bool set to true if there was no ECC error, or an error was corrected.\n- value - Data read from memory. The type of the argument is the same as the type of declared memory word.\n\nerror - A bool set to true when an ECC error was detected, regardless of whether it was corrected or not.\n\nvalid - A bool set to true if there was no ECC error, or an error was corrected.\n\nvalue - Data read from memory. The type of the argument is the same as the type of declared memory word.\n\n\nMulti-Dimensional Arrays\n\nuint32[4][2] can be thought of as a table containing 4 rows and 2 columns:\n\nFor example, the following table:\n\ncan be expressed with the following code:\n\nuint32[4][2] table = { {3, 4}, {9, 2}, {7, 8}, {1, 5} };\n\nThe expression: table[1] represents row 1. It has has type uint32[2] , and value {9, 2} .\n\nThe expression table[1][0] represents the entry at row 1, column 0. It has type uint32 and value 9 .\n\nArrays of memories are supported:\n\nmemory<uint32, 32>[4] _mem; // An array of 4 memories\n\nSimilarly, memories of arrays are supported:\n\nmemory<uint32[4], 32> _mem; // A memory with element type = uint32[4]\n\nMemories of memories are not allowed.\n\n\nIndex/Count type aliases\n\n\nindex_t\n\nindex_t<N> is an unsigned integer type wide enough to represent the values: 0, 1, 2, ..., N-1 . This type is intended to be used to define an address or index for elements of an array or a memory.\n\nconst auto array_size = 8;\n\nuint32[array_size] a;\n\n// wide enough to represent an index into a\nindex_t<array_size> idx;\n\nprintln(a[idx]);\n\n\ncount_t\n\ncount_t<N> is an unsigned integer type wide enough to represent the values: 0, 1, 2, ..., N . This type is useful for holding sizes or counts.\n\nconst auto max_elements = 8;\n\n// wide enough to represent the maximum number of elements\ncount_t<max_elements> current_element_count = 0;\n\n\nFunction types\n\nThe syntax for a function type is (parameter types)->return type :\n\nusing callback = (uint32, bool) -> uint8;\n\nFunction types can optionally include parameter names:\n\nusing callback = (uint32 x, bool f) -> uint8;\n\n\nType aliases\n\nType aliasing allows giving new names to existing data types. Type aliases can be created for both built-in and user-defined types.\n\nusing UnsignedInteger = uint32;\nusing DWORD = UnsignedInteger;\nusing callback_t = (int32, uint5) -> bool;\n\n\nSubtyping\n\nSandpiper defines subtyping relationship for integer types and function types. A value of type S can be safely used in context expecting a type T if and only if the type S is a subtype of the type T .\n\nUsing the notation S <: T to mean that type S is a subtype of type T , the following relations are defined for integer types:\n\n- int<N> <: int<M> when N <= M\n- uint<N> <: uint<M> when N <= M\n- uint<N> <: int<M> when N < M\n\nFor function types subtyping relationship:\n\n[[attr1]] ([[paramAttr1]] x1, ...) -> r1 <: [[attr2]] ([[paramAttr2]] x2, ...) -> r2\n\nrequires all of the following to be true:\n\n- r1 <: r2\n- x2 <: x1 , …\n- paramAttr2 is subset of paramAttr2 , …\n- attr2 is a subset of attr1\n\nFor example function type (uint32) -> uint8 is a subtype of (uint16) -> uint16 . Intuitively this is because callers expecting a function (uint16) -> uint16 can call a function of type (uint32) -> uint8 without any data loss: - argument of type uint16 can be losslessly upcast to uint32 - result of type uint8 can be upcast to uint16\n\nSubtyping of function types applies in any context where functions are used as values, such as functions passed as arguments to higher order functions, arguments passed for function type template parameters, and class callbacks\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:25:12,63 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29917, Requested 2879. Please try again in 5.592s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,64 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': '<uint32>\n    ecc<uint32> result = mem[addr];\n\n    if (result.error)\n    {\n        // An error (corrected or not) was encountered\n    }\n\n    if (result.data.is_valid)\n    {\n        // Either there was no ECC error\n        // or an error was corrected\n        // result.data.value can be used\n        sim_assert(result.data.value == data);\n    }\n}\n\nmemory_ecc_norep behaves like memory_ecc but without replication.\n\n\nmemory_ecc_strict\n\nReads from a memory_ecc_strict return a value of type: optional<T> . The is_valid field is set to true if no ECC errors (corrected or not) were detected.\n\n\nmemory_ecc_relaxed\n\nReads from a memory_ecc_relaxed return a value of type: optional<T> . The is_valid field is set to true if no ECC uncorrectable errors were detected.\n\n\nECC restrictions\n\n- Memories with ECC enabled may not have initial values\n- Quad port memories do not support ECC\n\n\necc attribute\n\nThe ECC memory aliases defined above are implemented with the ecc attribute and an associated inline function. The function creates values returned by reads from the memory. The function takes 3 arguments:\n\n- error - A bool set to true when an ECC error was detected, regardless of whether it was corrected or not.\n- valid - A bool set to true if there was no ECC error, or an error was corrected.\n- value - Data read from memory. The type of the argument is the same as the type of declared memory word.\n\nerror - A bool set to true when an ECC error was detected, regardless of whether it was corrected or not.\n\nvalid - A bool set to true if there was no ECC error, or an error was corrected.\n\nvalue - Data read from memory. The type of the argument is the same as the type of declared memory word.\n\n\nMulti-Dimensional Arrays\n\nuint32[4][2] can be thought of as a table containing 4 rows and 2 columns:\n\nFor example, the following table:\n\ncan be expressed with the following code:\n\nuint32[4][2] table = { {3, 4}, {9, 2}, {7, 8}, {1, 5} };\n\nThe expression: table[1] represents row 1. It has has type uint32[2] , and value {9, 2} .\n\nThe expression table[1][0] represents the entry at row 1, column 0. It has type uint32 and value 9 .\n\nArrays of memories are supported:\n\nmemory<uint32, 32>[4] _mem; // An array of 4 memories\n\nSimilarly, memories of arrays are supported:\n\nmemory<uint32[4], 32> _mem; // A memory with element type = uint32[4]\n\nMemories of memories are not allowed.\n\n\nIndex/Count type aliases\n\n\nindex_t\n\nindex_t<N> is an unsigned integer type wide enough to represent the values: 0, 1, 2, ..., N-1 . This type is intended to be used to define an address or index for elements of an array or a memory.\n\nconst auto array_size = 8;\n\nuint32[array_size] a;\n\n// wide enough to represent an index into a\nindex_t<array_size> idx;\n\nprintln(a[idx]);\n\n\ncount_t\n\ncount_t<N> is an unsigned integer type wide enough to represent the values: 0, 1, 2, ..., N . This type is useful for holding sizes or counts.\n\nconst auto max_elements = 8;\n\n// wide enough to represent the maximum number of elements\ncount_t<max_elements> current_element_count = 0;\n\n\nFunction types\n\nThe syntax for a function type is (parameter types)->return type :\n\nusing callback = (uint32, bool) -> uint8;\n\nFunction types can optionally include parameter names:\n\nusing callback = (uint32 x, bool f) -> uint8;\n\n\nType aliases\n\nType aliasing allows giving new names to existing data types. Type aliases can be created for both built-in and user-defined types.\n\nusing UnsignedInteger = uint32;\nusing DWORD = UnsignedInteger;\nusing callback_t = (int32, uint5) -> bool;\n\n\nSubtyping\n\nSandpiper defines subtyping relationship for integer types and function types. A value of type S can be safely used in context expecting a type T if and only if the type S is a subtype of the type T .\n\nUsing the notation S <: T to mean that type S is a subtype of type T , the following relations are defined for integer types:\n\n- int<N> <: int<M> when N <= M\n- uint<N> <: uint<M> when N <= M\n- uint<N> <: int<M> when N < M\n\nFor function types subtyping relationship:\n\n[[attr1]] ([[paramAttr1]] x1, ...) -> r1 <: [[attr2]] ([[paramAttr2]] x2, ...) -> r2\n\nrequires all of the following to be true:\n\n- r1 <: r2\n- x2 <: x1 , …\n- paramAttr2 is subset of paramAttr2 , …\n- attr2 is a subset of attr1\n\nFor example function type (uint32) -> uint8 is a subtype of (uint16) -> uint16 . Intuitively this is because callers expecting a function (uint16) -> uint16 can call a function of type (uint32) -> uint8 without any data loss: - argument of type uint16 can be losslessly upcast to uint32 - result of type uint8 can be upcast to uint16\n\nSubtyping of function types applies in any context where functions are used as values, such as functions passed as arguments to higher order functions, arguments passed for function type template parameters, and class callbacks'}
04:25:12,76 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,77 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: uint32 y = x + 2;\n}\n\nA common pattern to enable hoisting atomic do statements is to split atomic do blocking into a separate method:\n\nOriginal:\n\nimport data.counter\n\nclass IntegerAllocator\n{\nprivate:\n    counter<32, 32> _free_count;\n    uint32 _id = 0;\n\n    inline bool wait_internal()\n    {\n        bool result = false;\n\n        if (_free_count.count() > 0)\n        {\n            result = true;\n            _free_count.add(1);\n        }\n\n        return result;\n    }\n\npublic:\n    uint32 Allocate()\n    {\n        // Wait for a free slot\n        atomic do {} while (!wait_internal());\n\n        uint32 result;\n\n        atomic\n        {\n            result = _id;\n            _id++;\n        }\n\n        return result;\n    }\n}\n\nuint32 F(uint32 a)\n{\n    static IntegerAllocator _allocator;\n\n    uint32 z = a + 3;\n\n    uint32 x = _allocator.Allocate();\n\n    return x + z;\n}\n\nOptimized:\n\nimport data.counter\n\nclass IntegerAllocator\n{\nprivate:\n    counter<32, 32> _free_count;\n    uint32 _id = 0;\n\n    inline bool wait_internal()\n    {\n        bool result = false;\n\n        if (_free_count.count() > 0)\n        {\n            result = true;\n            _free_count.add(1);\n        }\n\n        return result;\n    }\n\npublic:\n    void Reserve()\n    {\n        // Wait for a free slot\n        atomic do {} while (!wait_internal());\n    }\n\n    // Caller must first call Reserve\n    uint32 Allocate()\n    {\n        uint32 result;\n\n        atomic\n        {\n            result = _id;\n            _id++;\n        }\n\n        return result;\n    }\n}\n\nuint32 F(uint32 a)\n{\n    static IntegerAllocator _allocator;\n\n    // Reserve early, to minimize basic block count\n    _allocator.Reserve();\n\n    uint32 z = a + 3;\n\n    uint32 x = _allocator.Allocate();\n\n    return x + z;\n}\n\n\nUse inline functions\n\nCalls to inline functions do not introduce a new basic block. In contrast, non-inline functions with multiple call sites do introduce multiple basic blocks. By default, declare functions as inline. Non-inline functions should be reserved for functions that write to shared state (where inlining would introduce data races). In the example below, if Add was declared inline, and Add was called concurrently from 2 separate call sites, then a data race could occur that would cause _sum to contain an incorrect value.\n\nclass A\n{\nprivate:\n    uint32 _sum = 0;\n\npublic:\n    void Add(uint32 a)\n    {\n        atomic\n        {\n            _sum += a;\n        }\n    }\n}\n\nIf a function has only 1 call site, the inline modifier has no effect as the compiler will automatically inline the function.\n\n\nMinimize Variable Lifetime\n\nThe cost of a local variable is equal to the width of that variable (in bits) times the number of pipeline stages that variable is live for. Minimizing either term in this product can reduce area. The widths of thread ID variables with pipelined_* functions are especially important as some buffers are sized based on the width of the thread ID.\n\n\nShort Circuit\n\nIf a variable is written in one location and then read in a small number of locations, it can be advantageous to store the variable in a memory.\n\nOriginal:\n\nclass C\n{\n    void F(uint6 tid, uint32 x)\n    {\n        uint32 y = x + 2345;\n\n        pipelined_for(128, [y](uint7 z)\n        {\n            // many statements\n            uint32 w = y + z;\n        });\n    }\n}\n\nOptimized:\n\nclass C\n{\n    memory<uint32, 64> _mem;\n\n    void F(uint6 tid, uint32 x)\n    {\n        uint32 y = x + 2345;\n        _mem[tid] = y;\n\n        pipelined_for(128, [tid](uint7 z)\n        {\n            // many statements\n            uint32 y = _mem[tid];\n\n            uint32 w = y + z;\n        });\n    }\n}\n\nIf the definition and the use of the variable are contained with the same function, the compiler will perform this optimization automatically.\n\n\nRe-compute\n\nAnother way to reduce the cost of a wide local variable is re-compute it on-demand based on the values of narrower local variables. This is similar to Hoisting .\n\nOriginal:\n\nvoid F(uint6 tid, uint8 x)\n{\n    uint32 y = x * 123456;\n\n    // many statements, including uses of y\n\n    // 32-bit \'y\' value is captured here\n    pipelined_for(128, [y](uint7 z)\n    {\n        // many statements\n        uint32 w = y + z;\n    });\n}\n\nOptimized:\n\nvoid F(uint6 tid, uint8 x)\n{\n    uint32 y = x * 123456;\n\n    // many statements, including uses of y\n\n    // 8-bit \'x\' value is captured here\n    pipelined_for(128, [x](uint7 z)\n    {\n        uint32 y = x * 123456;\n\n        // many statements\n        uint32 w = y + z;\n    });\n}\n\n\nAvoid sequential loops\n\nWhile Sandpiper supports sequential loops ( for and do/while ) other constructs are usually more efficient. Sequential loops have a non-trivial area overhead and do not introduce any new concurrency. Where possible, call a pipelined_* function or use an static for loop. Reserve usage of sequential loops for cases where all of the following holds:\n\n- Each loop iteration depends on a previous iteration\n- The loop-carried dependency cannot be resolved with atomic / [[schedule(N)]]\n- An\n######################\nOutput:', 'kwargs': {}}
04:25:12,77 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29910, Requested 2882. Please try again in 5.584s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,78 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': "uint32 y = x + 2;\n}\n\nA common pattern to enable hoisting atomic do statements is to split atomic do blocking into a separate method:\n\nOriginal:\n\nimport data.counter\n\nclass IntegerAllocator\n{\nprivate:\n    counter<32, 32> _free_count;\n    uint32 _id = 0;\n\n    inline bool wait_internal()\n    {\n        bool result = false;\n\n        if (_free_count.count() > 0)\n        {\n            result = true;\n            _free_count.add(1);\n        }\n\n        return result;\n    }\n\npublic:\n    uint32 Allocate()\n    {\n        // Wait for a free slot\n        atomic do {} while (!wait_internal());\n\n        uint32 result;\n\n        atomic\n        {\n            result = _id;\n            _id++;\n        }\n\n        return result;\n    }\n}\n\nuint32 F(uint32 a)\n{\n    static IntegerAllocator _allocator;\n\n    uint32 z = a + 3;\n\n    uint32 x = _allocator.Allocate();\n\n    return x + z;\n}\n\nOptimized:\n\nimport data.counter\n\nclass IntegerAllocator\n{\nprivate:\n    counter<32, 32> _free_count;\n    uint32 _id = 0;\n\n    inline bool wait_internal()\n    {\n        bool result = false;\n\n        if (_free_count.count() > 0)\n        {\n            result = true;\n            _free_count.add(1);\n        }\n\n        return result;\n    }\n\npublic:\n    void Reserve()\n    {\n        // Wait for a free slot\n        atomic do {} while (!wait_internal());\n    }\n\n    // Caller must first call Reserve\n    uint32 Allocate()\n    {\n        uint32 result;\n\n        atomic\n        {\n            result = _id;\n            _id++;\n        }\n\n        return result;\n    }\n}\n\nuint32 F(uint32 a)\n{\n    static IntegerAllocator _allocator;\n\n    // Reserve early, to minimize basic block count\n    _allocator.Reserve();\n\n    uint32 z = a + 3;\n\n    uint32 x = _allocator.Allocate();\n\n    return x + z;\n}\n\n\nUse inline functions\n\nCalls to inline functions do not introduce a new basic block. In contrast, non-inline functions with multiple call sites do introduce multiple basic blocks. By default, declare functions as inline. Non-inline functions should be reserved for functions that write to shared state (where inlining would introduce data races). In the example below, if Add was declared inline, and Add was called concurrently from 2 separate call sites, then a data race could occur that would cause _sum to contain an incorrect value.\n\nclass A\n{\nprivate:\n    uint32 _sum = 0;\n\npublic:\n    void Add(uint32 a)\n    {\n        atomic\n        {\n            _sum += a;\n        }\n    }\n}\n\nIf a function has only 1 call site, the inline modifier has no effect as the compiler will automatically inline the function.\n\n\nMinimize Variable Lifetime\n\nThe cost of a local variable is equal to the width of that variable (in bits) times the number of pipeline stages that variable is live for. Minimizing either term in this product can reduce area. The widths of thread ID variables with pipelined_* functions are especially important as some buffers are sized based on the width of the thread ID.\n\n\nShort Circuit\n\nIf a variable is written in one location and then read in a small number of locations, it can be advantageous to store the variable in a memory.\n\nOriginal:\n\nclass C\n{\n    void F(uint6 tid, uint32 x)\n    {\n        uint32 y = x + 2345;\n\n        pipelined_for(128, [y](uint7 z)\n        {\n            // many statements\n            uint32 w = y + z;\n        });\n    }\n}\n\nOptimized:\n\nclass C\n{\n    memory<uint32, 64> _mem;\n\n    void F(uint6 tid, uint32 x)\n    {\n        uint32 y = x + 2345;\n        _mem[tid] = y;\n\n        pipelined_for(128, [tid](uint7 z)\n        {\n            // many statements\n            uint32 y = _mem[tid];\n\n            uint32 w = y + z;\n        });\n    }\n}\n\nIf the definition and the use of the variable are contained with the same function, the compiler will perform this optimization automatically.\n\n\nRe-compute\n\nAnother way to reduce the cost of a wide local variable is re-compute it on-demand based on the values of narrower local variables. This is similar to Hoisting .\n\nOriginal:\n\nvoid F(uint6 tid, uint8 x)\n{\n    uint32 y = x * 123456;\n\n    // many statements, including uses of y\n\n    // 32-bit 'y' value is captured here\n    pipelined_for(128, [y](uint7 z)\n    {\n        // many statements\n        uint32 w = y + z;\n    });\n}\n\nOptimized:\n\nvoid F(uint6 tid, uint8 x)\n{\n    uint32 y = x * 123456;\n\n    // many statements, including uses of y\n\n    // 8-bit 'x' value is captured here\n    pipelined_for(128, [x](uint7 z)\n    {\n        uint32 y = x * 123456;\n\n        // many statements\n        uint32 w = y + z;\n    });\n}\n\n\nAvoid sequential loops\n\nWhile Sandpiper supports sequential loops ( for and do/while ) other constructs are usually more efficient. Sequential loops have a non-trivial area overhead and do not introduce any new concurrency. Where possible, call a pipelined_* function or use an static for loop. Reserve usage of sequential loops for cases where all of the following holds:\n\n- Each loop iteration depends on a previous iteration\n- The loop-carried dependency cannot be resolved with atomic / [[schedule(N)]]\n- An"}
04:25:12,109 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,110 openai._base_client INFO Retrying request to /chat/completions in 5.590000 seconds
04:25:12,150 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,151 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: function has a boolean parameter with the end_transaction attribute.\n\nuint32 F(uint32 a)\n{\n    return G(a + 1);\n}\n\nuint32 H(uint32 b)\n{\n    return G(b + 2);\n}\n\nuint32 G(uint32 x)\n{\n    return 2*x;\n}\n\n\nasync_exec\n\nA call to async_exec is implemented with a single FIFO. For the common case of passing a lambda to async_exec , the FIFO holds the value of each variable captured by the lambda.\n\nvoid F(uint32 a)\n{\n    uint32 b = a + 1;\n\n    async_exec\n    (   [b]()\n        {\n        }\n    );\n}\n\n\npipelined_for\n\nEach call to pipelined_for inserts a record into a FIFO. This FIFO holds the thread count and the values of captured variables. A finite state machine translates each FIFO record into thread_count calls to the inner function. A separate finite state machine unblocks the calling thread after thread_count threads have completed. Unblocking is achieved with zero-width fifo.\n\nvoid F(uint32 x, uint32 y)\n{\n    uint32 thread_count = x + 1;\n\n    pipelined_for\n    (thread_count, \n        [y](uint32 tid)\n        {\n        }\n    );\n}\n\n\npipelined_map\n\nThe hardware generated for pipelined_map is similar to the hardware generated for pipelined_for . The thread collection finite state machine concatenates the return values from each inner thread into an array and returns that array to the caller.\n\nuint32[4] F(uint32 x, uint32 y)\n{\n    uint32 thread_count = x + 1;\n\n    uint32[4] result = pipelined_map<4>\n    (thread_count, \n        [y](uint32 tid) -> uint32\n        {\n            return y + tid;\n        }\n    );\n\n    return result;\n}\n\n\npipelined_last\n\nThe hardware generated for pipelined_last is similar to the hardware generated for pipelined_for . The thread collection finite state machine ignores the return value from all inner threads except the last one (where tid == (thread_count - 1) ). This value is returned to the caller. If the thread count is 0, then the value returned by pipelined_last is undefined.\n\nuint32 F(uint32 x, uint32 y)\n{\n    uint32 thread_count = x + 1;\n\n    uint32 result = pipelined_last\n    (thread_count, \n        [y](uint32 tid)\n        {\n            return y + tid;\n        }\n    );\n\n    return result;\n}\n\n\natomic do\n\natomic do is implemented by storing a thread’s context (local variables) into a FIFO. A finite-state machine evaluates the loop body and condition of the atomic do (for one thread) at each clock cycle. When the loop condition evaluates to false a thread context is popped off of the FIFO and the corresponding thread continues execution.\n\n// shared variable\nuint32 count = 0;\n\nuint32 F(uint32 x)\n{\n    uint32 y = x + 4;\n\n    atomic do {} while (count < x);\n\n    return x + y;\n}\n\n\nSequential Loops\n\nA mux exists before the body of a for or do/while loop that select threads to enter the loop body from two sources:\n\n- The backwards link FIFO (threads that have finished loop iteration N and are waiting to execution iteration N+1 )\n- The loop entry FIFO (threads that have never executed the loop body)\n\nThe mux arbitration policy is as follows:\n\n- If only one of the two inputs sources contains a thread ready to execute the loop body, then that source is selected.\n- If both input sources contain a thread ready to execute the loop body, then the backwards link is chosen.\n\nWhen threads complete an iteration, the loop condition is evaluated. If the condition evaluates to false , then the thread follows the backwards link to execute again. If the condition evaluates to true , then the thread exits the loop via a FIFO or reorder buffer.\n\nThe loop exit structure is a FIFO when the loop does not need to preserve ordering (for example, loops with the [[unordered]] attribute). The loop exit structure is a reorder buffer when thread ordering should be preserved. This ensures that a set of threads execute the code after the loop in the same order that the set of threads executed the code before the loop.\n\nvoid F()\n{\n    bool done = false;\n\n    do\n    {\n\n    } while (!done);\n}\n\n\nreorder\n\nThe reorder block can be used to reorder the results from an unordered loop or a call to a an unordered function.\n\n[[pipelined]] uint32 F(uint32 a)\n{\n    uint32 result;\n\n    reorder\n    {\n        result = G(a);\n    }\n\n    return result;\n}\n\n[[unordered]] uint32 G(uint32 count)\n{\n    uint32 result = 0;\n\n    [[unordered]] for (const uint32 i : count)\n    {\n        result += 1;\n    }\n\n    return result;\n}\n\n\nComposition\n\nThe control flow constructs in the Sandpiper language compose. For example, you can nest control flow constructs within others. The hardware generated by Sandpiper follows a composition that is isomorphic to the control flow composition in the source. For example, the following code and diagrams illustrate a atomic do loop nested within a do/while loop.\n\nuint32 count = 0;\n\nvoid F()\n{\n    bool done = false;\n    uint32 x;\n\n    do\n    {\n        atomic do {} while (count < x);\n    } while (!done);\n}\n\n\nData\n\n\nLocal Variables\n\nAs the following diagram illustrates, the values of local variables are stored in pipeline registers and/or FIFOs:\n\nvoid F(uint32 x, uint16 y)\n{\n    uint32 z = x * 15;\n\n    uint48 w = z + y;\n\n    async_exec([w]()\n    {\n######################\nOutput:', 'kwargs': {}}
04:25:12,151 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29873, Requested 2908. Please try again in 5.562s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,153 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'function has a boolean parameter with the end_transaction attribute.\n\nuint32 F(uint32 a)\n{\n    return G(a + 1);\n}\n\nuint32 H(uint32 b)\n{\n    return G(b + 2);\n}\n\nuint32 G(uint32 x)\n{\n    return 2*x;\n}\n\n\nasync_exec\n\nA call to async_exec is implemented with a single FIFO. For the common case of passing a lambda to async_exec , the FIFO holds the value of each variable captured by the lambda.\n\nvoid F(uint32 a)\n{\n    uint32 b = a + 1;\n\n    async_exec\n    (   [b]()\n        {\n        }\n    );\n}\n\n\npipelined_for\n\nEach call to pipelined_for inserts a record into a FIFO. This FIFO holds the thread count and the values of captured variables. A finite state machine translates each FIFO record into thread_count calls to the inner function. A separate finite state machine unblocks the calling thread after thread_count threads have completed. Unblocking is achieved with zero-width fifo.\n\nvoid F(uint32 x, uint32 y)\n{\n    uint32 thread_count = x + 1;\n\n    pipelined_for\n    (thread_count, \n        [y](uint32 tid)\n        {\n        }\n    );\n}\n\n\npipelined_map\n\nThe hardware generated for pipelined_map is similar to the hardware generated for pipelined_for . The thread collection finite state machine concatenates the return values from each inner thread into an array and returns that array to the caller.\n\nuint32[4] F(uint32 x, uint32 y)\n{\n    uint32 thread_count = x + 1;\n\n    uint32[4] result = pipelined_map<4>\n    (thread_count, \n        [y](uint32 tid) -> uint32\n        {\n            return y + tid;\n        }\n    );\n\n    return result;\n}\n\n\npipelined_last\n\nThe hardware generated for pipelined_last is similar to the hardware generated for pipelined_for . The thread collection finite state machine ignores the return value from all inner threads except the last one (where tid == (thread_count - 1) ). This value is returned to the caller. If the thread count is 0, then the value returned by pipelined_last is undefined.\n\nuint32 F(uint32 x, uint32 y)\n{\n    uint32 thread_count = x + 1;\n\n    uint32 result = pipelined_last\n    (thread_count, \n        [y](uint32 tid)\n        {\n            return y + tid;\n        }\n    );\n\n    return result;\n}\n\n\natomic do\n\natomic do is implemented by storing a thread’s context (local variables) into a FIFO. A finite-state machine evaluates the loop body and condition of the atomic do (for one thread) at each clock cycle. When the loop condition evaluates to false a thread context is popped off of the FIFO and the corresponding thread continues execution.\n\n// shared variable\nuint32 count = 0;\n\nuint32 F(uint32 x)\n{\n    uint32 y = x + 4;\n\n    atomic do {} while (count < x);\n\n    return x + y;\n}\n\n\nSequential Loops\n\nA mux exists before the body of a for or do/while loop that select threads to enter the loop body from two sources:\n\n- The backwards link FIFO (threads that have finished loop iteration N and are waiting to execution iteration N+1 )\n- The loop entry FIFO (threads that have never executed the loop body)\n\nThe mux arbitration policy is as follows:\n\n- If only one of the two inputs sources contains a thread ready to execute the loop body, then that source is selected.\n- If both input sources contain a thread ready to execute the loop body, then the backwards link is chosen.\n\nWhen threads complete an iteration, the loop condition is evaluated. If the condition evaluates to false , then the thread follows the backwards link to execute again. If the condition evaluates to true , then the thread exits the loop via a FIFO or reorder buffer.\n\nThe loop exit structure is a FIFO when the loop does not need to preserve ordering (for example, loops with the [[unordered]] attribute). The loop exit structure is a reorder buffer when thread ordering should be preserved. This ensures that a set of threads execute the code after the loop in the same order that the set of threads executed the code before the loop.\n\nvoid F()\n{\n    bool done = false;\n\n    do\n    {\n\n    } while (!done);\n}\n\n\nreorder\n\nThe reorder block can be used to reorder the results from an unordered loop or a call to a an unordered function.\n\n[[pipelined]] uint32 F(uint32 a)\n{\n    uint32 result;\n\n    reorder\n    {\n        result = G(a);\n    }\n\n    return result;\n}\n\n[[unordered]] uint32 G(uint32 count)\n{\n    uint32 result = 0;\n\n    [[unordered]] for (const uint32 i : count)\n    {\n        result += 1;\n    }\n\n    return result;\n}\n\n\nComposition\n\nThe control flow constructs in the Sandpiper language compose. For example, you can nest control flow constructs within others. The hardware generated by Sandpiper follows a composition that is isomorphic to the control flow composition in the source. For example, the following code and diagrams illustrate a atomic do loop nested within a do/while loop.\n\nuint32 count = 0;\n\nvoid F()\n{\n    bool done = false;\n    uint32 x;\n\n    do\n    {\n        atomic do {} while (count < x);\n    } while (!done);\n}\n\n\nData\n\n\nLocal Variables\n\nAs the following diagram illustrates, the values of local variables are stored in pipeline registers and/or FIFOs:\n\nvoid F(uint32 x, uint16 y)\n{\n    uint32 z = x * 15;\n\n    uint48 w = z + y;\n\n    async_exec([w]()\n    {'}
04:25:12,169 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,169 openai._base_client INFO Retrying request to /chat/completions in 5.880000 seconds
04:25:12,172 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,172 openai._base_client INFO Retrying request to /chat/completions in 5.584000 seconds
04:25:12,176 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,177 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: of new inputs\n- On average, each thread must loop through a common portion of the design N times. If the common portion has a thread rate of 1, then the remainder of the design is will run no faster than 1 thread every N clock cycles.\n\nArea savings can be achieved by lowering the maximum thread rate of an entire design or a portion of a design. When a thread rate is specified, the Sandpiper compiler both enforces the thread rate and takes advantage of the thread rate to reduce resource usage.\n\nThe thread rate of entire design can be scaled with the --thread-rate-scale=N command line parameter. For example, --thread-rate-scale=2 divides the peak throughput of an entire design by 2.\n\nThe thread rate of a specific function can be specified with the [[thread_rate]] attribute:\n\n// Peak throughput of 1 thread every 2 clock cycles\n[[thread_rate(2)]] uint32 F(uint32 x)\n{\n    return x + 3;\n}\n\nThese 2 mechanism can be combined. For example, if a function has a [[thread_rate(2)]] modifier and is compiled in a design with --thread-rate-scale=4 , then the final thread rate for that functions is 1 thread every 8 clock cycles.\n\nThe thread rate of a function has no effect on the correctness of a function, it is only a hint that allows area to be saved at the expense of throughput. Scheduling constraints specified with [[schedule(N)]] and atomic should not be modified when adjusting the thread rate of a function. [[schedule(N)]] means that no more than N threads can be present a block at any particular time. This is orthogonal to the rate at which threads enter the associated function.\n\n\nFrequency\n\n\nAllow wide operations to be decomposed\n\nThe compiler will internally decompose wide operations into multiple narrower operations scheduled over multiple pipeline stages. The following table describes compiler switches that control this decomposition.\n\n\nDecompose atomic blocks\n\nIn some cases, and atomic block can be decomposed into multiple sequential atomic blocks. This can increase frequency by removing some logic from the critical path.\n\nOriginal:\n\nvoid F(uint32 count)\n{\n    atomic\n    {\n        static uint2 _i = 0;\n        static uint32[4] _ary = {};\n\n        // Determine array index\n        uint2 index = _i;\n        _i++;\n\n        // Add `count` to one array element\n        auto value = _ary[index];\n        value += count;\n        _ary[index] = value;\n    }\n}\n\nOptimized:\n\nvoid F(uint32 count)\n{\n    uint2 index; // local variable\n\n    atomic\n    {\n        static uint2 _i = 0;\n\n        // Determine array index\n        index = _i;\n\n        _i++;\n    }\n\n    atomic\n    {\n        static uint32[4] _ary = {};\n\n        // Add `count` to one array element\n        auto value = _ary[index];\n        value += count;\n        _ary[index] = value;\n    }\n}\n\n\nBreak up atomic adds (or other wide operations)\n\nAn atomic add can be broken up into two (or more) atomic adds to improve frequency.\n\nOriginal:\n\nuint32 value;\natomic\n{\n    static uint32 counter;\n    counter += value;\n}\n\nOptimized:\n\nuint32 value;\nuint16 value_lo = cast<uint16>(value); // Low 16 bits\nuint16 value_hi = value >> 16; // High 16 bits\n\nbool carry;\natomic\n{\n    static uint16 counter_lo;\n    // Determine if add will overflow\n    carry = (counter_lo + value_lo > 0xffff);\n    // Add low 16 bits\n    counter_lo += value_lo;\n}\n\nuint16 value_hi_with_carry = value_hi + cast<uint1>(carry);\natomic\n{\n    static uint16 counter_hi;\n    counter_hi += value_hi_with_carry;\n}\n\n\nMove logic outside of atomic\n\nRefactoring logic outside of an atomic can improve its frequency.\n\nOriginal:\n\nuint32 x;\nuint32 y;\n\natomic\n{\n    static uint32 counter;\n    if (x == y)\n    {\n        counter += y;\n    }\n}\n\nOptimized:\n\nuint32 x;\nuint32 y;\n\nbool cond = (x == y);\nuint32 increment = cond ? y : 0;\natomic\n{\n    static uint32 counter;\n    counter += increment;\n}\n\n\nMinimize logic depth within atomic\n\nMaximum clock frequency may be limited by the depth of a chain of dependent computations inside an atomic block. Minimize the depth of such chains of computations.\n\nA common pattern to avoid an addition followed by a comparison is to pre-compute a value, like count-1 in the following example:\n\nOriginal:\n\nvoid F(uint32 count)\n{\n    uint32 z = 4;\n\n    atomic\n    {\n        uint32 _i = 0;\n\n        _i++;\n\n        // This comparison runs after the addition has completed\n        if (_i == count)\n        {\n            z++;\n        }\n    }\n}\n\nOptimized:\n\nvoid F(uint32 count)\n{\n    uint32 z = 4;\n\n    uint32 count_minus_one = count - 1;\n\n    atomic\n    {\n        uint32 _i = 0;\n\n        // This comparison runs in parallel with the addition\n        if (_i == count_minus_one)\n        {\n            z++;\n        }\n\n        _i++;\n    }\n}\n\n\nParallel state updates\n\nA common pattern in Sandpiper code is an atomic block that updates shared variables based on the current values of the shared variables and the values of thread local variables.\n\nThe examples in this section use the State type and update_state function defined here:\n\nmodule parallel_state_update_example\n{ State\n , StateCount\n , update_state\n}\n\n// 4 possible state values\nenum State : uint2\n{\n    Idle,\n    Preparing,\n    Executing,\n    Finalizing\n######################\nOutput:', 'kwargs': {}}
04:25:12,177 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29861, Requested 2919. Please try again in 5.56s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,178 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'of new inputs\n- On average, each thread must loop through a common portion of the design N times. If the common portion has a thread rate of 1, then the remainder of the design is will run no faster than 1 thread every N clock cycles.\n\nArea savings can be achieved by lowering the maximum thread rate of an entire design or a portion of a design. When a thread rate is specified, the Sandpiper compiler both enforces the thread rate and takes advantage of the thread rate to reduce resource usage.\n\nThe thread rate of entire design can be scaled with the --thread-rate-scale=N command line parameter. For example, --thread-rate-scale=2 divides the peak throughput of an entire design by 2.\n\nThe thread rate of a specific function can be specified with the [[thread_rate]] attribute:\n\n// Peak throughput of 1 thread every 2 clock cycles\n[[thread_rate(2)]] uint32 F(uint32 x)\n{\n    return x + 3;\n}\n\nThese 2 mechanism can be combined. For example, if a function has a [[thread_rate(2)]] modifier and is compiled in a design with --thread-rate-scale=4 , then the final thread rate for that functions is 1 thread every 8 clock cycles.\n\nThe thread rate of a function has no effect on the correctness of a function, it is only a hint that allows area to be saved at the expense of throughput. Scheduling constraints specified with [[schedule(N)]] and atomic should not be modified when adjusting the thread rate of a function. [[schedule(N)]] means that no more than N threads can be present a block at any particular time. This is orthogonal to the rate at which threads enter the associated function.\n\n\nFrequency\n\n\nAllow wide operations to be decomposed\n\nThe compiler will internally decompose wide operations into multiple narrower operations scheduled over multiple pipeline stages. The following table describes compiler switches that control this decomposition.\n\n\nDecompose atomic blocks\n\nIn some cases, and atomic block can be decomposed into multiple sequential atomic blocks. This can increase frequency by removing some logic from the critical path.\n\nOriginal:\n\nvoid F(uint32 count)\n{\n    atomic\n    {\n        static uint2 _i = 0;\n        static uint32[4] _ary = {};\n\n        // Determine array index\n        uint2 index = _i;\n        _i++;\n\n        // Add `count` to one array element\n        auto value = _ary[index];\n        value += count;\n        _ary[index] = value;\n    }\n}\n\nOptimized:\n\nvoid F(uint32 count)\n{\n    uint2 index; // local variable\n\n    atomic\n    {\n        static uint2 _i = 0;\n\n        // Determine array index\n        index = _i;\n\n        _i++;\n    }\n\n    atomic\n    {\n        static uint32[4] _ary = {};\n\n        // Add `count` to one array element\n        auto value = _ary[index];\n        value += count;\n        _ary[index] = value;\n    }\n}\n\n\nBreak up atomic adds (or other wide operations)\n\nAn atomic add can be broken up into two (or more) atomic adds to improve frequency.\n\nOriginal:\n\nuint32 value;\natomic\n{\n    static uint32 counter;\n    counter += value;\n}\n\nOptimized:\n\nuint32 value;\nuint16 value_lo = cast<uint16>(value); // Low 16 bits\nuint16 value_hi = value >> 16; // High 16 bits\n\nbool carry;\natomic\n{\n    static uint16 counter_lo;\n    // Determine if add will overflow\n    carry = (counter_lo + value_lo > 0xffff);\n    // Add low 16 bits\n    counter_lo += value_lo;\n}\n\nuint16 value_hi_with_carry = value_hi + cast<uint1>(carry);\natomic\n{\n    static uint16 counter_hi;\n    counter_hi += value_hi_with_carry;\n}\n\n\nMove logic outside of atomic\n\nRefactoring logic outside of an atomic can improve its frequency.\n\nOriginal:\n\nuint32 x;\nuint32 y;\n\natomic\n{\n    static uint32 counter;\n    if (x == y)\n    {\n        counter += y;\n    }\n}\n\nOptimized:\n\nuint32 x;\nuint32 y;\n\nbool cond = (x == y);\nuint32 increment = cond ? y : 0;\natomic\n{\n    static uint32 counter;\n    counter += increment;\n}\n\n\nMinimize logic depth within atomic\n\nMaximum clock frequency may be limited by the depth of a chain of dependent computations inside an atomic block. Minimize the depth of such chains of computations.\n\nA common pattern to avoid an addition followed by a comparison is to pre-compute a value, like count-1 in the following example:\n\nOriginal:\n\nvoid F(uint32 count)\n{\n    uint32 z = 4;\n\n    atomic\n    {\n        uint32 _i = 0;\n\n        _i++;\n\n        // This comparison runs after the addition has completed\n        if (_i == count)\n        {\n            z++;\n        }\n    }\n}\n\nOptimized:\n\nvoid F(uint32 count)\n{\n    uint32 z = 4;\n\n    uint32 count_minus_one = count - 1;\n\n    atomic\n    {\n        uint32 _i = 0;\n\n        // This comparison runs in parallel with the addition\n        if (_i == count_minus_one)\n        {\n            z++;\n        }\n\n        _i++;\n    }\n}\n\n\nParallel state updates\n\nA common pattern in Sandpiper code is an atomic block that updates shared variables based on the current values of the shared variables and the values of thread local variables.\n\nThe examples in this section use the State type and update_state function defined here:\n\nmodule parallel_state_update_example\n{ State\n , StateCount\n , update_state\n}\n\n// 4 possible state values\nenum State : uint2\n{\n    Idle,\n    Preparing,\n    Executing,\n    Finalizing'}
04:25:12,214 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,215 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: 1). Subtraction always converts unsigned operands to signed.\n\nFor certain expressions with an operand known at compile-time the compiler can infer a sufficient type that is narrower than what would be indicated by the above rules.\n\n\nImplicit integer conversions\n\nSandpiper will silently widen/narrow integer types as necessary. For example, the following code is valid:\n\nuint8 x;\n\n// The type of "x + 1" is uint9\n// but it is implicitly sliced to uint2 on assignment to z\nuint2 z = x + 1;\n\nThere are circumstances (like mux ) where a group of integers must be implicitly converted to a common type. The common type is the narrowest integer type that can represent all values representable by the group of source types.\n\n- If any source type is signed, then all unsigned source types are converted to signed by zero-extending by one bit\n- The type of the resulting expression is equal to the widest source type\n\nWarning on narrowing conversion of initialization value can be enabled using --Wconversion or --Wall command line switches.\n\nThe warning is emitted when initialization value used in a variable declaration would be converted with potential loss of data, e.g.:\n\nvoid Foo(uint32 x, uint32 y)\n{\n    uint32 z = x + y;\n}\n\nwould result in the following warning:\n\ntest.pd:3:24:\n  |\n3 |             uint32 z = x + y;\n  |                        ^\nwarning: Narrowing conversion from \'uint33\' to \'uint32\' [--Wconversion]\n\nThe recommended fix for the issues is to explicitly cast the initialization value to the target type, and declare the variable as auto to avoid redundant type specification. If the narrowing conversion is expected and desired use cast operator:\n\nvoid Foo(uint32 x, uint32 y)\n{\n    auto z = cast<uint32>(x + y);\n}\n\nIf none of the expected values would result in truncation, use checked_cast helper function instead of cast . It will trigger an assert in simulation if the value is truncated.\n\nWhen narrowing conversion happens as part of initializer list, the warning points to specific element of the list that results in narrowing conversion. For example:\n\nstruct Foo\n{\n    optional<uint32>[2] items;\n}\n\nFoo foo =\n    { { { false, 10}\n      , { true, -20}\n      }\n    };\n\ncompiles with the following warning:\n\ntest.pd:7:17:\n  |\n7 |       , { true, -20}\n  |                 ^\nwarning: Narrowing conversion from \'int6\' to \'uint32\' [--Wconversion]\n\nNarrowing conversions are prohibited in designated initializers . For example:\n\nstruct Foo\n{\n    optional<uint32>[2] items;\n}\n\nFoo foo =\n    { .items =\n        { {.is_valid = false, .value = 10}\n        , {.is_valid = true, .value = -20}\n        }\n    };\n\nwill result in compiler error:\n\nError 1: test.pd:9:39:\n  |\n9 |         , {.is_valid = true, .value = -20}\n  |                                       ^\nInvalid conversion from `int6` to `uint32`\nInsert an explicit cast to silence this issue `cast<uint32>()`\n\nThe --assert-on-narrowing-assignment command line switch adds runtime assertion checking which will fire if information is lost in a narrowing conversion when the value of a variable is updated (not during variable initialization). For example:\n\nvoid Foo()\n{\n    uint2 result = 3;\n\n    result = result + 1;\n}\n\nwill result in the following runtime error:\n\nAssertion failed: Source value of narrowing conversion cannot be represented by the result type.\n\nThe numeric.int.operator.modular module contains functions which can be used to perform arithmetic when interger overflow/underflow (wrapping) behavior is expected and should not trigger an assertion.\n\n\nBooleans\n\nBoolean variables in Sandpiper work similarly to boolean variables in other programming languages. Variables of type bool can only have a value of false or true . Conversion between boolean and integer types requires an explicit cast.\n\nbool b = false;\nbool c = !b;\nuint1 x = 3;\nbool d = cast<bool>(x);\n\n\nOperators\n\nSandpiper supports the following operators on boolean values:\n\n\nFloating-point\n\nSandpiper support 32-bit floating-point numbers. Unlike C-based programming languages, Sandpiper does not support a trailing f or F character after a floating-point literal.\n\nfloat32 times_pi(float32 x)\n{\n    return x * 3.14159;\n}\n\n\nOperators\n\nMost floating-point operations are implemented as functions rather than operators. Sandpiper supports the following operators (which are implemented as device-specific library functions):\n\n\nEnumerations\n\nEnumerations are user-defined types that consist of a set of named integral constants (enumerators). Enumerations in Sandpiper are similar to C++ enumerations except that Sandpiper enumerations must always specify a base type. If no initialization is provided for an enumerator its value is set to the value of the preceding enumerator plus 1, or to 0 if it is the first enumerator. Here, the constants RED , GREEN , and BLUE are set to 0, 1, and 2, respectively.\n\nenum RGBColor : uint2\n{\n    RED,\n    GREEN,\n    BLUE\n}\n\nIn the example below, the enumerator ONE is assigned the value of 1; FIVE is assigned the value of the expression ONE + 2 , which is 3; NINE is assigned the value of 0; and, finally, FIFTEEN is assigned the value 1.\n\nenum CrazyNumbers : uint5\n{\n    ONE = 1,\n    FIVE = ONE + 2,\n    NINE = 0,\n    FIFTEEN\n}\n\nEnumerators can only represent values within the range of their base type.\n\nEnumerators are\n######################\nOutput:', 'kwargs': {}}
04:25:12,215 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29840, Requested 2955. Please try again in 5.59s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,216 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': '1). Subtraction always converts unsigned operands to signed.\n\nFor certain expressions with an operand known at compile-time the compiler can infer a sufficient type that is narrower than what would be indicated by the above rules.\n\n\nImplicit integer conversions\n\nSandpiper will silently widen/narrow integer types as necessary. For example, the following code is valid:\n\nuint8 x;\n\n// The type of "x + 1" is uint9\n// but it is implicitly sliced to uint2 on assignment to z\nuint2 z = x + 1;\n\nThere are circumstances (like mux ) where a group of integers must be implicitly converted to a common type. The common type is the narrowest integer type that can represent all values representable by the group of source types.\n\n- If any source type is signed, then all unsigned source types are converted to signed by zero-extending by one bit\n- The type of the resulting expression is equal to the widest source type\n\nWarning on narrowing conversion of initialization value can be enabled using --Wconversion or --Wall command line switches.\n\nThe warning is emitted when initialization value used in a variable declaration would be converted with potential loss of data, e.g.:\n\nvoid Foo(uint32 x, uint32 y)\n{\n    uint32 z = x + y;\n}\n\nwould result in the following warning:\n\ntest.pd:3:24:\n  |\n3 |             uint32 z = x + y;\n  |                        ^\nwarning: Narrowing conversion from \'uint33\' to \'uint32\' [--Wconversion]\n\nThe recommended fix for the issues is to explicitly cast the initialization value to the target type, and declare the variable as auto to avoid redundant type specification. If the narrowing conversion is expected and desired use cast operator:\n\nvoid Foo(uint32 x, uint32 y)\n{\n    auto z = cast<uint32>(x + y);\n}\n\nIf none of the expected values would result in truncation, use checked_cast helper function instead of cast . It will trigger an assert in simulation if the value is truncated.\n\nWhen narrowing conversion happens as part of initializer list, the warning points to specific element of the list that results in narrowing conversion. For example:\n\nstruct Foo\n{\n    optional<uint32>[2] items;\n}\n\nFoo foo =\n    { { { false, 10}\n      , { true, -20}\n      }\n    };\n\ncompiles with the following warning:\n\ntest.pd:7:17:\n  |\n7 |       , { true, -20}\n  |                 ^\nwarning: Narrowing conversion from \'int6\' to \'uint32\' [--Wconversion]\n\nNarrowing conversions are prohibited in designated initializers . For example:\n\nstruct Foo\n{\n    optional<uint32>[2] items;\n}\n\nFoo foo =\n    { .items =\n        { {.is_valid = false, .value = 10}\n        , {.is_valid = true, .value = -20}\n        }\n    };\n\nwill result in compiler error:\n\nError 1: test.pd:9:39:\n  |\n9 |         , {.is_valid = true, .value = -20}\n  |                                       ^\nInvalid conversion from `int6` to `uint32`\nInsert an explicit cast to silence this issue `cast<uint32>()`\n\nThe --assert-on-narrowing-assignment command line switch adds runtime assertion checking which will fire if information is lost in a narrowing conversion when the value of a variable is updated (not during variable initialization). For example:\n\nvoid Foo()\n{\n    uint2 result = 3;\n\n    result = result + 1;\n}\n\nwill result in the following runtime error:\n\nAssertion failed: Source value of narrowing conversion cannot be represented by the result type.\n\nThe numeric.int.operator.modular module contains functions which can be used to perform arithmetic when interger overflow/underflow (wrapping) behavior is expected and should not trigger an assertion.\n\n\nBooleans\n\nBoolean variables in Sandpiper work similarly to boolean variables in other programming languages. Variables of type bool can only have a value of false or true . Conversion between boolean and integer types requires an explicit cast.\n\nbool b = false;\nbool c = !b;\nuint1 x = 3;\nbool d = cast<bool>(x);\n\n\nOperators\n\nSandpiper supports the following operators on boolean values:\n\n\nFloating-point\n\nSandpiper support 32-bit floating-point numbers. Unlike C-based programming languages, Sandpiper does not support a trailing f or F character after a floating-point literal.\n\nfloat32 times_pi(float32 x)\n{\n    return x * 3.14159;\n}\n\n\nOperators\n\nMost floating-point operations are implemented as functions rather than operators. Sandpiper supports the following operators (which are implemented as device-specific library functions):\n\n\nEnumerations\n\nEnumerations are user-defined types that consist of a set of named integral constants (enumerators). Enumerations in Sandpiper are similar to C++ enumerations except that Sandpiper enumerations must always specify a base type. If no initialization is provided for an enumerator its value is set to the value of the preceding enumerator plus 1, or to 0 if it is the first enumerator. Here, the constants RED , GREEN , and BLUE are set to 0, 1, and 2, respectively.\n\nenum RGBColor : uint2\n{\n    RED,\n    GREEN,\n    BLUE\n}\n\nIn the example below, the enumerator ONE is assigned the value of 1; FIVE is assigned the value of the expression ONE + 2 , which is 3; NINE is assigned the value of 0; and, finally, FIFTEEN is assigned the value 1.\n\nenum CrazyNumbers : uint5\n{\n    ONE = 1,\n    FIVE = ONE + 2,\n    NINE = 0,\n    FIFTEEN\n}\n\nEnumerators can only represent values within the range of their base type.\n\nEnumerators are'}
04:25:12,226 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,227 openai._base_client INFO Retrying request to /chat/completions in 6.842000 seconds
04:25:12,246 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,247 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: ively this is because callers expecting a function (uint16) -> uint16 can call a function of type (uint32) -> uint8 without any data loss: - argument of type uint16 can be losslessly upcast to uint32 - result of type uint8 can be upcast to uint16\n\nSubtyping of function types applies in any context where functions are used as values, such as functions passed as arguments to higher order functions, arguments passed for function type template parameters, and class callbacks default and initialization values.\n\n\nClasses\n\nA class is a container of state and methods. Class instances are called objects. All objects are known at compile time, there is no way to create an object at runtime.\n\nclass ExampleClass\n{\nprivate: // Private members are not visible from the outside\n\n    // Member variable with an initial value\n    uint32 _y = 5;\n\npublic: // Public members are visible from the outside\n\n    // Class method\n    uint32 ExampleMethod(uint32 x)\n    {\n        return x + _y;\n    }\n}\n\n// Instance of a class\nExampleClass _myExample;\n\nvoid EntryMethod()\n{\n    uint32 y = _myExample.ExampleMethod(4);\n    println("y = ",y);\n}\n\n\nCallbacks\n\nWhile public methods allow calling into an object, callbacks are a mechanism to allow an object to call back. Callbacks are declared as private members with a function type. Although function type declaration doesn’t have to specify parameter names, it is recommended to include them when declaring callbacks.\n\nclass Foo\n{\nprivate:\n    (uint32 x) -> uint2 callback;\n}\n\nDeclaring callbacks as private members of a class reflects the fact that they are initialized at object instantiation, are called from within the class implementation, but it doesn’t make sense to access a callback externally on an object of the class.\n\nA callback declaration can specify a default value. The default is used if the callback is not initialized during object instantiation. The function specified as the default value must be compatible with the declared callback type.\n\nclass Foo\n{\nprivate:\n    uint2 default_callback(uint32 x)\n    {\n        return 0;\n    }\n\n    (uint32 x) -> uint2 callback = default_callback;\n}\n\nDeclaration of a callback with a default value can use the auto type placeholder. The callback type is inferred from the type of the default value.\n\nclass Foo\n{\nprivate:\n    uint2 default_callback(uint32 x)\n    {\n        return 0;\n    }\n\n    auto callback = default_callback;\n}\n\nCallbacks can also be initialized at object declaration .\n\n\nCallback function compatibility\n\nCallbacks can be initialized only with functions that are compatible with the callback type. A function is compatible with a callback if the function type is a subtype of the callback type, and the function has the same set of attributes affecting call site as the callback declaration. The following function attributes affect the call site: - [[async]] - [[pipelined]] - [[unordered]] - [[function_latency]] - [[no_backpressure]]\n\nas well as the following parameter attributes: - [[last]]\n\n\nTemplates\n\nSandpiper supports parameterized types via templates. Template parameters can be types, values, or functions. Type template parameters are declared with typename . The type of a value template parameter can be explicitly specified or inferred with auto .\n\nA class template with a type template parameter:\n\ntemplate<typename T>\nclass MyClassType\n{\npublic:\n    T Add(T a, T b)\n    {\n        return a + b;\n    }\n}\n\nMyClassType<uint32> _obj;\n\nvoid TemplateTestFunction()\n{\n    println("Sum32 = ", _obj.Add(0x20, 0x02));\n}\n\nType template parameters can specify enum types and be used as enum constant qualifiers:\n\ntemplate <typename T>\nclass C\n{\n    T x = T::One;\n}\n\nenum E : uint32\n{\n    One = 1\n}\n\nC<E> c;\n\nType template parameters can specify a class and be used as qualifier of a type:\n\ntemplate <typename T>\nclass C\n{\n    T::X x;\n}\n\nclass Foo\n{\npublic:\n    using X = uint32;\n}\n\nC<Foo> c;\n\nA function template with an explicitly-specified type for a value parameter:\n\ntemplate<uint32 N>\ninline uint32 AddN(uint32 a)\n{\n    return a + N;\n}\n\nvoid Test(uint32 x)\n{\n    println("Result = ", AddN<3>(x));\n}\n\nA function template with an inferred type for a value parameter:\n\ntemplate<auto N>\ninline uint32 AddN(uint32 a)\n{\n    return a + N;\n}\n\nvoid Test(uint32 x)\n{\n    println("Result = ", AddN<3>(x));\n}\n\nTypes contained within class templates can be referenced from the outside:\n\ntemplate <typename T>\nclass Area\n{\npublic:\n    using Width = T;\n}\n\nArea<uint32>::Width x = 10;\n\nTemplates can be nested:\n\ntemplate <typename T>\nclass MyClass\n{\npublic:\n    template <auto N>\n    using MyType = T[N];\n}\n\nMyClass<bool>::MyType<2> launchGo = {false, true};\n\nStructure templates are supported:\n\ntemplate<typename T>\nstruct MyStructType\n{\n    T aStructMember;\n}\n\nUnion templates are supported:\n\ntemplate<typename T>\nunion U\n{\n    T t;\n    uint16 x;\n}\n\nFunction templates are supported:\n\ntemplate <typename T>\nvoid MyFunction(T x)\n{\n    // Code for the function goes here.\n}\n\nvoid F()\n{\n    MyFunction<uint32>(10);\n}\n\nNote that function template parameters do not always need to be explicitly specified. In many cases function template parameters can be deduced:\n\ntemplate <typename T>\nvoid MyFunction(optional<T> x)\n{\n    // Code for the function goes here.\n}\n\nvoid F()\n{\n    // Deduced make_optional<uint4> and\n######################\nOutput:', 'kwargs': {}}
04:25:12,247 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29826, Requested 2957. Please try again in 5.566s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,249 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'ively this is because callers expecting a function (uint16) -> uint16 can call a function of type (uint32) -> uint8 without any data loss: - argument of type uint16 can be losslessly upcast to uint32 - result of type uint8 can be upcast to uint16\n\nSubtyping of function types applies in any context where functions are used as values, such as functions passed as arguments to higher order functions, arguments passed for function type template parameters, and class callbacks default and initialization values.\n\n\nClasses\n\nA class is a container of state and methods. Class instances are called objects. All objects are known at compile time, there is no way to create an object at runtime.\n\nclass ExampleClass\n{\nprivate: // Private members are not visible from the outside\n\n    // Member variable with an initial value\n    uint32 _y = 5;\n\npublic: // Public members are visible from the outside\n\n    // Class method\n    uint32 ExampleMethod(uint32 x)\n    {\n        return x + _y;\n    }\n}\n\n// Instance of a class\nExampleClass _myExample;\n\nvoid EntryMethod()\n{\n    uint32 y = _myExample.ExampleMethod(4);\n    println("y = ",y);\n}\n\n\nCallbacks\n\nWhile public methods allow calling into an object, callbacks are a mechanism to allow an object to call back. Callbacks are declared as private members with a function type. Although function type declaration doesn’t have to specify parameter names, it is recommended to include them when declaring callbacks.\n\nclass Foo\n{\nprivate:\n    (uint32 x) -> uint2 callback;\n}\n\nDeclaring callbacks as private members of a class reflects the fact that they are initialized at object instantiation, are called from within the class implementation, but it doesn’t make sense to access a callback externally on an object of the class.\n\nA callback declaration can specify a default value. The default is used if the callback is not initialized during object instantiation. The function specified as the default value must be compatible with the declared callback type.\n\nclass Foo\n{\nprivate:\n    uint2 default_callback(uint32 x)\n    {\n        return 0;\n    }\n\n    (uint32 x) -> uint2 callback = default_callback;\n}\n\nDeclaration of a callback with a default value can use the auto type placeholder. The callback type is inferred from the type of the default value.\n\nclass Foo\n{\nprivate:\n    uint2 default_callback(uint32 x)\n    {\n        return 0;\n    }\n\n    auto callback = default_callback;\n}\n\nCallbacks can also be initialized at object declaration .\n\n\nCallback function compatibility\n\nCallbacks can be initialized only with functions that are compatible with the callback type. A function is compatible with a callback if the function type is a subtype of the callback type, and the function has the same set of attributes affecting call site as the callback declaration. The following function attributes affect the call site: - [[async]] - [[pipelined]] - [[unordered]] - [[function_latency]] - [[no_backpressure]]\n\nas well as the following parameter attributes: - [[last]]\n\n\nTemplates\n\nSandpiper supports parameterized types via templates. Template parameters can be types, values, or functions. Type template parameters are declared with typename . The type of a value template parameter can be explicitly specified or inferred with auto .\n\nA class template with a type template parameter:\n\ntemplate<typename T>\nclass MyClassType\n{\npublic:\n    T Add(T a, T b)\n    {\n        return a + b;\n    }\n}\n\nMyClassType<uint32> _obj;\n\nvoid TemplateTestFunction()\n{\n    println("Sum32 = ", _obj.Add(0x20, 0x02));\n}\n\nType template parameters can specify enum types and be used as enum constant qualifiers:\n\ntemplate <typename T>\nclass C\n{\n    T x = T::One;\n}\n\nenum E : uint32\n{\n    One = 1\n}\n\nC<E> c;\n\nType template parameters can specify a class and be used as qualifier of a type:\n\ntemplate <typename T>\nclass C\n{\n    T::X x;\n}\n\nclass Foo\n{\npublic:\n    using X = uint32;\n}\n\nC<Foo> c;\n\nA function template with an explicitly-specified type for a value parameter:\n\ntemplate<uint32 N>\ninline uint32 AddN(uint32 a)\n{\n    return a + N;\n}\n\nvoid Test(uint32 x)\n{\n    println("Result = ", AddN<3>(x));\n}\n\nA function template with an inferred type for a value parameter:\n\ntemplate<auto N>\ninline uint32 AddN(uint32 a)\n{\n    return a + N;\n}\n\nvoid Test(uint32 x)\n{\n    println("Result = ", AddN<3>(x));\n}\n\nTypes contained within class templates can be referenced from the outside:\n\ntemplate <typename T>\nclass Area\n{\npublic:\n    using Width = T;\n}\n\nArea<uint32>::Width x = 10;\n\nTemplates can be nested:\n\ntemplate <typename T>\nclass MyClass\n{\npublic:\n    template <auto N>\n    using MyType = T[N];\n}\n\nMyClass<bool>::MyType<2> launchGo = {false, true};\n\nStructure templates are supported:\n\ntemplate<typename T>\nstruct MyStructType\n{\n    T aStructMember;\n}\n\nUnion templates are supported:\n\ntemplate<typename T>\nunion U\n{\n    T t;\n    uint16 x;\n}\n\nFunction templates are supported:\n\ntemplate <typename T>\nvoid MyFunction(T x)\n{\n    // Code for the function goes here.\n}\n\nvoid F()\n{\n    MyFunction<uint32>(10);\n}\n\nNote that function template parameters do not always need to be explicitly specified. In many cases function template parameters can be deduced:\n\ntemplate <typename T>\nvoid MyFunction(optional<T> x)\n{\n    // Code for the function goes here.\n}\n\nvoid F()\n{\n    // Deduced make_optional<uint4> and'}
04:25:12,253 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,253 openai._base_client INFO Retrying request to /chat/completions in 5.622000 seconds
04:25:12,282 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,282 openai._base_client INFO Retrying request to /chat/completions in 5.576000 seconds
04:25:12,286 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,287 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: Function declaration Global functions Local functions Methods\n- Function call Function inlining\n- Generic functions Function templates Return type polymorphism\n- Lambdas Closures Class member access within lambda Generic lambdas\n- Closures in the global scope\n- Higher order functions Functions as function parameters Calling higher order functions Functions as function results\n- Function currying Partial application Constructing functions\n- Looping functions\n- Reset functions\n\n- Global functions\n- Local functions\n- Methods\n\n- Function inlining\n\n- Function templates\n- Return type polymorphism\n\n- Closures\n- Class member access within lambda\n- Generic lambdas\n\n- Functions as function parameters\n- Calling higher order functions\n- Functions as function results\n\n- Partial application\n- Constructing functions\n\n- Conditional code\n- Static recursion\n- Type comparison\n\n- Using modules Device specific modules\n- Defining modules\n- Re-exposing symbols Module difference\n- The base module\n- Special modules The .cmdargs module The .options module\n\n- Device specific modules\n\n- Module difference\n\n- The .cmdargs module\n- The .options module\n\n- Shadowing\n\n- Threads\n- Concurrency library functions pipelined_for pipelined_do pipelined_map pipelined_last async_exec\n- Spatial computing\n- Predicting throughput\n- Increasing parallelism\n- Thread ordering\n- Scheduling constraints Nesting scheduling constraints Global accesses in schedule blocks\n- atomic do\n- Data races Read replication and memory_norep Incoherent memory read-write\n- Function arbitration [[last]] attribute\n- Memory consistency model\n\n- pipelined_for\n- pipelined_do\n- pipelined_map\n- pipelined_last\n- async_exec\n\n- Nesting scheduling constraints\n- Global accesses in schedule blocks\n\n- Read replication and memory_norep\n- Incoherent memory read-write\n\n- [[last]] attribute\n\n- Arithmetic clog2\n- Type information Struct field offset\n- Debugging debug_view print and println sim_assert static assertions inspectable debug module hw_assert trace_buffer\n- Bit manipulation concat mux\n- Time cycles\n- Scheduling barrier fan_out stages function template\n\n- clog2\n\n- Struct field offset\n\n- debug_view\n- print and println\n- sim_assert\n- static assertions\n- inspectable\n- debug module hw_assert trace_buffer\n\n- hw_assert\n- trace_buffer\n\n- concat\n- mux\n\n- cycles\n\n- barrier\n- fan_out\n- stages function template\n\n\nThe Basics\n\n\nComments\n\n// a single line comment\n\n/*\n  multi-line comment\n*/\n\n/*\n  /*\n    nested multi-line comments are supported\n  */\n*/\n\n\nTypes\n\n\nIntegers\n\nInteger types can have any width, there are no ‘natural’ widths. Signed integers are encoded in two’s-complement.\n\nuint7 x; // unsigned, 7-bit integer\nint66 y; // signed, 66-bit integer\n\nThe width of an integer can also be a compile-time expression:\n\nconst auto N = 16;\nint<N> x;\n\n\nInteger Literals\n\nInteger literals can be written in decimal, hexadecimal, octal, or binary:\n\nuint32 decimal = 77;\nuint8 octal = 0o115;\nuint8 hex = 0x4D;\nuint12 bin = 0b01001101;\n\nDigits of an literal may be separated with underscores. Placement of the underscores doesn’t have any meaning, it is used purely to increase readability.\n\nauto b = 0b_0000_0000_1010;\nauto d = 50_403_934_498_988;\nauto h = 0x_1234_abcd;\n\nType of integer literal is inferred from the value unless a type is explicitly specified with literal type specifier. The type specifier is a suffix consisting of character i or u , indicating types int and uint respectively, followed by the type width in bits. The type specifier suffix may be separated from number with an underscore.\n\nauto x = 10;     // uint4 inferred\nauto y = 0xA_i8; // int8\nauto z = 10u8;   // uint8\n\nThe value of a typed literals must be within the range for the specified type.\n\nauto x = 10_i4;  // error: Literal out of range for `i4`\n\n\nOperators\n\nSandpiper supports the following operators on integers:\n\nFor right shifts, the sign of the left-hand side operand determines if the shift will be arithmetic or logical.\n\nDivision and remainder operators are supported only if the expression can be computed at compile time, or if the right-hand-side is a power of 2.\n\n\nInteger Type System\n\nThe Sandpiper type system for integers is different than CPU-based languages. In particular, the type of an expression is wide enough to represent the result without loss of data. For example:\n\nuint8 x;\nuint8 y;\nuint9 z = x + y; // the type of (x + y) is uint9\nauto w = x + y; // the type of w is uint9\n\nThe following table shows how Sandpiper computes the width of of an expression from the width of the operands used in the expression. The table assumes all operands have the same signedness. If the operand types do not have the same signedness, then all unsigned operands are first converted to signed (which widens their width by 1). Subtraction always converts unsigned operands to signed.\n\nFor certain expressions with an operand known at compile-time the compiler can infer a sufficient type that is narrower than what would be indicated by the above rules.\n\n\nImplicit integer conversions\n\nSandpiper will silently widen/narrow integer types as necessary. For example, the following code is valid:\n\nuint8 x;\n\n// The type of "x + 1" is uint9\n// but it is implicitly sliced to uint2 on assignment to z\nuint\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:25:12,287 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29805, Requested 2993. Please try again in 5.596s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,288 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'Function declaration Global functions Local functions Methods\n- Function call Function inlining\n- Generic functions Function templates Return type polymorphism\n- Lambdas Closures Class member access within lambda Generic lambdas\n- Closures in the global scope\n- Higher order functions Functions as function parameters Calling higher order functions Functions as function results\n- Function currying Partial application Constructing functions\n- Looping functions\n- Reset functions\n\n- Global functions\n- Local functions\n- Methods\n\n- Function inlining\n\n- Function templates\n- Return type polymorphism\n\n- Closures\n- Class member access within lambda\n- Generic lambdas\n\n- Functions as function parameters\n- Calling higher order functions\n- Functions as function results\n\n- Partial application\n- Constructing functions\n\n- Conditional code\n- Static recursion\n- Type comparison\n\n- Using modules Device specific modules\n- Defining modules\n- Re-exposing symbols Module difference\n- The base module\n- Special modules The .cmdargs module The .options module\n\n- Device specific modules\n\n- Module difference\n\n- The .cmdargs module\n- The .options module\n\n- Shadowing\n\n- Threads\n- Concurrency library functions pipelined_for pipelined_do pipelined_map pipelined_last async_exec\n- Spatial computing\n- Predicting throughput\n- Increasing parallelism\n- Thread ordering\n- Scheduling constraints Nesting scheduling constraints Global accesses in schedule blocks\n- atomic do\n- Data races Read replication and memory_norep Incoherent memory read-write\n- Function arbitration [[last]] attribute\n- Memory consistency model\n\n- pipelined_for\n- pipelined_do\n- pipelined_map\n- pipelined_last\n- async_exec\n\n- Nesting scheduling constraints\n- Global accesses in schedule blocks\n\n- Read replication and memory_norep\n- Incoherent memory read-write\n\n- [[last]] attribute\n\n- Arithmetic clog2\n- Type information Struct field offset\n- Debugging debug_view print and println sim_assert static assertions inspectable debug module hw_assert trace_buffer\n- Bit manipulation concat mux\n- Time cycles\n- Scheduling barrier fan_out stages function template\n\n- clog2\n\n- Struct field offset\n\n- debug_view\n- print and println\n- sim_assert\n- static assertions\n- inspectable\n- debug module hw_assert trace_buffer\n\n- hw_assert\n- trace_buffer\n\n- concat\n- mux\n\n- cycles\n\n- barrier\n- fan_out\n- stages function template\n\n\nThe Basics\n\n\nComments\n\n// a single line comment\n\n/*\n  multi-line comment\n*/\n\n/*\n  /*\n    nested multi-line comments are supported\n  */\n*/\n\n\nTypes\n\n\nIntegers\n\nInteger types can have any width, there are no ‘natural’ widths. Signed integers are encoded in two’s-complement.\n\nuint7 x; // unsigned, 7-bit integer\nint66 y; // signed, 66-bit integer\n\nThe width of an integer can also be a compile-time expression:\n\nconst auto N = 16;\nint<N> x;\n\n\nInteger Literals\n\nInteger literals can be written in decimal, hexadecimal, octal, or binary:\n\nuint32 decimal = 77;\nuint8 octal = 0o115;\nuint8 hex = 0x4D;\nuint12 bin = 0b01001101;\n\nDigits of an literal may be separated with underscores. Placement of the underscores doesn’t have any meaning, it is used purely to increase readability.\n\nauto b = 0b_0000_0000_1010;\nauto d = 50_403_934_498_988;\nauto h = 0x_1234_abcd;\n\nType of integer literal is inferred from the value unless a type is explicitly specified with literal type specifier. The type specifier is a suffix consisting of character i or u , indicating types int and uint respectively, followed by the type width in bits. The type specifier suffix may be separated from number with an underscore.\n\nauto x = 10;     // uint4 inferred\nauto y = 0xA_i8; // int8\nauto z = 10u8;   // uint8\n\nThe value of a typed literals must be within the range for the specified type.\n\nauto x = 10_i4;  // error: Literal out of range for `i4`\n\n\nOperators\n\nSandpiper supports the following operators on integers:\n\nFor right shifts, the sign of the left-hand side operand determines if the shift will be arithmetic or logical.\n\nDivision and remainder operators are supported only if the expression can be computed at compile time, or if the right-hand-side is a power of 2.\n\n\nInteger Type System\n\nThe Sandpiper type system for integers is different than CPU-based languages. In particular, the type of an expression is wide enough to represent the result without loss of data. For example:\n\nuint8 x;\nuint8 y;\nuint9 z = x + y; // the type of (x + y) is uint9\nauto w = x + y; // the type of w is uint9\n\nThe following table shows how Sandpiper computes the width of of an expression from the width of the operands used in the expression. The table assumes all operands have the same signedness. If the operand types do not have the same signedness, then all unsigned operands are first converted to signed (which widens their width by 1). Subtraction always converts unsigned operands to signed.\n\nFor certain expressions with an operand known at compile-time the compiler can infer a sufficient type that is narrower than what would be indicated by the above rules.\n\n\nImplicit integer conversions\n\nSandpiper will silently widen/narrow integer types as necessary. For example, the following code is valid:\n\nuint8 x;\n\n// The type of "x + 1" is uint9\n// but it is implicitly sliced to uint2 on assignment to z\nuint'}
04:25:12,293 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,294 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: supported:\n\ntemplate <typename T>\nvoid MyFunction(T x)\n{\n    // Code for the function goes here.\n}\n\nvoid F()\n{\n    MyFunction<uint32>(10);\n}\n\nNote that function template parameters do not always need to be explicitly specified. In many cases function template parameters can be deduced:\n\ntemplate <typename T>\nvoid MyFunction(optional<T> x)\n{\n    // Code for the function goes here.\n}\n\nvoid F()\n{\n    // Deduced make_optional<uint4> and MyFunction<uint4>\n    MyFunction(make_optional(true, 10));\n}\n\nTemplate parameters are written in order. This means that if a particular template parameter cannot be deduced, all following parameters must be specified. When writing a function template with multiple template parameters, order the template parameters from least-likely to be deduced to most-likely. In general, template parameters related to function parameter types can be deduced, whereas template parameters related to function return types cannot be.\n\nIn the following example, InputType and Count can be deduced, whereas ResultType cannot.\n\ntemplate<typename ResultType, typename InputType, auto Count>\ninline ResultType[Count] ConvertArray(InputType[Count] inputData)\n{\n    ResultType[Count] result;\n\n    static for (const auto i : Count)\n    {\n        result[i] = cast<ResultType>(inputData[i]);\n    }\n\n    return result;\n}\n\nvoid F()\n{\n    uint32[4] x = {};\n\n    uint64[4] y = ConvertArray<uint64>(x);\n}\n\nAlias templates are supported:\n\ntemplate<uint32 Foo>\nusing u = uint<Foo>;\n\nTemplate parameters can be functions:\n\ntemplate <(uint32, uint32) -> uint32 Callback>\nclass AClass\n{\npublic:\n    uint32 DoProcessing(uint32 a, uint32 b)\n    {\n        // Code to do some processing goes here.\n        // Now finish up by invoking the callback function.\n        return Callback(a,b) + 1;\n    }\n}\n\ninline uint32 CallbackFunction(uint32 a, uint32 b)\n{\n    return a + b;\n}\n\nAClass<CallbackFunction> _object;\n\nvoid TemplateSample()\n{\n    uint32 result = _object.DoProcessing(123,456);\n}\n\n\nDependent names\n\nThe meaning of some constructs may be ambiguous when they refer to names that can’t be resolved during parsing. For example, names that depend on template parameters can’t be resolved until template is instantiated. Names that are conditionally declared within static if are undefined until the condition is evaluated. Such names are called dependent names. When using a dependent name in a construct that may be ambiguous, meaning of the name must be disambiguated.\n\n\nThe typename disambiguator\n\nConstructs such as bitsizeof and bytesizeof operators and template instance declarations may have ambiguous meaning when used with dependent names. For example the expression:\n\nbitsizeof Foo[3]\n\nmay mean either “size of array with 3 elements of type Foo”, when Foo is a type, or “size of an element of an array”, when Foo is a variable.\n\nA dependent type name can be disambiguated using the typename disambiguator.\n\ntemplate <typename T>\nclass Foo\n{\n    uint<bitsizeof typename T::Nested[3]> x;\n}\n\nclass Bar\n{\npublic:\n    using Nested = uint32;\n}\n\nFoo<Bar> foo;\n\nAnother common example when dependent type names must be disambiguated is template instance arguments:\n\ntemplate <typename T>\nclass Foo\n{\n    optional<typename T::Nested> x;\n}\n\nclass Bar\n{\npublic:\n    using Nested = uint32;\n}\n\nFoo<Bar> foo;\n\n\nThe template disambiguator\n\nA dependent template is a template whose definition depends on a value or parameter. To instantiate a dependent template prefix an identifier with the template disambiguator to indicate that it refers to a template.\n\nFor example, a template that is a member of a type specified by a template parameter is a dependent template. In the code below, the member function template Do of the object obj is a dependent template because it depends on the type T, which is a template parameter.\n\ntemplate <typename T>\nclass Foo\n{\npublic:\n    void Go()\n    {\n        obj.template Do<uint32>();\n    }\n\n    T obj;\n}\n\nAnother common example of dependent templates are those defined within a static if statement. Their definition is dependent on the condition specified in the static if .\n\nuint32 x;\n\nstatic if(bitsizeof(x) > 10)\n{\n    template <typename T>\n    void Go()\n    {\n    }\n}\n\nvoid Run()\n{\n    template Go<bool>();\n}\n\nSimilarly, a member template of an object defined conditionally using static if is a dependent template:\n\nclass Bar\n{\npublic:\n    template <typename T>\n    void Go()\n    {\n    }\n}\n\nclass Foo\n{\n    void Run()\n    {\n        bar.template Go<uint32>();\n    }\n\n    static if (true)\n    {\n        Bar bar;\n    }\n}\n\n\nAbbreviated function templates\n\nGeneric functions can be declared using abbreviated syntax that doesn’t explicitly specify template parameters:\n\nauto Do(auto x, auto y)\n{\n    return x + y;\n}\n\nvoid Run()\n{\n    Do(10, -10);\n}\n\n\nTemplate parameter defaults\n\nTemplate parameters can have default values that are used when a given parameter is not specified during template instantiation. Both type and non-type template parameters can have default values.\n\n    template <typename T = uint32, auto N = 10>\n    using MyArray = T[N];\n\nThe default value of a parameter can depend on value(s) of preceding parameter(s):\n\n    template <auto InstrMemSize, auto InstrTCMSize = InstrMemSize>\n    class core\n    {\n    }\n\nTemplate parameter default values have to follow the same restrictions as template instance arguments: non-type parameter defaults must be known at\n######################\nOutput:', 'kwargs': {}}
04:25:12,294 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29804, Requested 2984. Please try again in 5.576s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,295 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'supported:\n\ntemplate <typename T>\nvoid MyFunction(T x)\n{\n    // Code for the function goes here.\n}\n\nvoid F()\n{\n    MyFunction<uint32>(10);\n}\n\nNote that function template parameters do not always need to be explicitly specified. In many cases function template parameters can be deduced:\n\ntemplate <typename T>\nvoid MyFunction(optional<T> x)\n{\n    // Code for the function goes here.\n}\n\nvoid F()\n{\n    // Deduced make_optional<uint4> and MyFunction<uint4>\n    MyFunction(make_optional(true, 10));\n}\n\nTemplate parameters are written in order. This means that if a particular template parameter cannot be deduced, all following parameters must be specified. When writing a function template with multiple template parameters, order the template parameters from least-likely to be deduced to most-likely. In general, template parameters related to function parameter types can be deduced, whereas template parameters related to function return types cannot be.\n\nIn the following example, InputType and Count can be deduced, whereas ResultType cannot.\n\ntemplate<typename ResultType, typename InputType, auto Count>\ninline ResultType[Count] ConvertArray(InputType[Count] inputData)\n{\n    ResultType[Count] result;\n\n    static for (const auto i : Count)\n    {\n        result[i] = cast<ResultType>(inputData[i]);\n    }\n\n    return result;\n}\n\nvoid F()\n{\n    uint32[4] x = {};\n\n    uint64[4] y = ConvertArray<uint64>(x);\n}\n\nAlias templates are supported:\n\ntemplate<uint32 Foo>\nusing u = uint<Foo>;\n\nTemplate parameters can be functions:\n\ntemplate <(uint32, uint32) -> uint32 Callback>\nclass AClass\n{\npublic:\n    uint32 DoProcessing(uint32 a, uint32 b)\n    {\n        // Code to do some processing goes here.\n        // Now finish up by invoking the callback function.\n        return Callback(a,b) + 1;\n    }\n}\n\ninline uint32 CallbackFunction(uint32 a, uint32 b)\n{\n    return a + b;\n}\n\nAClass<CallbackFunction> _object;\n\nvoid TemplateSample()\n{\n    uint32 result = _object.DoProcessing(123,456);\n}\n\n\nDependent names\n\nThe meaning of some constructs may be ambiguous when they refer to names that can’t be resolved during parsing. For example, names that depend on template parameters can’t be resolved until template is instantiated. Names that are conditionally declared within static if are undefined until the condition is evaluated. Such names are called dependent names. When using a dependent name in a construct that may be ambiguous, meaning of the name must be disambiguated.\n\n\nThe typename disambiguator\n\nConstructs such as bitsizeof and bytesizeof operators and template instance declarations may have ambiguous meaning when used with dependent names. For example the expression:\n\nbitsizeof Foo[3]\n\nmay mean either “size of array with 3 elements of type Foo”, when Foo is a type, or “size of an element of an array”, when Foo is a variable.\n\nA dependent type name can be disambiguated using the typename disambiguator.\n\ntemplate <typename T>\nclass Foo\n{\n    uint<bitsizeof typename T::Nested[3]> x;\n}\n\nclass Bar\n{\npublic:\n    using Nested = uint32;\n}\n\nFoo<Bar> foo;\n\nAnother common example when dependent type names must be disambiguated is template instance arguments:\n\ntemplate <typename T>\nclass Foo\n{\n    optional<typename T::Nested> x;\n}\n\nclass Bar\n{\npublic:\n    using Nested = uint32;\n}\n\nFoo<Bar> foo;\n\n\nThe template disambiguator\n\nA dependent template is a template whose definition depends on a value or parameter. To instantiate a dependent template prefix an identifier with the template disambiguator to indicate that it refers to a template.\n\nFor example, a template that is a member of a type specified by a template parameter is a dependent template. In the code below, the member function template Do of the object obj is a dependent template because it depends on the type T, which is a template parameter.\n\ntemplate <typename T>\nclass Foo\n{\npublic:\n    void Go()\n    {\n        obj.template Do<uint32>();\n    }\n\n    T obj;\n}\n\nAnother common example of dependent templates are those defined within a static if statement. Their definition is dependent on the condition specified in the static if .\n\nuint32 x;\n\nstatic if(bitsizeof(x) > 10)\n{\n    template <typename T>\n    void Go()\n    {\n    }\n}\n\nvoid Run()\n{\n    template Go<bool>();\n}\n\nSimilarly, a member template of an object defined conditionally using static if is a dependent template:\n\nclass Bar\n{\npublic:\n    template <typename T>\n    void Go()\n    {\n    }\n}\n\nclass Foo\n{\n    void Run()\n    {\n        bar.template Go<uint32>();\n    }\n\n    static if (true)\n    {\n        Bar bar;\n    }\n}\n\n\nAbbreviated function templates\n\nGeneric functions can be declared using abbreviated syntax that doesn’t explicitly specify template parameters:\n\nauto Do(auto x, auto y)\n{\n    return x + y;\n}\n\nvoid Run()\n{\n    Do(10, -10);\n}\n\n\nTemplate parameter defaults\n\nTemplate parameters can have default values that are used when a given parameter is not specified during template instantiation. Both type and non-type template parameters can have default values.\n\n    template <typename T = uint32, auto N = 10>\n    using MyArray = T[N];\n\nThe default value of a parameter can depend on value(s) of preceding parameter(s):\n\n    template <auto InstrMemSize, auto InstrTCMSize = InstrMemSize>\n    class core\n    {\n    }\n\nTemplate parameter default values have to follow the same restrictions as template instance arguments: non-type parameter defaults must be known at'}
04:25:12,305 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,306 openai._base_client INFO Retrying request to /chat/completions in 5.460000 seconds
04:25:12,331 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,333 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: .value can be either 0 or value , thus requiring a mux. In the optimized version, it is always set to value .\n\n\nRemove initialization of global/static variables\n\nRemoving initialization of global and static variables removes the need for reset logic.\n\nOriginal:\n\nuint32 F(bool start, bool end)\n{\n    uint32 result;\n\n    atomic\n    {\n        // Initialize counter to 0\n        static uint32 counter = 0;\n\n        result = counter;\n\n        // Reset counter when end = true\n        counter = end ? 0 : counter + 1;\n    }\n\n    return result;\n}\n\nOptimized:\n\nuint32 F(bool start, bool end)\n{\n    uint32 result;\n\n    atomic\n    {\n        // No initialization\n        static uint32 counter;\n\n        // Reset counter when start = true\n        counter = start ? 0 : counter + 1;\n\n        result = counter;\n    }\n\n    return result;\n}\n\n\nControl Inspection\n\nBy default, the generated hardware has debugging circuits to debug hangs and throughput issues. If this hardware is unnecessary, the --no-control-inspection compiler switch can be used to cause this debugging hardware to be omitted.\n\n\nNarrow/rotate arrays before indexing\n\nCreating temporary, narrowed, copies of an array prior to indexing can cause smaller muxes to be created and hence save area. Rotating the contents of this array can also simplify any mux selection logic to further save area.\n\nOriginal:\n\nuint8[31] input;\nuint8[16] output;\nindex_t<16> offset;\n\nstatic for(const auto i : 16)\n{\n    output[i] = input[i + offset];\n}\n\nOptimized:\n\nuint8[31] input;\nuint8[16] output;\nindex_t<16> offset;\n\nstatic for(const auto i : 16)\n{\n    uint8[16] tmp;\n    static for(const auto j : 16)\n        tmp[j] = input[i + j];\n    output[i] = tmp[offset];\n}\n\nIn this optimized case, instead of creating 8-bit 31:1 muxes these are now reduced to 8-bit 16:1 muxes, and in doing so, rotating their contents has also caused the 15 adders used to compute i + offset to be eliminated.\n\nBenefits from rotation can be applied independently to narrowing, as would be the case if uint8[16] input; existed in the original example above. Alternatively, the shift_array_left , shift_array_right , rotate_array_left and rotate_array_right functions from the library module data.array can be used:\n\nimport data.array\n\nvoid F()\n{\n    uint8[31] input;\n    uint8[16] output;\n    index_t<16> offset;\n\n    output = rotate_array_right<16>(input, offset);\n}\n\n\nMemory Allocator\n\nThe compiler assigns memories in the source code to physical memory types in the generated hardware. A number of compiler parameters control this allocation process. These parameters can cause interesting results like a memory with 32-elements being assigned to a block ram with capacity for 512 elements.\n\nThese parameters constrain total utilization of a give memory type:\n\n- --max-block-ram\n- --max-deep-ram\n\nIf one of these values is not specified, then the maximum number of resources on the target chip is used instead.\n\nThese parameters constrain utilization of specific memory instances:\n\n- --block-ram-util-threshold\n- --deep-ram-util-threshold\n\nThese parameters are interpreted as percentages. For example if --block-ram-util-threshold=30 , then no particular block ram will be instantiated if that instance would have a utilization of less than 30%.\n\n\nTrade frequency for area\n\nThere are a number of compiler switches that enable area to be reduced at the expense of frequency.\n\n\nTrade logic for DSPs\n\nThe following compiler switch can enable trading ALMs for DSPs. This is only implemented for Stratix10 currently.\n\n\nTrade registers for memories\n\nThe following compiler switch can enable trading registers for memories. |Switch |Description | Adjustment to lower register area| |— | — | —| | --mem-to-reg | Upper threshold to move data from registers to memory | Increase |\n\n\nTrade registers for logic\n\nThe --carry-select compiler switch can decrease pipeline depth (and hence register count) by implementing addition, subtraction, and comparison operations with replicated, speculative hardware. This switch is typically not useful on FPGAs which have dedicated carry hardware.\n\n\nWhen to stop\n\nThe following heuristics can be useful in determining how much potential there is to be gained by further area optimization. A well optimized Sandpiper design has the following properties:\n\n- Area consumed by FIFOs should be less than 10% of total area\n- Ratio of logic (LUT on FPGA, combinational area on ASIC) to registers should be >= 1\n- Have an explanation for each non-inline function in the resource report, why were these functions not inlined? See Use inline functions .\n- Have an explanation for each basic block in the resource report, what caused each basic block to be instantiated? See Minimize Basic Block Count .\n\n\nThread Rate\n\nBy default, Sandpiper functions have a peak throughput of one thread entering/exiting the function per clock cycle. This peak throughput is called the thread rate (also known as initiation interval). In some cases, this thread rate is faster than necessary. Examples include:\n\n- There is an upper bound on the rate of arrival of new inputs\n- On average, each thread must loop through a common portion of the design N times. If the common portion has a thread rate of 1, then the remainder of the design is will run no faster than 1 thread every N clock cycles.\n\nArea savings can be achieved by lowering the maximum thread rate of an entire design or a portion of a design. When a thread rate is specified, the Sandpiper compiler both enforces the thread rate and takes advantage of the thread\n######################\nOutput:', 'kwargs': {}}
04:25:12,333 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29784, Requested 3014. Please try again in 5.596s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,334 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': '.value can be either 0 or value , thus requiring a mux. In the optimized version, it is always set to value .\n\n\nRemove initialization of global/static variables\n\nRemoving initialization of global and static variables removes the need for reset logic.\n\nOriginal:\n\nuint32 F(bool start, bool end)\n{\n    uint32 result;\n\n    atomic\n    {\n        // Initialize counter to 0\n        static uint32 counter = 0;\n\n        result = counter;\n\n        // Reset counter when end = true\n        counter = end ? 0 : counter + 1;\n    }\n\n    return result;\n}\n\nOptimized:\n\nuint32 F(bool start, bool end)\n{\n    uint32 result;\n\n    atomic\n    {\n        // No initialization\n        static uint32 counter;\n\n        // Reset counter when start = true\n        counter = start ? 0 : counter + 1;\n\n        result = counter;\n    }\n\n    return result;\n}\n\n\nControl Inspection\n\nBy default, the generated hardware has debugging circuits to debug hangs and throughput issues. If this hardware is unnecessary, the --no-control-inspection compiler switch can be used to cause this debugging hardware to be omitted.\n\n\nNarrow/rotate arrays before indexing\n\nCreating temporary, narrowed, copies of an array prior to indexing can cause smaller muxes to be created and hence save area. Rotating the contents of this array can also simplify any mux selection logic to further save area.\n\nOriginal:\n\nuint8[31] input;\nuint8[16] output;\nindex_t<16> offset;\n\nstatic for(const auto i : 16)\n{\n    output[i] = input[i + offset];\n}\n\nOptimized:\n\nuint8[31] input;\nuint8[16] output;\nindex_t<16> offset;\n\nstatic for(const auto i : 16)\n{\n    uint8[16] tmp;\n    static for(const auto j : 16)\n        tmp[j] = input[i + j];\n    output[i] = tmp[offset];\n}\n\nIn this optimized case, instead of creating 8-bit 31:1 muxes these are now reduced to 8-bit 16:1 muxes, and in doing so, rotating their contents has also caused the 15 adders used to compute i + offset to be eliminated.\n\nBenefits from rotation can be applied independently to narrowing, as would be the case if uint8[16] input; existed in the original example above. Alternatively, the shift_array_left , shift_array_right , rotate_array_left and rotate_array_right functions from the library module data.array can be used:\n\nimport data.array\n\nvoid F()\n{\n    uint8[31] input;\n    uint8[16] output;\n    index_t<16> offset;\n\n    output = rotate_array_right<16>(input, offset);\n}\n\n\nMemory Allocator\n\nThe compiler assigns memories in the source code to physical memory types in the generated hardware. A number of compiler parameters control this allocation process. These parameters can cause interesting results like a memory with 32-elements being assigned to a block ram with capacity for 512 elements.\n\nThese parameters constrain total utilization of a give memory type:\n\n- --max-block-ram\n- --max-deep-ram\n\nIf one of these values is not specified, then the maximum number of resources on the target chip is used instead.\n\nThese parameters constrain utilization of specific memory instances:\n\n- --block-ram-util-threshold\n- --deep-ram-util-threshold\n\nThese parameters are interpreted as percentages. For example if --block-ram-util-threshold=30 , then no particular block ram will be instantiated if that instance would have a utilization of less than 30%.\n\n\nTrade frequency for area\n\nThere are a number of compiler switches that enable area to be reduced at the expense of frequency.\n\n\nTrade logic for DSPs\n\nThe following compiler switch can enable trading ALMs for DSPs. This is only implemented for Stratix10 currently.\n\n\nTrade registers for memories\n\nThe following compiler switch can enable trading registers for memories. |Switch |Description | Adjustment to lower register area| |— | — | —| | --mem-to-reg | Upper threshold to move data from registers to memory | Increase |\n\n\nTrade registers for logic\n\nThe --carry-select compiler switch can decrease pipeline depth (and hence register count) by implementing addition, subtraction, and comparison operations with replicated, speculative hardware. This switch is typically not useful on FPGAs which have dedicated carry hardware.\n\n\nWhen to stop\n\nThe following heuristics can be useful in determining how much potential there is to be gained by further area optimization. A well optimized Sandpiper design has the following properties:\n\n- Area consumed by FIFOs should be less than 10% of total area\n- Ratio of logic (LUT on FPGA, combinational area on ASIC) to registers should be >= 1\n- Have an explanation for each non-inline function in the resource report, why were these functions not inlined? See Use inline functions .\n- Have an explanation for each basic block in the resource report, what caused each basic block to be instantiated? See Minimize Basic Block Count .\n\n\nThread Rate\n\nBy default, Sandpiper functions have a peak throughput of one thread entering/exiting the function per clock cycle. This peak throughput is called the thread rate (also known as initiation interval). In some cases, this thread rate is faster than necessary. Examples include:\n\n- There is an upper bound on the rate of arrival of new inputs\n- On average, each thread must loop through a common portion of the design N times. If the common portion has a thread rate of 1, then the remainder of the design is will run no faster than 1 thread every N clock cycles.\n\nArea savings can be achieved by lowering the maximum thread rate of an entire design or a portion of a design. When a thread rate is specified, the Sandpiper compiler both enforces the thread rate and takes advantage of the thread'}
04:25:12,363 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,363 openai._base_client INFO Retrying request to /chat/completions in 5.590000 seconds
04:25:12,367 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,368 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: }\n\n\nParallel state updates\n\nA common pattern in Sandpiper code is an atomic block that updates shared variables based on the current values of the shared variables and the values of thread local variables.\n\nThe examples in this section use the State type and update_state function defined here:\n\nmodule parallel_state_update_example\n{ State\n , StateCount\n , update_state\n}\n\n// 4 possible state values\nenum State : uint2\n{\n    Idle,\n    Preparing,\n    Executing,\n    Finalizing\n}\n\n//| Total number of possible states.\nconst auto StateCount = 4;\n\n//| A function that computes a new state given\n// a current state and input data\ninline State update_state(State curr_state, uint8 input_data)\n{\n    State new_state = curr_state;\n\n    switch (curr_state)\n    {\n    case State::Idle:\n        if (input_data > 0)\n        {\n            new_state = State::Preparing;\n        }\n        break;\n\n    case State::Preparing:\n        new_state = State::Executing;\n        break;\n\n    case State::Executing:\n        if (input_data == 0)\n        {\n            new_state = State::Finalizing;\n        }\n        break;\n\n    case State::Finalizing:\n        new_state = State::Idle;\n        break;\n    }\n\n    return new_state;\n}\n\nThe code to handle one state update per thread is straightforward:\n\nimport parallel_state_update_example\n\n// Calls update_state once per byte\nvoid process_one_byte(uint8 input_data)\n{\n    atomic\n    {\n        static State current_state = {};\n\n        current_state = update_state(current_state, input_data);\n    }\n}\n\nIf the throughput of this code is insufficient for a task, then it can be parallelized such that each thread processes multiple bytes of input data per cycle. A naive way to parallelize the code is to serialize the calls to update_state in the atomic block. For example:\n\nimport parallel_state_update_example\n\nState process_eight_bytes(uint8[8] input_data_array)\n{\n    State result;\n\n    atomic\n    {\n        static State current_state = State::Idle;\n\n        static for (const auto i : 8)\n        {\n            current_state = update_state(\n                current_state,\n                input_data_array[i]);\n        }\n\n        result = current_state;\n    }\n\n    return result;\n}\n\nThe data dependency between the loop iterations would negatively impact the frequency of the generated circuit because all loop iterations must execute serially in one clock cycle.\n\nA technique to achieve high throughput and high frequency is to refactor the algorithm to perform most of the work outside of the atomic block. This can be accomplished by pre-computing the final state for each possible starting state into a compact table. Then the only operation left to be performed atomically is a table lookup.\n\nThe following example uses functions from the control.fsm and sync.atomic modules to implement this pattern.\n\nimport parallel_state_update_example\nimport control.fsm\nimport sync.atomic\n\nState process_eight_bytes(uint8[8] input_data_array)\n{\n    // Precompute the new state for all possible current states.\n    auto possible_new_states = speculate_updates(\n        [input_data_array](index_t<StateCount> state_index)\n        {\n            auto state = cast<State>(state_index);\n\n            static for (const auto i : 8)\n            {\n                state = update_state(\n                    state,\n                    input_data_array[i]);\n            }\n\n            return state;\n        },\n        {});\n\n    //| Atomically select an update from `possible_new_states` and apply it.\n    return second(atomically(\n        apply_update(\n            [](State[StateCount] updates, State prev)\n            { return updates[prev]; },\n            [](State update, State prev)\n            { return update; },\n            possible_new_states)));\n}\n\n\nPower\n\n\nClock Gating\n\nSandpiper supports multiple levels of clock gating to ensure that idle hardware does not consume dynamic power (for ASIC targets only).\n\n\nClock Gating Level\n\nThe clock gating level is set with the --clock-gating=N compiler option. --clock-gating=0 is the default setting, and disables all clock gating. --clock-gating=1 gates clocks feeding idle pipeline stages. This reduces dynamic power for periods of time when portions of the design process threads with a throughput of less than 1 thread per clock cycle. --clock-gating=2 additionally gates clocks feeding pipeline registers that hold values that will not be needed because of control flow.\n\nFor example, if --clock-gating=2 is specified when the following code is compiled, then the hardware associated with the code inside of the if statement will not consume dynamic power when b is false.\n\nbool b;\nuint32 x = 4;\n\nif (b)\n{\n    x = x * 12345;\n}\n\n--clock-gating=2 can increase area of a design because: * Clock gates consume area * Fine-grained clock gating makes some optimizations in the Sandpiper compiler less effective\n\n\nClock Gating Threshold\n\nClock gates themselves consume dynamic power. Clock gates only reduce overall power when the power consumed by a clock gate is less than the power saved in the gated registers. The --clock-gating-threshold=N compiler option controls the tradeoff point. A clock gate is only instantiated if the total number of register bits that would be gated is above the threshold.\n\n\nClock Gating Report\n\nThe Sandpiper compiler produces a report that indicates which registers are subject to a clock gate based on control flow in the source code. If this report shows a high percentage of un-gated registers then there may be opportunity to reduce dynamic power by adding control flow to the source code (and enabling --clock-gating=2 ).\n######################\nOutput:', 'kwargs': {}}
04:25:12,368 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29764, Requested 3032. Please try again in 5.592s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,369 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': '}\n\n\nParallel state updates\n\nA common pattern in Sandpiper code is an atomic block that updates shared variables based on the current values of the shared variables and the values of thread local variables.\n\nThe examples in this section use the State type and update_state function defined here:\n\nmodule parallel_state_update_example\n{ State\n , StateCount\n , update_state\n}\n\n// 4 possible state values\nenum State : uint2\n{\n    Idle,\n    Preparing,\n    Executing,\n    Finalizing\n}\n\n//| Total number of possible states.\nconst auto StateCount = 4;\n\n//| A function that computes a new state given\n// a current state and input data\ninline State update_state(State curr_state, uint8 input_data)\n{\n    State new_state = curr_state;\n\n    switch (curr_state)\n    {\n    case State::Idle:\n        if (input_data > 0)\n        {\n            new_state = State::Preparing;\n        }\n        break;\n\n    case State::Preparing:\n        new_state = State::Executing;\n        break;\n\n    case State::Executing:\n        if (input_data == 0)\n        {\n            new_state = State::Finalizing;\n        }\n        break;\n\n    case State::Finalizing:\n        new_state = State::Idle;\n        break;\n    }\n\n    return new_state;\n}\n\nThe code to handle one state update per thread is straightforward:\n\nimport parallel_state_update_example\n\n// Calls update_state once per byte\nvoid process_one_byte(uint8 input_data)\n{\n    atomic\n    {\n        static State current_state = {};\n\n        current_state = update_state(current_state, input_data);\n    }\n}\n\nIf the throughput of this code is insufficient for a task, then it can be parallelized such that each thread processes multiple bytes of input data per cycle. A naive way to parallelize the code is to serialize the calls to update_state in the atomic block. For example:\n\nimport parallel_state_update_example\n\nState process_eight_bytes(uint8[8] input_data_array)\n{\n    State result;\n\n    atomic\n    {\n        static State current_state = State::Idle;\n\n        static for (const auto i : 8)\n        {\n            current_state = update_state(\n                current_state,\n                input_data_array[i]);\n        }\n\n        result = current_state;\n    }\n\n    return result;\n}\n\nThe data dependency between the loop iterations would negatively impact the frequency of the generated circuit because all loop iterations must execute serially in one clock cycle.\n\nA technique to achieve high throughput and high frequency is to refactor the algorithm to perform most of the work outside of the atomic block. This can be accomplished by pre-computing the final state for each possible starting state into a compact table. Then the only operation left to be performed atomically is a table lookup.\n\nThe following example uses functions from the control.fsm and sync.atomic modules to implement this pattern.\n\nimport parallel_state_update_example\nimport control.fsm\nimport sync.atomic\n\nState process_eight_bytes(uint8[8] input_data_array)\n{\n    // Precompute the new state for all possible current states.\n    auto possible_new_states = speculate_updates(\n        [input_data_array](index_t<StateCount> state_index)\n        {\n            auto state = cast<State>(state_index);\n\n            static for (const auto i : 8)\n            {\n                state = update_state(\n                    state,\n                    input_data_array[i]);\n            }\n\n            return state;\n        },\n        {});\n\n    //| Atomically select an update from `possible_new_states` and apply it.\n    return second(atomically(\n        apply_update(\n            [](State[StateCount] updates, State prev)\n            { return updates[prev]; },\n            [](State update, State prev)\n            { return update; },\n            possible_new_states)));\n}\n\n\nPower\n\n\nClock Gating\n\nSandpiper supports multiple levels of clock gating to ensure that idle hardware does not consume dynamic power (for ASIC targets only).\n\n\nClock Gating Level\n\nThe clock gating level is set with the --clock-gating=N compiler option. --clock-gating=0 is the default setting, and disables all clock gating. --clock-gating=1 gates clocks feeding idle pipeline stages. This reduces dynamic power for periods of time when portions of the design process threads with a throughput of less than 1 thread per clock cycle. --clock-gating=2 additionally gates clocks feeding pipeline registers that hold values that will not be needed because of control flow.\n\nFor example, if --clock-gating=2 is specified when the following code is compiled, then the hardware associated with the code inside of the if statement will not consume dynamic power when b is false.\n\nbool b;\nuint32 x = 4;\n\nif (b)\n{\n    x = x * 12345;\n}\n\n--clock-gating=2 can increase area of a design because: * Clock gates consume area * Fine-grained clock gating makes some optimizations in the Sandpiper compiler less effective\n\n\nClock Gating Threshold\n\nClock gates themselves consume dynamic power. Clock gates only reduce overall power when the power consumed by a clock gate is less than the power saved in the gated registers. The --clock-gating-threshold=N compiler option controls the tradeoff point. A clock gate is only instantiated if the total number of register bits that would be gated is above the threshold.\n\n\nClock Gating Report\n\nThe Sandpiper compiler produces a report that indicates which registers are subject to a clock gate based on control flow in the source code. If this report shows a high percentage of un-gated registers then there may be opportunity to reduce dynamic power by adding control flow to the source code (and enabling --clock-gating=2 ).'}
04:25:12,391 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,392 openai._base_client INFO Retrying request to /chat/completions in 5.290000 seconds
04:25:12,400 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,400 openai._base_client INFO Retrying request to /chat/completions in 6.860000 seconds
04:25:12,401 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,401 openai._base_client INFO Retrying request to /chat/completions in 5.778000 seconds
04:25:12,424 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,424 openai._base_client INFO Retrying request to /chat/completions in 5.474000 seconds
04:25:12,457 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,458 openai._base_client INFO Retrying request to /chat/completions in 5.178000 seconds
04:25:12,501 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,501 openai._base_client INFO Retrying request to /chat/completions in 5.588000 seconds
04:25:12,517 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,519 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: loops\n\nWhile Sandpiper supports sequential loops ( for and do/while ) other constructs are usually more efficient. Sequential loops have a non-trivial area overhead and do not introduce any new concurrency. Where possible, call a pipelined_* function or use an static for loop. Reserve usage of sequential loops for cases where all of the following holds:\n\n- Each loop iteration depends on a previous iteration\n- The loop-carried dependency cannot be resolved with atomic / [[schedule(N)]]\n- An static for loop cannot because used (loop bound not known at compile time, or the area cost of replicated logic is too high)\n\n\nSequential loop reorder buffer\n\nFor sequential loops, the default behavior is that threads that finish all loop iterations will be held in a buffer and are not allowed to move past the loop until all preceding threads have moved past the loop.\n\nThe [[reorder_by_looping]] attribute will maintain this ordering of threads but the ordering is maintained by having threads execute extra iterations of the loop. The extra iterations are predicated to prevent side effects. This reduces area by removing the reorder buffer but can reduce throughput because “finished” threads are still executing the loop.\n\nvoid F()\n{\n    uint32 x;\n    [[reorder_by_looping]]\n    do\n    {\n        x++;\n    } while (x < 16);\n}\n\nThe [[unordered]] attribute can also be used to remove the reorder buffer but this removes the guarantee about thread ordering when moving past the loop. See Thread ordering for more details.\n\n\nUnrolled loop-carried dependencies\n\nDependencies between iterations of static for loops can result in a deep pipeline which will increase resource usage. For example, in the code below the depth of the generated pipeline is linearly proportional to N :\n\nconst auto N = 8;\nuint32[N] input;\n\nuint32 total = 0;\n\nstatic for (const auto i : N)\n{\n    total += input[i];\n}\n\nConsider using library functions that are coded specially to reduce pipeline depth for cases like this. Relevant functions to consider are:\n\nreduce map_reduce inclusive_scan prefix_sum\n\n\nHoisting\n\n\nstatic for\n\nHoisting loop-invariant code outside of a loop is common practice in many languages. In Sandpiper, hoisting loop-invariant code outside of an static for loop will result in an area savings (and in many cases the compiler will perform this transformation automatically). For example, the second static for loop below will consume fewer resources because the term (x * y) > 4) is not replicated for each loop body.\n\nuint32 x;\nuint32 y;\nuint32[8] input;\n\nuint32 sum = 0;\n\nstatic for (const auto i : 8)\n{\n    sum += (x * y) > 4 ? input[i] : 0;\n}\n\nbool cond = (x * y) > 4;\n\nstatic for (const auto i : 8)\n{\n    sum += cond ? input[i] : 0;\n}\n\n\nSequential loops and pipelined_* functions\n\nFor sequential loops and calls to pipelined_* functions, hosting loop-invariant code outside of the loop does not reduce resource usage. The hardware corresponding to the loop-invariant code consumes the same amount of resources when it is inside the loop as when it is outside of the loop. In the example below, the first call to pipelined_for captures 263 bits of local variables whereas the second call to pipelined_for captures 16 bits of local variables. In this case, hoisting the shift operation actually results in higher resource consumption.\n\nuint8 x;\nuint8 y;\n\n// x << y could potentially require 263 bits to represent\nuint263 z = x << y;\n\npipelined_for(\n    32,\n    [z](index_t<32> i)\n    {\n        // do something with z\n    });\n\npipelined_for(\n    32,\n    [x, y](index_t<32> i)\n    {\n        uint263 z = x << y;\n        // do something with z\n    });\n\n\nReduce Mux Widths\n\nThe bit-width of muxes (e.g., if/else statements or ternary operators) can sometimes be reduced through refactoring. The following code samples show examples of this.\n\nOriginal:\n\nbool condition;\nuint32 counter;\nif (condition)\n{\n    counter++;\n}\n\nOptimized:\n\nbool condition;\nuint32 counter;\nuint1 increment = cast<uint1>(condition);\ncounter += increment;\n\nIn the original version, the mux is 32 bits wide. In the optimized version, the mux is only 1 bit wide.\n\nSimilarly, the following reduces a 32-bit mux to a 2-bit mux.\n\nOriginal:\n\nbool condition;\nuint32 counter;\ncounter = condition ? counter + 1 : counter + 2;\n\nOptimized:\n\nbool condition;\nuint32 counter;\ncount_t<2> increment = condition ? 1 : 2;\ncounter += increment;\n\n\nOptionals\n\nIf an optional is only used when is_valid is true, then setting a default for value can avoid an extra mux.\n\nOriginal:\n\nbool condition;\nuint32 value;\noptional<uint32> x = {};\nif (condition)\n{\n    x = make_optional(true, value);\n}\n\nOptimized:\n\nbool condition;\nuint32 value;\noptional<uint32> x = make_optional(false, value);\nif (condition)\n{\n    x.is_valid = true;\n}\n\nIn the original version, x.value can be either 0 or value , thus requiring a mux. In the optimized version, it is always set to value .\n\n\nRemove initialization of global/static variables\n\nRemoving initialization of global and static variables removes the need for reset logic.\n\nOriginal:\n\nuint32 F(bool start, bool end)\n{\n    uint32 result;\n\n    atomic\n    {\n        // Initialize counter to 0\n        static uint32 counter = 0;\n\n        result = counter;\n\n        // Reset counter when end = true\n######################\nOutput:', 'kwargs': {}}
04:25:12,519 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29692, Requested 2945. Please try again in 5.274s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:12,520 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'loops\n\nWhile Sandpiper supports sequential loops ( for and do/while ) other constructs are usually more efficient. Sequential loops have a non-trivial area overhead and do not introduce any new concurrency. Where possible, call a pipelined_* function or use an static for loop. Reserve usage of sequential loops for cases where all of the following holds:\n\n- Each loop iteration depends on a previous iteration\n- The loop-carried dependency cannot be resolved with atomic / [[schedule(N)]]\n- An static for loop cannot because used (loop bound not known at compile time, or the area cost of replicated logic is too high)\n\n\nSequential loop reorder buffer\n\nFor sequential loops, the default behavior is that threads that finish all loop iterations will be held in a buffer and are not allowed to move past the loop until all preceding threads have moved past the loop.\n\nThe [[reorder_by_looping]] attribute will maintain this ordering of threads but the ordering is maintained by having threads execute extra iterations of the loop. The extra iterations are predicated to prevent side effects. This reduces area by removing the reorder buffer but can reduce throughput because “finished” threads are still executing the loop.\n\nvoid F()\n{\n    uint32 x;\n    [[reorder_by_looping]]\n    do\n    {\n        x++;\n    } while (x < 16);\n}\n\nThe [[unordered]] attribute can also be used to remove the reorder buffer but this removes the guarantee about thread ordering when moving past the loop. See Thread ordering for more details.\n\n\nUnrolled loop-carried dependencies\n\nDependencies between iterations of static for loops can result in a deep pipeline which will increase resource usage. For example, in the code below the depth of the generated pipeline is linearly proportional to N :\n\nconst auto N = 8;\nuint32[N] input;\n\nuint32 total = 0;\n\nstatic for (const auto i : N)\n{\n    total += input[i];\n}\n\nConsider using library functions that are coded specially to reduce pipeline depth for cases like this. Relevant functions to consider are:\n\nreduce map_reduce inclusive_scan prefix_sum\n\n\nHoisting\n\n\nstatic for\n\nHoisting loop-invariant code outside of a loop is common practice in many languages. In Sandpiper, hoisting loop-invariant code outside of an static for loop will result in an area savings (and in many cases the compiler will perform this transformation automatically). For example, the second static for loop below will consume fewer resources because the term (x * y) > 4) is not replicated for each loop body.\n\nuint32 x;\nuint32 y;\nuint32[8] input;\n\nuint32 sum = 0;\n\nstatic for (const auto i : 8)\n{\n    sum += (x * y) > 4 ? input[i] : 0;\n}\n\nbool cond = (x * y) > 4;\n\nstatic for (const auto i : 8)\n{\n    sum += cond ? input[i] : 0;\n}\n\n\nSequential loops and pipelined_* functions\n\nFor sequential loops and calls to pipelined_* functions, hosting loop-invariant code outside of the loop does not reduce resource usage. The hardware corresponding to the loop-invariant code consumes the same amount of resources when it is inside the loop as when it is outside of the loop. In the example below, the first call to pipelined_for captures 263 bits of local variables whereas the second call to pipelined_for captures 16 bits of local variables. In this case, hoisting the shift operation actually results in higher resource consumption.\n\nuint8 x;\nuint8 y;\n\n// x << y could potentially require 263 bits to represent\nuint263 z = x << y;\n\npipelined_for(\n    32,\n    [z](index_t<32> i)\n    {\n        // do something with z\n    });\n\npipelined_for(\n    32,\n    [x, y](index_t<32> i)\n    {\n        uint263 z = x << y;\n        // do something with z\n    });\n\n\nReduce Mux Widths\n\nThe bit-width of muxes (e.g., if/else statements or ternary operators) can sometimes be reduced through refactoring. The following code samples show examples of this.\n\nOriginal:\n\nbool condition;\nuint32 counter;\nif (condition)\n{\n    counter++;\n}\n\nOptimized:\n\nbool condition;\nuint32 counter;\nuint1 increment = cast<uint1>(condition);\ncounter += increment;\n\nIn the original version, the mux is 32 bits wide. In the optimized version, the mux is only 1 bit wide.\n\nSimilarly, the following reduces a 32-bit mux to a 2-bit mux.\n\nOriginal:\n\nbool condition;\nuint32 counter;\ncounter = condition ? counter + 1 : counter + 2;\n\nOptimized:\n\nbool condition;\nuint32 counter;\ncount_t<2> increment = condition ? 1 : 2;\ncounter += increment;\n\n\nOptionals\n\nIf an optional is only used when is_valid is true, then setting a default for value can avoid an extra mux.\n\nOriginal:\n\nbool condition;\nuint32 value;\noptional<uint32> x = {};\nif (condition)\n{\n    x = make_optional(true, value);\n}\n\nOptimized:\n\nbool condition;\nuint32 value;\noptional<uint32> x = make_optional(false, value);\nif (condition)\n{\n    x.is_valid = true;\n}\n\nIn the original version, x.value can be either 0 or value , thus requiring a mux. In the optimized version, it is always set to value .\n\n\nRemove initialization of global/static variables\n\nRemoving initialization of global and static variables removes the need for reset logic.\n\nOriginal:\n\nuint32 F(bool start, bool end)\n{\n    uint32 result;\n\n    atomic\n    {\n        // Initialize counter to 0\n        static uint32 counter = 0;\n\n        result = counter;\n\n        // Reset counter when end = true'}
04:25:12,563 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,563 openai._base_client INFO Retrying request to /chat/completions in 5.582000 seconds
04:25:12,612 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,612 openai._base_client INFO Retrying request to /chat/completions in 5.598000 seconds
04:25:12,613 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,613 openai._base_client INFO Retrying request to /chat/completions in 5.598000 seconds
04:25:12,619 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,619 openai._base_client INFO Retrying request to /chat/completions in 5.054000 seconds
04:25:12,967 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,968 openai._base_client INFO Retrying request to /chat/completions in 5.594000 seconds
04:25:12,976 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:12,977 openai._base_client INFO Retrying request to /chat/completions in 5.590000 seconds
04:25:13,48 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:13,48 openai._base_client INFO Retrying request to /chat/completions in 5.588000 seconds
04:25:13,245 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:13,245 openai._base_client INFO Retrying request to /chat/completions in 5.596000 seconds
04:25:15,381 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:15,482 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:15,482 openai._base_client INFO Retrying request to /chat/completions in 4.846000 seconds
04:25:17,669 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:17,745 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,745 openai._base_client INFO Retrying request to /chat/completions in 2.500000 seconds
04:25:17,774 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,774 openai._base_client INFO Retrying request to /chat/completions in 2.516000 seconds
04:25:17,779 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,779 openai._base_client INFO Retrying request to /chat/completions in 2.506000 seconds
04:25:17,782 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,782 openai._base_client INFO Retrying request to /chat/completions in 3.282000 seconds
04:25:17,788 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,788 openai._base_client INFO Retrying request to /chat/completions in 2.514000 seconds
04:25:17,861 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,862 openai._base_client INFO Retrying request to /chat/completions in 2.502000 seconds
04:25:17,878 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,878 openai._base_client INFO Retrying request to /chat/completions in 2.496000 seconds
04:25:17,963 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,964 openai._base_client INFO Retrying request to /chat/completions in 2.508000 seconds
04:25:17,976 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,976 openai._base_client INFO Retrying request to /chat/completions in 2.508000 seconds
04:25:17,989 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:17,989 openai._base_client INFO Retrying request to /chat/completions in 2.514000 seconds
04:25:18,51 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,51 openai._base_client INFO Retrying request to /chat/completions in 2.506000 seconds
04:25:18,146 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,148 openai._base_client INFO Retrying request to /chat/completions in 2.510000 seconds
04:25:18,194 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,195 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: Debugger\n\n- Overview\n- Installation Installing the Extension\n- Configuration Generating the launch.json file Sandpiper specific fields\n- Debugging Debugging using the interpreter Debugging using a trace file\n- Common tasks\n- Logpoints\n- Time Travel Debugging Reversed Continue Step Back Data Breakpoints\n- Troubleshooting\n- Example\n- Exercises\n\n- Installing the Extension\n\n- Generating the launch.json file Sandpiper specific fields\n\n- Sandpiper specific fields\n\n- Debugging using the interpreter\n- Debugging using a trace file\n\n- Reversed Continue\n- Step Back\n- Data Breakpoints\n\n\nOverview\n\nThe Sandpiper debugger is based on Visual Studio Code (VSCode), and distributed as a VSCode extension file. The structure is illustrated in the following diagram.\n\nVsCode provides the GUI and all commands to the user. The Sandpiper Debug Adapter is a separate process that receives commands from VsCode using the Debug Adapter Protocol. The debugger in turn creates a separate process where the Sandpiper Interpreter executes, or internally instantiates a trace evaluator.\n\n\nInstallation\n\nThe Sandpiper VsCode extension is part of the Sandpiper nuget (located in the vsce folder) and contains: 1. Syntax highlighting for *.pd files 2. Debugger\n\n\nInstalling the Extension\n\nInstall VsCode by following the instructions here .\n\nThen install the Sandpiper extension by performing the following steps.\n\n1. In a command prompt/terminal run\n\ncode --install-extension vscode-pd-extension-0.0.9.vsix\n\nAlternatively, install the extension from within VsCode by selecting the “Install from VSIX” option:\n\n1. Re-load Visual Studio Code\n2. Open File->Preferences->Settings->Extentions->PipeDream Language Extension\n3. Search for “Debugger PD” and enter the absolute path to Sandpiper’s DebugAdapter executable file. This file is provided in the Sandpiper nuget, located in the same vsce folder as the vsix extension\n4. Under Unix, verify that the DebugAdapter file is indeed executable, if it is not executable run chmod +x DebugAdapter to make it so\n5. Re-load Visual Studio Code (this must be done)\n\n\nConfiguration\n\nDebugging with VsCode requires the creation of a configuration file called launch.json in the .vscode subfolder of the workspace. The file contains various configurations , which are then selectable in the Run and Debug pane:\n\nTo start debugging, the user selects the desired configuration and then clicks on the green arrow. The debugger cannot run in a terminal like GDB, it only works in conjunction with VsCode.\n\n\nGenerating the launch.json file\n\nThe user starts VSCode in a working folder from the command line running\n\ncode .\n\nSpecifying . makes the intended workspace explicit. Otherwise VsCode uses a default workspace, the same for all projects. The first time the workspace does not contain any .vscode subfolder. Afterwards VSCode will keep a separate state for this workspace, such as opened files, breakpoints etc etc. For more information, refer to the workspace concept in the VSCode documentation .\n\nTo create the launch.json file the user selects the Run menu and the option Add Configuration... therein.\n\nA menu appears with various options, the user selects the pipedream option.\n\nThis creates the initial skeletal launch.json file and opens it for editing. Selecting Add Configuration... again will open the existing launch.json file. The file contains two configurations named Sandpiper Interpreter and Sandpiper Trace . The user must edit the values of a few fields before they can start debugging.\n\nIntellisense is enabled for launch.json files. The user can hover on any field to see a short help message, or the available values.\n\nThe following generic fields are required and must be edited in the skeletal launch.json file.\n\n- program is usually the path to the C++ executable that contains the C++-side test program. This is the executable that will internally invoke the Sandpiper interpreter. The path can be absolute, or relative to cwd . It is also possible to use other programs, such as a Python script, to eventually activate the interpreter.\n- args is the list of comma-separated values to pass to the test program.\n- cwd is the current working directory for the test program. All relative paths resolve relative to this path. The builtin macro ${workspaceRoot} usually suffices.\n\nprogram is usually the path to the C++ executable that contains the C++-side test program. This is the executable that will internally invoke the Sandpiper interpreter. The path can be absolute, or relative to cwd . It is also possible to use other programs, such as a Python script, to eventually activate the interpreter.\n\nargs is the list of comma-separated values to pass to the test program.\n\ncwd is the current working directory for the test program. All relative paths resolve relative to this path. The builtin macro ${workspaceRoot} usually suffices.\n\n\nSandpiper specific fields\n\nFor trace debugging the fields program and args are required by VsCode but their values are ignored.\n\n- trace is required only for trace based debugging; it is the path to the trace file. Usually this file is called PbTrace.txt , the user must provide a file system path to it. The path can be absolute, or relative to the cwd field. If this option is missing, or if the path is empty the debugger instead starts program .\n- symbolSearchPath is required for all configurations. This is the path to the debug symbols generated by the Sandpiper compiler. By default this file is called PipeDreamGeneratedDebugSymbols.csv .\n- wave is optionally used with traces. It is the path to a VCD file that the debugger creates. The debugger also attempts to start the program wave_reader to show that file. GTKWave is one reader that is freely available.\n- stopAtEntry is optional, valid in all configurations, with a default value of false\n######################\nOutput:', 'kwargs': {}}
04:25:18,195 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 28157, Requested 3088. Please try again in 2.49s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:18,196 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'Debugger\n\n- Overview\n- Installation Installing the Extension\n- Configuration Generating the launch.json file Sandpiper specific fields\n- Debugging Debugging using the interpreter Debugging using a trace file\n- Common tasks\n- Logpoints\n- Time Travel Debugging Reversed Continue Step Back Data Breakpoints\n- Troubleshooting\n- Example\n- Exercises\n\n- Installing the Extension\n\n- Generating the launch.json file Sandpiper specific fields\n\n- Sandpiper specific fields\n\n- Debugging using the interpreter\n- Debugging using a trace file\n\n- Reversed Continue\n- Step Back\n- Data Breakpoints\n\n\nOverview\n\nThe Sandpiper debugger is based on Visual Studio Code (VSCode), and distributed as a VSCode extension file. The structure is illustrated in the following diagram.\n\nVsCode provides the GUI and all commands to the user. The Sandpiper Debug Adapter is a separate process that receives commands from VsCode using the Debug Adapter Protocol. The debugger in turn creates a separate process where the Sandpiper Interpreter executes, or internally instantiates a trace evaluator.\n\n\nInstallation\n\nThe Sandpiper VsCode extension is part of the Sandpiper nuget (located in the vsce folder) and contains: 1. Syntax highlighting for *.pd files 2. Debugger\n\n\nInstalling the Extension\n\nInstall VsCode by following the instructions here .\n\nThen install the Sandpiper extension by performing the following steps.\n\n1. In a command prompt/terminal run\n\ncode --install-extension vscode-pd-extension-0.0.9.vsix\n\nAlternatively, install the extension from within VsCode by selecting the “Install from VSIX” option:\n\n1. Re-load Visual Studio Code\n2. Open File->Preferences->Settings->Extentions->PipeDream Language Extension\n3. Search for “Debugger PD” and enter the absolute path to Sandpiper’s DebugAdapter executable file. This file is provided in the Sandpiper nuget, located in the same vsce folder as the vsix extension\n4. Under Unix, verify that the DebugAdapter file is indeed executable, if it is not executable run chmod +x DebugAdapter to make it so\n5. Re-load Visual Studio Code (this must be done)\n\n\nConfiguration\n\nDebugging with VsCode requires the creation of a configuration file called launch.json in the .vscode subfolder of the workspace. The file contains various configurations , which are then selectable in the Run and Debug pane:\n\nTo start debugging, the user selects the desired configuration and then clicks on the green arrow. The debugger cannot run in a terminal like GDB, it only works in conjunction with VsCode.\n\n\nGenerating the launch.json file\n\nThe user starts VSCode in a working folder from the command line running\n\ncode .\n\nSpecifying . makes the intended workspace explicit. Otherwise VsCode uses a default workspace, the same for all projects. The first time the workspace does not contain any .vscode subfolder. Afterwards VSCode will keep a separate state for this workspace, such as opened files, breakpoints etc etc. For more information, refer to the workspace concept in the VSCode documentation .\n\nTo create the launch.json file the user selects the Run menu and the option Add Configuration... therein.\n\nA menu appears with various options, the user selects the pipedream option.\n\nThis creates the initial skeletal launch.json file and opens it for editing. Selecting Add Configuration... again will open the existing launch.json file. The file contains two configurations named Sandpiper Interpreter and Sandpiper Trace . The user must edit the values of a few fields before they can start debugging.\n\nIntellisense is enabled for launch.json files. The user can hover on any field to see a short help message, or the available values.\n\nThe following generic fields are required and must be edited in the skeletal launch.json file.\n\n- program is usually the path to the C++ executable that contains the C++-side test program. This is the executable that will internally invoke the Sandpiper interpreter. The path can be absolute, or relative to cwd . It is also possible to use other programs, such as a Python script, to eventually activate the interpreter.\n- args is the list of comma-separated values to pass to the test program.\n- cwd is the current working directory for the test program. All relative paths resolve relative to this path. The builtin macro ${workspaceRoot} usually suffices.\n\nprogram is usually the path to the C++ executable that contains the C++-side test program. This is the executable that will internally invoke the Sandpiper interpreter. The path can be absolute, or relative to cwd . It is also possible to use other programs, such as a Python script, to eventually activate the interpreter.\n\nargs is the list of comma-separated values to pass to the test program.\n\ncwd is the current working directory for the test program. All relative paths resolve relative to this path. The builtin macro ${workspaceRoot} usually suffices.\n\n\nSandpiper specific fields\n\nFor trace debugging the fields program and args are required by VsCode but their values are ignored.\n\n- trace is required only for trace based debugging; it is the path to the trace file. Usually this file is called PbTrace.txt , the user must provide a file system path to it. The path can be absolute, or relative to the cwd field. If this option is missing, or if the path is empty the debugger instead starts program .\n- symbolSearchPath is required for all configurations. This is the path to the debug symbols generated by the Sandpiper compiler. By default this file is called PipeDreamGeneratedDebugSymbols.csv .\n- wave is optionally used with traces. It is the path to a VCD file that the debugger creates. The debugger also attempts to start the program wave_reader to show that file. GTKWave is one reader that is freely available.\n- stopAtEntry is optional, valid in all configurations, with a default value of false'}
04:25:18,236 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,238 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: is required for all configurations. This is the path to the debug symbols generated by the Sandpiper compiler. By default this file is called PipeDreamGeneratedDebugSymbols.csv .\n- wave is optionally used with traces. It is the path to a VCD file that the debugger creates. The debugger also attempts to start the program wave_reader to show that file. GTKWave is one reader that is freely available.\n- stopAtEntry is optional, valid in all configurations, with a default value of false. This option requests the debugger to stop execution at the first opportunity. In the trace case, this is at the start of the trace, before anything happens. If the program has a startup function, or any other function marked [[reset]] that is where execution starts.\n- stopAtExit is optional, only valid for traces, with a default value of true. When the option is set execution stops at the last operation in the trace.\n\ntrace is required only for trace based debugging; it is the path to the trace file. Usually this file is called PbTrace.txt , the user must provide a file system path to it. The path can be absolute, or relative to the cwd field. If this option is missing, or if the path is empty the debugger instead starts program .\n\nsymbolSearchPath is required for all configurations. This is the path to the debug symbols generated by the Sandpiper compiler. By default this file is called PipeDreamGeneratedDebugSymbols.csv .\n\nwave is optionally used with traces. It is the path to a VCD file that the debugger creates. The debugger also attempts to start the program wave_reader to show that file. GTKWave is one reader that is freely available.\n\nstopAtEntry is optional, valid in all configurations, with a default value of false. This option requests the debugger to stop execution at the first opportunity. In the trace case, this is at the start of the trace, before anything happens. If the program has a startup function, or any other function marked [[reset]] that is where execution starts.\n\nstopAtExit is optional, only valid for traces, with a default value of true. When the option is set execution stops at the last operation in the trace.\n\n\nDebugging\n\nTo start execution the user selects first the Run and Debug icon on the far left side of the VSCode window. This is the icon with a right-arrow and a “bug” that was shown previously in the Configuration section. A menu appears at the top with a green right arrow selecting any of the available configurations in the launch.json file.\n\nThere are two ways to debug a Sandpiper program: using the interpreter and using a trace file. Only the interpreter can currently generate a trace file. Look at the option PbOption_waveform for details.\n\nThe default compilation setting in the Sandpiper compiler is to optimize. This reduces the effectiveness of the debugger, for instance eliminating local variables, inlining etc etc. For the best debugging experience optimizations should be disabled with --optimize=0 .\n\nThe debugger does not work without a symbol file; the compiler currently only generates debug symbols when setting the --debug command line switch.\n\n\nDebugging using the interpreter\n\nThe user selects the configuration named Sandpiper Interpreter . Clicking on the green arrow starts execution of the interpreter. The fields program and args must be present in the configuration.\n\nThe debugger treats a Sandpiper program/trace like any program that can run on a CPU. Any program starts, executes, and terminates. These steps correspond to the start, core portion, and the end of the interpretation of the Sandpiper program bytecode by the interpreter. Setting breakpoints suspends execution when the selected Sandpiper source code line is active. This means interpreting the Sandpiper program until a basic block is active for the given source line. Once the program is suspended the user can single-step in the same manner as they would on a CPU. This means interpreting forward, from the stopping point. The debugger shows the values of global and local variables at the stop point. Local variables belong to threads , which in the Sandpiper case are effectively active stages in basic blocks. For each thread the debugger shows the current stage and the invoking function, if any.\n\nSandpiper programs can execute under control of a host-side testbench (a C++ testbench) or they can execute under control of a Sandpiper testbench. In the first case, the program field indicates the C++ testbench. This program in turns instantiates the interpreter within itself. In the second case, the user should specify PbRun (Windows: PbRun.exe ) as program , a driver program provided with the Sandpiper nuget. The args field should include the path to the bytecode file for the Sandpiper program.\n\n\nDebugging using a trace file\n\nThe user selects the configuration named Sandpiper Trace . Clicking on the green arrow starts execution of the trace. The field trace must be present in the configuration.\n\nThe steps start, execute, and terminate correspond to the start, core portion, and the end of the trace respectively. Setting breakpoints suspends execution when a given source code line is active in the trace. This means proceeding to the next point in the trace where a basic block is active for the given source line. Execution with a trace can proceed both forward and backward. When stopped, the debugger indicates the point in the trace in terms of cycles . The wave reader can then go to the corresponding point in the VCD trace. Single-stepping means executing the trace forward or backward, from the stopping point. The debugger shows the values of global and local variables at the stop point, threads, and their stack trace.\n\n\nCommon tasks\n\nTo set a breakpoint the user can click on the left side of any Sandpiper source code line. A small red dot appears, provided the debugger can find a corresponding basic block. Otherwise the debugger shows a grey circle to indicate that the breakpoint is invalid\n######################\nOutput:', 'kwargs': {}}
04:25:18,238 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 28132, Requested 3124. Please try again in 2.512s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:18,239 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'is required for all configurations. This is the path to the debug symbols generated by the Sandpiper compiler. By default this file is called PipeDreamGeneratedDebugSymbols.csv .\n- wave is optionally used with traces. It is the path to a VCD file that the debugger creates. The debugger also attempts to start the program wave_reader to show that file. GTKWave is one reader that is freely available.\n- stopAtEntry is optional, valid in all configurations, with a default value of false. This option requests the debugger to stop execution at the first opportunity. In the trace case, this is at the start of the trace, before anything happens. If the program has a startup function, or any other function marked [[reset]] that is where execution starts.\n- stopAtExit is optional, only valid for traces, with a default value of true. When the option is set execution stops at the last operation in the trace.\n\ntrace is required only for trace based debugging; it is the path to the trace file. Usually this file is called PbTrace.txt , the user must provide a file system path to it. The path can be absolute, or relative to the cwd field. If this option is missing, or if the path is empty the debugger instead starts program .\n\nsymbolSearchPath is required for all configurations. This is the path to the debug symbols generated by the Sandpiper compiler. By default this file is called PipeDreamGeneratedDebugSymbols.csv .\n\nwave is optionally used with traces. It is the path to a VCD file that the debugger creates. The debugger also attempts to start the program wave_reader to show that file. GTKWave is one reader that is freely available.\n\nstopAtEntry is optional, valid in all configurations, with a default value of false. This option requests the debugger to stop execution at the first opportunity. In the trace case, this is at the start of the trace, before anything happens. If the program has a startup function, or any other function marked [[reset]] that is where execution starts.\n\nstopAtExit is optional, only valid for traces, with a default value of true. When the option is set execution stops at the last operation in the trace.\n\n\nDebugging\n\nTo start execution the user selects first the Run and Debug icon on the far left side of the VSCode window. This is the icon with a right-arrow and a “bug” that was shown previously in the Configuration section. A menu appears at the top with a green right arrow selecting any of the available configurations in the launch.json file.\n\nThere are two ways to debug a Sandpiper program: using the interpreter and using a trace file. Only the interpreter can currently generate a trace file. Look at the option PbOption_waveform for details.\n\nThe default compilation setting in the Sandpiper compiler is to optimize. This reduces the effectiveness of the debugger, for instance eliminating local variables, inlining etc etc. For the best debugging experience optimizations should be disabled with --optimize=0 .\n\nThe debugger does not work without a symbol file; the compiler currently only generates debug symbols when setting the --debug command line switch.\n\n\nDebugging using the interpreter\n\nThe user selects the configuration named Sandpiper Interpreter . Clicking on the green arrow starts execution of the interpreter. The fields program and args must be present in the configuration.\n\nThe debugger treats a Sandpiper program/trace like any program that can run on a CPU. Any program starts, executes, and terminates. These steps correspond to the start, core portion, and the end of the interpretation of the Sandpiper program bytecode by the interpreter. Setting breakpoints suspends execution when the selected Sandpiper source code line is active. This means interpreting the Sandpiper program until a basic block is active for the given source line. Once the program is suspended the user can single-step in the same manner as they would on a CPU. This means interpreting forward, from the stopping point. The debugger shows the values of global and local variables at the stop point. Local variables belong to threads , which in the Sandpiper case are effectively active stages in basic blocks. For each thread the debugger shows the current stage and the invoking function, if any.\n\nSandpiper programs can execute under control of a host-side testbench (a C++ testbench) or they can execute under control of a Sandpiper testbench. In the first case, the program field indicates the C++ testbench. This program in turns instantiates the interpreter within itself. In the second case, the user should specify PbRun (Windows: PbRun.exe ) as program , a driver program provided with the Sandpiper nuget. The args field should include the path to the bytecode file for the Sandpiper program.\n\n\nDebugging using a trace file\n\nThe user selects the configuration named Sandpiper Trace . Clicking on the green arrow starts execution of the trace. The field trace must be present in the configuration.\n\nThe steps start, execute, and terminate correspond to the start, core portion, and the end of the trace respectively. Setting breakpoints suspends execution when a given source code line is active in the trace. This means proceeding to the next point in the trace where a basic block is active for the given source line. Execution with a trace can proceed both forward and backward. When stopped, the debugger indicates the point in the trace in terms of cycles . The wave reader can then go to the corresponding point in the VCD trace. Single-stepping means executing the trace forward or backward, from the stopping point. The debugger shows the values of global and local variables at the stop point, threads, and their stack trace.\n\n\nCommon tasks\n\nTo set a breakpoint the user can click on the left side of any Sandpiper source code line. A small red dot appears, provided the debugger can find a corresponding basic block. Otherwise the debugger shows a grey circle to indicate that the breakpoint is invalid'}
04:25:18,267 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,268 openai._base_client INFO Retrying request to /chat/completions in 2.512000 seconds
04:25:18,298 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,298 openai._base_client INFO Retrying request to /chat/completions in 2.104000 seconds
04:25:18,300 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,301 openai._base_client INFO Retrying request to /chat/completions in 2.518000 seconds
04:25:18,306 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,306 openai._base_client INFO Retrying request to /chat/completions in 2.518000 seconds
04:25:18,339 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,339 openai._base_client INFO Retrying request to /chat/completions in 2.118000 seconds
04:25:18,649 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,650 openai._base_client INFO Retrying request to /chat/completions in 2.518000 seconds
04:25:18,668 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,668 openai._base_client INFO Retrying request to /chat/completions in 2.506000 seconds
04:25:18,738 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,739 openai._base_client INFO Retrying request to /chat/completions in 2.510000 seconds
04:25:18,932 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:18,933 openai._base_client INFO Retrying request to /chat/completions in 2.510000 seconds
04:25:19,160 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:19,160 openai._base_client INFO Retrying request to /chat/completions in 2.514000 seconds
04:25:19,348 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:19,349 openai._base_client INFO Retrying request to /chat/completions in 2.514000 seconds
04:25:20,377 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,378 openai._base_client INFO Retrying request to /chat/completions in 5.650000 seconds
04:25:20,387 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,387 openai._base_client INFO Retrying request to /chat/completions in 5.646000 seconds
04:25:20,393 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,394 openai._base_client INFO Retrying request to /chat/completions in 5.654000 seconds
04:25:20,424 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,424 openai._base_client INFO Retrying request to /chat/completions in 6.742000 seconds
04:25:20,467 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,467 openai._base_client INFO Retrying request to /chat/completions in 5.640000 seconds
04:25:20,487 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,487 openai._base_client INFO Retrying request to /chat/completions in 5.630000 seconds
04:25:20,560 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,560 openai._base_client INFO Retrying request to /chat/completions in 5.652000 seconds
04:25:20,564 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,564 openai._base_client INFO Retrying request to /chat/completions in 5.646000 seconds
04:25:20,593 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,593 openai._base_client INFO Retrying request to /chat/completions in 5.642000 seconds
04:25:20,596 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,597 openai._base_client INFO Retrying request to /chat/completions in 5.654000 seconds
04:25:20,660 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,660 openai._base_client INFO Retrying request to /chat/completions in 5.484000 seconds
04:25:20,667 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,668 openai._base_client INFO Retrying request to /chat/completions in 5.624000 seconds
04:25:20,750 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,751 openai._base_client INFO Retrying request to /chat/completions in 5.648000 seconds
04:25:20,889 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,889 openai._base_client INFO Retrying request to /chat/completions in 5.640000 seconds
04:25:20,911 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,913 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: corresponding point in the VCD trace. Single-stepping means executing the trace forward or backward, from the stopping point. The debugger shows the values of global and local variables at the stop point, threads, and their stack trace.\n\n\nCommon tasks\n\nTo set a breakpoint the user can click on the left side of any Sandpiper source code line. A small red dot appears, provided the debugger can find a corresponding basic block. Otherwise the debugger shows a grey circle to indicate that the breakpoint is invalid. A solid grey dot indicates a breakpoint that is valid but currently disabled (by the user).\n\nThe BREAKPOINTS pane shows all the breakpoints. Here the user can enable/disable them and by clicking on a breakpoint the user sees the corresponding source code in an editor pane. It is also possible to create function breakpoints , by clicking on the + sign in the BREAKPOINTS pane’s title and entering the function’s name. This is shown as the first breakpoint in the following picture, distinguished by a red/grey triangle bullet. The second breakpoint in the following picture is a data breakpoint and indicates the global variable of interest. It is indicated with a red/grey hexagon bullet. The third breakpoint in the picture is a logpoint and indicated with a diamond red/grey bullet. The forth is a source breakpoint, indicated with a red round bullet (enabled). The fifth is also a source breakpoint, indicated with a grey round bullet (disabled).\n\nDuring execution the Run menu indicates various options for controlling execution, such as Step Over, Into, Out and Continue . These actions are also easily accessible by keyboard shortcuts, or by using an additional small menu at the top. From left to right, the menu has arrows for continue, step over, step into, step out, restart execution from the beginning, and an orange square for terminating execution. The menu is shown in the following picture for an interpreter execution. The case of a trace execution is illustrated in the section Time Travel Debugging .\n\nWhile the program/trace is executing the continue arrow is replaced by a pause button, with two vertical bars. Hitting the pause button suspends execution and shows the state of all threads at that point.\n\nThe CALL STACK pane is active when execution is suspended. It shows all active threads at that point in the trace and their stacks. Stacks are compressed down to a single line if there are too many threads for the pane’s size. The pane is scrollable.\n\nSelecting a specific thread activates the VARIABLES pane, wherein the local variables are shown in the Locals list. The Globals list shows the global variables that the selected thread might access. The Memories list shows the memories (local or global) that the selected thread might access. All values are in decimal. To see the type of a variable the user can hover over its name, meaning keep the pointer (mouse) over any part of the name.\n\nIn the WATCH pane the user can select global variables that they always want to see. Hovering in the source editor over a global variable declaration also shows its value.\n\nThe DEBUG CONSOLE pane shows the output from print statements in the Sandpiper program. Other information and error messages from the debugger also appears in this pane.\n\n\nLogpoints\n\nA Logpoint is a breakpoint variant that does not “break” into the debugger but instead logs a message to the console. It is useful for printf-style debugging, when the user is interested in observing the overall flow with print statements. Unlike print statements in the Sandpiper source code, logpoints do not require recompilation. The user can add/remove/disable/enable them from within the debugger, during the debugging session, and then they persist across sessions.\n\nTo create a logpoint the user performs the following steps:\n\n1. Right-click on the intended source line, similarly to a source breakpoint. This brings up the following menu.\n\n1. Select Add Logpoint... which brings up the following dialog. Enter the desired message and hit return.\n\n\nTime Travel Debugging\n\nTime Travel Debugging (TTD) means executing a program “backwards”, and being able to single-step both forward and backward while debugging. TTD is typically implemented using traces that either provide all the required information, or guide an execution engine to reproduce exactly the original execution of the program. Sandpiper uses the former approach, and this option is ony available when using traces.\n\nOne thing to bear in mind is that in Sandpiper TTD does not and cannot modify state. No matter how execution reaches a given cycle in the trace the variables and memories always have the same values.\n\nThe Sandcastle VSIX extension includes a TTD-capable debugger as of version 0.0.9 .\n\nIn the Sandpiper debugger there are two commands that provide the TTD functionality: Reversed Continue, and Step Back. These commands can be freely intermixed with any other forward-executing command.\n\nThe following picture shows all the execution control buttons.\n\n\nReversed Continue\n\nThe Reversed Continue icon is a blue left-pointing arrowhead. It continues execution in reverse until a breakpoint is hit.\n\nIf no breakpoints are hit reverse execution continues until the beginning of the trace (cycle 1).\n\n\nStep Back\n\nThe Step Back icon is a blue left-pointing arced arrow. It continues execution in reverse until the previous source line.\n\nWhen stepping back at the beginning of a function reverse execution stops at the invoking call site.\n\nWhen stepping back a loop, reverse execution starts at the last iteration and back to the first.\n\n\nData Breakpoints\n\nA data breakpoint suspends execution when the selected variable is modified. To set a data breakpoint the user stops at a point where the intended variable is in scope. Right-clicking on the variable name brings up the following menu with the option “Break on Value Change”. The data breakpoint is then visible in the BREAKPOINTS pane (see above), where it can be enabled/disabled/deleted. Data breakpoints trigger during either a forward or a backward execution\n######################\nOutput:', 'kwargs': {}}
04:25:20,913 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29668, Requested 3157. Please try again in 5.65s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:20,914 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'corresponding point in the VCD trace. Single-stepping means executing the trace forward or backward, from the stopping point. The debugger shows the values of global and local variables at the stop point, threads, and their stack trace.\n\n\nCommon tasks\n\nTo set a breakpoint the user can click on the left side of any Sandpiper source code line. A small red dot appears, provided the debugger can find a corresponding basic block. Otherwise the debugger shows a grey circle to indicate that the breakpoint is invalid. A solid grey dot indicates a breakpoint that is valid but currently disabled (by the user).\n\nThe BREAKPOINTS pane shows all the breakpoints. Here the user can enable/disable them and by clicking on a breakpoint the user sees the corresponding source code in an editor pane. It is also possible to create function breakpoints , by clicking on the + sign in the BREAKPOINTS pane’s title and entering the function’s name. This is shown as the first breakpoint in the following picture, distinguished by a red/grey triangle bullet. The second breakpoint in the following picture is a data breakpoint and indicates the global variable of interest. It is indicated with a red/grey hexagon bullet. The third breakpoint in the picture is a logpoint and indicated with a diamond red/grey bullet. The forth is a source breakpoint, indicated with a red round bullet (enabled). The fifth is also a source breakpoint, indicated with a grey round bullet (disabled).\n\nDuring execution the Run menu indicates various options for controlling execution, such as Step Over, Into, Out and Continue . These actions are also easily accessible by keyboard shortcuts, or by using an additional small menu at the top. From left to right, the menu has arrows for continue, step over, step into, step out, restart execution from the beginning, and an orange square for terminating execution. The menu is shown in the following picture for an interpreter execution. The case of a trace execution is illustrated in the section Time Travel Debugging .\n\nWhile the program/trace is executing the continue arrow is replaced by a pause button, with two vertical bars. Hitting the pause button suspends execution and shows the state of all threads at that point.\n\nThe CALL STACK pane is active when execution is suspended. It shows all active threads at that point in the trace and their stacks. Stacks are compressed down to a single line if there are too many threads for the pane’s size. The pane is scrollable.\n\nSelecting a specific thread activates the VARIABLES pane, wherein the local variables are shown in the Locals list. The Globals list shows the global variables that the selected thread might access. The Memories list shows the memories (local or global) that the selected thread might access. All values are in decimal. To see the type of a variable the user can hover over its name, meaning keep the pointer (mouse) over any part of the name.\n\nIn the WATCH pane the user can select global variables that they always want to see. Hovering in the source editor over a global variable declaration also shows its value.\n\nThe DEBUG CONSOLE pane shows the output from print statements in the Sandpiper program. Other information and error messages from the debugger also appears in this pane.\n\n\nLogpoints\n\nA Logpoint is a breakpoint variant that does not “break” into the debugger but instead logs a message to the console. It is useful for printf-style debugging, when the user is interested in observing the overall flow with print statements. Unlike print statements in the Sandpiper source code, logpoints do not require recompilation. The user can add/remove/disable/enable them from within the debugger, during the debugging session, and then they persist across sessions.\n\nTo create a logpoint the user performs the following steps:\n\n1. Right-click on the intended source line, similarly to a source breakpoint. This brings up the following menu.\n\n1. Select Add Logpoint... which brings up the following dialog. Enter the desired message and hit return.\n\n\nTime Travel Debugging\n\nTime Travel Debugging (TTD) means executing a program “backwards”, and being able to single-step both forward and backward while debugging. TTD is typically implemented using traces that either provide all the required information, or guide an execution engine to reproduce exactly the original execution of the program. Sandpiper uses the former approach, and this option is ony available when using traces.\n\nOne thing to bear in mind is that in Sandpiper TTD does not and cannot modify state. No matter how execution reaches a given cycle in the trace the variables and memories always have the same values.\n\nThe Sandcastle VSIX extension includes a TTD-capable debugger as of version 0.0.9 .\n\nIn the Sandpiper debugger there are two commands that provide the TTD functionality: Reversed Continue, and Step Back. These commands can be freely intermixed with any other forward-executing command.\n\nThe following picture shows all the execution control buttons.\n\n\nReversed Continue\n\nThe Reversed Continue icon is a blue left-pointing arrowhead. It continues execution in reverse until a breakpoint is hit.\n\nIf no breakpoints are hit reverse execution continues until the beginning of the trace (cycle 1).\n\n\nStep Back\n\nThe Step Back icon is a blue left-pointing arced arrow. It continues execution in reverse until the previous source line.\n\nWhen stepping back at the beginning of a function reverse execution stops at the invoking call site.\n\nWhen stepping back a loop, reverse execution starts at the last iteration and back to the first.\n\n\nData Breakpoints\n\nA data breakpoint suspends execution when the selected variable is modified. To set a data breakpoint the user stops at a point where the intended variable is in scope. Right-clicking on the variable name brings up the following menu with the option “Break on Value Change”. The data breakpoint is then visible in the BREAKPOINTS pane (see above), where it can be enabled/disabled/deleted. Data breakpoints trigger during either a forward or a backward execution'}
04:25:20,927 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:20,927 openai._base_client INFO Retrying request to /chat/completions in 5.642000 seconds
04:25:21,11 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:21,12 openai._base_client INFO Retrying request to /chat/completions in 5.060000 seconds
04:25:21,259 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:21,260 openai._base_client INFO Retrying request to /chat/completions in 5.650000 seconds
04:25:21,265 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:21,266 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: Programming Guide\n\n- The Basics Comments Types Integers Integer Literals Operators Integer Type System Implicit integer conversions Booleans Operators Floating-point Operators Enumerations Structures Unions Arrays Out-Of-Bounds Array Access Memories Semantic Differences Between Memories and Arrays Out-Of-Bounds Memory Access Memory Initialization Read-only Memories Error Correcting Codes memory_ecc memory_ecc_strict memory_ecc_relaxed ECC restrictions ecc attribute Multi-Dimensional Arrays Index/Count type aliases index_t count_t Function types Type aliases Subtyping Classes Callbacks Callback function compatibility Templates Dependent names The typename disambiguator The template disambiguator Abbreviated function templates Template parameter defaults Template template parameters Type casting Type inference Expressions evaluated at compile-time Miscellaneous operators Sizeof operators Ternary operator Variables Initializer lists Designated initializers Object initialization Constant values Static local variable instances Control flow if/else switch Loops do/while Range for Static for Functions Function declaration Global functions Local functions Methods Function call Function inlining Generic functions Function templates Return type polymorphism Lambdas Closures Class member access within lambda Generic lambdas Closures in the global scope Higher order functions Functions as function parameters Calling higher order functions Functions as function results Function currying Partial application Constructing functions Looping functions Reset functions\n- Meta-programming Conditional code Static recursion Type comparison\n- Modules Using modules Device specific modules Defining modules Re-exposing symbols Module difference The base module Special modules The .cmdargs module The .options module\n- Scope Shadowing\n- Concurrency and parallelism Threads Concurrency library functions pipelined_for pipelined_do pipelined_map pipelined_last async_exec Spatial computing Predicting throughput Increasing parallelism Thread ordering Scheduling constraints Nesting scheduling constraints Global accesses in schedule blocks atomic do Data races Read replication and memory_norep Incoherent memory read-write Function arbitration [[last]] attribute Memory consistency model\n- Intrinsic functions Arithmetic clog2 Type information Struct field offset Debugging debug_view print and println sim_assert static assertions inspectable debug module hw_assert trace_buffer Bit manipulation concat mux Time cycles Scheduling barrier fan_out stages function template\n\n- Comments\n- Types Integers Integer Literals Operators Integer Type System Implicit integer conversions Booleans Operators Floating-point Operators Enumerations Structures Unions Arrays Out-Of-Bounds Array Access Memories Semantic Differences Between Memories and Arrays Out-Of-Bounds Memory Access Memory Initialization Read-only Memories Error Correcting Codes memory_ecc memory_ecc_strict memory_ecc_relaxed ECC restrictions ecc attribute Multi-Dimensional Arrays Index/Count type aliases index_t count_t Function types Type aliases Subtyping Classes Callbacks Callback function compatibility Templates Dependent names The typename disambiguator The template disambiguator Abbreviated function templates Template parameter defaults Template template parameters Type casting Type inference Expressions evaluated at compile-time Miscellaneous operators Sizeof operators Ternary operator\n- Variables Initializer lists Designated initializers Object initialization Constant values Static local variable instances\n- Control flow if/else switch Loops do/while Range for Static for\n- Functions Function declaration Global functions Local functions Methods Function call Function inlining Generic functions Function templates Return type polymorphism Lambdas Closures Class member access within lambda Generic lambdas Closures in the global scope Higher order functions Functions as function parameters Calling higher order functions Functions as function results Function currying Partial application Constructing functions Looping functions Reset functions\n\n- Integers Integer Literals Operators Integer Type System Implicit integer conversions\n- Booleans Operators\n- Floating-point Operators\n- Enumerations\n- Structures\n- Unions\n- Arrays Out-Of-Bounds Array Access\n- Memories Semantic Differences Between Memories and Arrays Out-Of-Bounds Memory Access Memory Initialization Read-only Memories Error Correcting Codes memory_ecc memory_ecc_strict memory_ecc_relaxed ECC restrictions ecc attribute Multi-Dimensional Arrays\n- Index/Count type aliases index_t count_t\n- Function types\n- Type aliases\n- Subtyping\n- Classes Callbacks Callback function compatibility\n- Templates\n- Dependent names The typename disambiguator The template disambiguator Abbreviated function templates Template parameter defaults Template template parameters\n- Type casting\n- Type inference Expressions evaluated at compile-time\n- Miscellaneous operators Sizeof operators Ternary operator\n\n- Integer Literals\n- Operators\n- Integer Type System\n- Implicit integer conversions\n\n- Operators\n\n- Operators\n\n- Out-Of-Bounds Array Access\n\n- Semantic Differences Between Memories and Arrays\n- Out-Of-Bounds Memory Access\n- Memory Initialization\n- Read-only Memories\n- Error Correcting Codes memory_ecc memory_ecc_strict memory_ecc_relaxed ECC restrictions ecc attribute\n- Multi-Dimensional Arrays\n\n- memory_ecc\n- memory_ecc_strict\n- memory_ecc_relaxed\n- ECC restrictions\n- ecc attribute\n\n- index_t\n- count_t\n\n- Callbacks\n- Callback function compatibility\n\n- The typename disambiguator\n- The template disambiguator\n- Abbreviated function templates\n- Template parameter defaults\n- Template template parameters\n\n- Expressions evaluated at compile-time\n- \n\n- Sizeof operators\n- Ternary operator\n\n- Initializer lists\n- Designated initializers Object initialization\n- Constant values\n- Static local variable instances\n\n- Object initialization\n\n- if/else\n- switch\n- Loops do/while Range for Static for\n\n- do/while\n- Range for\n- Static for\n\n- Function declaration Global functions Local functions Methods\n- Function call Function inlining\n- Generic functions Function templates Return type polymorphism\n- Lambdas Closures Class member access within lambda Generic lambdas\n- Closures in the global scope\n- Higher order functions Functions as function parameters Calling higher order functions Functions as function results\n- Function currying Partial application Constructing functions\n- Looping functions\n- Reset functions\n\n- Global functions\n- Local functions\n- Methods\n\n- Function inlining\n\n-\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:25:21,266 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29490, Requested 3335. Please try again in 5.65s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:21,267 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'Programming Guide\n\n- The Basics Comments Types Integers Integer Literals Operators Integer Type System Implicit integer conversions Booleans Operators Floating-point Operators Enumerations Structures Unions Arrays Out-Of-Bounds Array Access Memories Semantic Differences Between Memories and Arrays Out-Of-Bounds Memory Access Memory Initialization Read-only Memories Error Correcting Codes memory_ecc memory_ecc_strict memory_ecc_relaxed ECC restrictions ecc attribute Multi-Dimensional Arrays Index/Count type aliases index_t count_t Function types Type aliases Subtyping Classes Callbacks Callback function compatibility Templates Dependent names The typename disambiguator The template disambiguator Abbreviated function templates Template parameter defaults Template template parameters Type casting Type inference Expressions evaluated at compile-time Miscellaneous operators Sizeof operators Ternary operator Variables Initializer lists Designated initializers Object initialization Constant values Static local variable instances Control flow if/else switch Loops do/while Range for Static for Functions Function declaration Global functions Local functions Methods Function call Function inlining Generic functions Function templates Return type polymorphism Lambdas Closures Class member access within lambda Generic lambdas Closures in the global scope Higher order functions Functions as function parameters Calling higher order functions Functions as function results Function currying Partial application Constructing functions Looping functions Reset functions\n- Meta-programming Conditional code Static recursion Type comparison\n- Modules Using modules Device specific modules Defining modules Re-exposing symbols Module difference The base module Special modules The .cmdargs module The .options module\n- Scope Shadowing\n- Concurrency and parallelism Threads Concurrency library functions pipelined_for pipelined_do pipelined_map pipelined_last async_exec Spatial computing Predicting throughput Increasing parallelism Thread ordering Scheduling constraints Nesting scheduling constraints Global accesses in schedule blocks atomic do Data races Read replication and memory_norep Incoherent memory read-write Function arbitration [[last]] attribute Memory consistency model\n- Intrinsic functions Arithmetic clog2 Type information Struct field offset Debugging debug_view print and println sim_assert static assertions inspectable debug module hw_assert trace_buffer Bit manipulation concat mux Time cycles Scheduling barrier fan_out stages function template\n\n- Comments\n- Types Integers Integer Literals Operators Integer Type System Implicit integer conversions Booleans Operators Floating-point Operators Enumerations Structures Unions Arrays Out-Of-Bounds Array Access Memories Semantic Differences Between Memories and Arrays Out-Of-Bounds Memory Access Memory Initialization Read-only Memories Error Correcting Codes memory_ecc memory_ecc_strict memory_ecc_relaxed ECC restrictions ecc attribute Multi-Dimensional Arrays Index/Count type aliases index_t count_t Function types Type aliases Subtyping Classes Callbacks Callback function compatibility Templates Dependent names The typename disambiguator The template disambiguator Abbreviated function templates Template parameter defaults Template template parameters Type casting Type inference Expressions evaluated at compile-time Miscellaneous operators Sizeof operators Ternary operator\n- Variables Initializer lists Designated initializers Object initialization Constant values Static local variable instances\n- Control flow if/else switch Loops do/while Range for Static for\n- Functions Function declaration Global functions Local functions Methods Function call Function inlining Generic functions Function templates Return type polymorphism Lambdas Closures Class member access within lambda Generic lambdas Closures in the global scope Higher order functions Functions as function parameters Calling higher order functions Functions as function results Function currying Partial application Constructing functions Looping functions Reset functions\n\n- Integers Integer Literals Operators Integer Type System Implicit integer conversions\n- Booleans Operators\n- Floating-point Operators\n- Enumerations\n- Structures\n- Unions\n- Arrays Out-Of-Bounds Array Access\n- Memories Semantic Differences Between Memories and Arrays Out-Of-Bounds Memory Access Memory Initialization Read-only Memories Error Correcting Codes memory_ecc memory_ecc_strict memory_ecc_relaxed ECC restrictions ecc attribute Multi-Dimensional Arrays\n- Index/Count type aliases index_t count_t\n- Function types\n- Type aliases\n- Subtyping\n- Classes Callbacks Callback function compatibility\n- Templates\n- Dependent names The typename disambiguator The template disambiguator Abbreviated function templates Template parameter defaults Template template parameters\n- Type casting\n- Type inference Expressions evaluated at compile-time\n- Miscellaneous operators Sizeof operators Ternary operator\n\n- Integer Literals\n- Operators\n- Integer Type System\n- Implicit integer conversions\n\n- Operators\n\n- Operators\n\n- Out-Of-Bounds Array Access\n\n- Semantic Differences Between Memories and Arrays\n- Out-Of-Bounds Memory Access\n- Memory Initialization\n- Read-only Memories\n- Error Correcting Codes memory_ecc memory_ecc_strict memory_ecc_relaxed ECC restrictions ecc attribute\n- Multi-Dimensional Arrays\n\n- memory_ecc\n- memory_ecc_strict\n- memory_ecc_relaxed\n- ECC restrictions\n- ecc attribute\n\n- index_t\n- count_t\n\n- Callbacks\n- Callback function compatibility\n\n- The typename disambiguator\n- The template disambiguator\n- Abbreviated function templates\n- Template parameter defaults\n- Template template parameters\n\n- Expressions evaluated at compile-time\n- \n\n- Sizeof operators\n- Ternary operator\n\n- Initializer lists\n- Designated initializers Object initialization\n- Constant values\n- Static local variable instances\n\n- Object initialization\n\n- if/else\n- switch\n- Loops do/while Range for Static for\n\n- do/while\n- Range for\n- Static for\n\n- Function declaration Global functions Local functions Methods\n- Function call Function inlining\n- Generic functions Function templates Return type polymorphism\n- Lambdas Closures Class member access within lambda Generic lambdas\n- Closures in the global scope\n- Higher order functions Functions as function parameters Calling higher order functions Functions as function results\n- Function currying Partial application Constructing functions\n- Looping functions\n- Reset functions\n\n- Global functions\n- Local functions\n- Methods\n\n- Function inlining\n\n-'}
04:25:21,311 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:21,311 openai._base_client INFO Retrying request to /chat/completions in 5.502000 seconds
04:25:21,336 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:21,337 openai._base_client INFO Retrying request to /chat/completions in 5.650000 seconds
04:25:21,385 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:21,386 openai._base_client INFO Retrying request to /chat/completions in 4.732000 seconds
04:25:21,535 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:21,535 openai._base_client INFO Retrying request to /chat/completions in 5.654000 seconds
04:25:21,765 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:21,765 openai._base_client INFO Retrying request to /chat/completions in 5.654000 seconds
04:25:21,954 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:21,955 openai._base_client INFO Retrying request to /chat/completions in 5.654000 seconds
04:25:22,590 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:22,697 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:22,698 openai._base_client INFO Retrying request to /chat/completions in 4.768000 seconds
04:25:26,128 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,128 openai._base_client INFO Retrying request to /chat/completions in 0.734000 seconds
04:25:26,137 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,138 openai._base_client INFO Retrying request to /chat/completions in 0.732000 seconds
04:25:26,143 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,144 openai._base_client INFO Retrying request to /chat/completions in 0.710000 seconds
04:25:26,191 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,192 openai._base_client INFO Retrying request to /chat/completions in 0.700000 seconds
04:25:26,206 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,206 openai._base_client INFO Retrying request to /chat/completions in 0.722000 seconds
04:25:26,230 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,230 openai._base_client INFO Retrying request to /chat/completions in 0.708000 seconds
04:25:26,233 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,233 openai._base_client INFO Retrying request to /chat/completions in 0.706000 seconds
04:25:26,234 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,235 openai._base_client INFO Retrying request to /chat/completions in 0.734000 seconds
04:25:26,263 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:26,299 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,300 openai._base_client INFO Retrying request to /chat/completions in 1.302000 seconds
04:25:26,304 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,304 openai._base_client INFO Retrying request to /chat/completions in 1.288000 seconds
04:25:26,323 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,323 openai._base_client INFO Retrying request to /chat/completions in 1.294000 seconds
04:25:26,346 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,346 openai._base_client INFO Retrying request to /chat/completions in 1.290000 seconds
04:25:26,359 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,359 openai._base_client INFO Retrying request to /chat/completions in 1.534000 seconds
04:25:26,388 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,388 openai._base_client INFO Retrying request to /chat/completions in 1.296000 seconds
04:25:26,595 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,595 openai._base_client INFO Retrying request to /chat/completions in 1.188000 seconds
04:25:26,634 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,635 openai._base_client INFO Retrying request to /chat/completions in 1.288000 seconds
04:25:26,664 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,665 openai._base_client INFO Retrying request to /chat/completions in 1.290000 seconds
04:25:26,914 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,914 openai._base_client INFO Retrying request to /chat/completions in 1.282000 seconds
04:25:26,944 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,945 openai._base_client INFO Retrying request to /chat/completions in 0.469000 seconds
04:25:26,947 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,948 openai._base_client INFO Retrying request to /chat/completions in 0.466000 seconds
04:25:26,967 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,967 openai._base_client INFO Retrying request to /chat/completions in 0.471000 seconds
04:25:26,979 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:26,980 openai._base_client INFO Retrying request to /chat/completions in 0.476000 seconds
04:25:27,3 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,4 openai._base_client INFO Retrying request to /chat/completions in 1.292000 seconds
04:25:27,23 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,24 openai._base_client INFO Retrying request to /chat/completions in 0.466000 seconds
04:25:27,28 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,28 openai._base_client INFO Retrying request to /chat/completions in 0.476000 seconds
04:25:27,34 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,35 openai._base_client INFO Retrying request to /chat/completions in 0.469000 seconds
04:25:27,68 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,69 openai._base_client INFO Retrying request to /chat/completions in 0.466000 seconds
04:25:27,94 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,96 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: Sandcastle\n\nGenerate documentation from annotated Sandpiper source code.\n\n\nTable of Contents\n\n- Goals\n- Invocation\n- Documentation and markup Documenting top-level declaration Documenting parts of a declaration Class methods, variables, and callbacks struct, enum, and union fields Template parameters and function arguments Documentation structure Module description Hyperlinking Markup Svgbob Anchors Collapsible Examples\n- References\n\n- Documenting top-level declaration\n- Documenting parts of a declaration Class methods, variables, and callbacks struct, enum, and union fields Template parameters and function arguments\n- Documentation structure Module description Hyperlinking\n- Markup Svgbob Anchors Collapsible Examples\n\n- Class methods, variables, and callbacks\n- struct, enum, and union fields\n- Template parameters and function arguments\n\n- Module description\n- Hyperlinking\n\n- Svgbob\n- Anchors\n- Collapsible Examples\n\n\nGoals ¶\n\nSandcastle is designed to fulfill several goals:\n\n- Generate documentation from Sandpiper modules, extracting API documentation from exposed type aliases, functions, classes, etc. The generated documentation will encapsulate only the interface that is available to the module user.\n- Keep the documentation as close as possible to the implementation of the API. Sandcastle allows the programmer to write documentation for any entity adjacent to the definition of the entity in the source code.\n- Documentation annotations are non-intrusive and do not obfuscate the source code. Annotations should be lightweight and easy to read and write while also supporting basic markdown features.\n- Recognize the language scopes and module system. Generated documentation should display information important to users.\n- Navigation via hyperlinks. Documentation generated by Sandcastle makes abundant use of hyperlinks and anchors. Identifiers are linked and declarations are anchored including their respective components. Furthermore, user-written annotations may contain hyperlinks.\n- Produce documentation in multiple formats. Sandcastle supports a markdown and html backend. Adding new backends is straightforward and flexible.\n\n\nInvocation ¶\n\nSandcastle is invoked from the command line:\n\nsandcastle [OPTIONS] [FILE]\n\nWhere each FILE is a filename containing a Sandpiper source module. Files can be absolute paths or relative paths to the current directory. Use the option -? or --help to see a list of all command line options.\n\nThe modules specified on the command line are processed together. When one module refers to an type declared in another module being processed, the documentation will link to that declaration. The modules should not be mutually recursive. Currently, links to entities that cannot be found will be dead links.\n\nSandcastle currently only supports generating Markdown and HTML documentation.\n\n\nDocumentation and markup ¶\n\nSandcastle recognizes special documentation annotations in the Sandpiper source file and transforms these into generated documentation. If there are no annotations, Sandcastle generates documentation that incorporates exposed type alias, enum, struct, function, and class declarations.\n\nThe annotation is a language comment and is parsed by the PipeDream compiler using the --parse-docs command-line switch.\n\n\nDocumenting top-level declaration ¶\n\nThe simplest documentation annotation is for a top-level declaration. Suppose the source file contains the following function:\n\ntemplate <typename T>\ninline T xor(T a, T b)\n{\n    return a ^ b;\n}\n\nThen we can document it like this:\n\n//| Return xor of inputs.\ntemplate <typename T>\ninline T xor(T a, T b)\n{\n    return a ^ b;\n}\n\nThe annotation begins with the //| syntax and applies to the following declaration in the source file. Additionally, Sandcastle supports writing documentation after the declaration by using //< .\n\ntemplate\n  < typename T //< Type of number to square\n  , typename R //< Return type of squared number\n  >\ninline R square\n    ( T x //< Input number\n    )\n{\n    return x * x;\n}\n//< Square a number\n\nAnnotations can span several lines and continue until the first non-comment line in the source file.\n\n//| Adds two values of the input type.\n// Returns the result as the output type, which might be larger.\n// e.g. 3 fits in a uint2, but 3 + 3 does not.\ntemplate <typename R, typename T>\ninline R add(T a, T b)\n{\n    return a + b;\n}\n\nThe line comment style // requires a single space of margin after the comment prefix, | or / , and after each subsequent line.\n\nAnnotations can also utilize Sandpiper’s multi-line comment style. This style does not require a single space margin.\n\n/*|\nAdds two values of the input type.\nReturns the result as the output type, which might be larger.\ne.g. 3 fits in a uint2, but 3 + 3 does not.\n*/\ntemplate <typename R, typename T>\ninline R add(T a, T b)\n{\n    return a + b;\n}\n\n\nDocumenting parts of a declaration ¶\n\nIn addition to annotating a top-level declaration, Sandcastle supports documenting parts of a declaration.\n\n\nClass methods, variables, and callbacks ¶\n\nClass methods and variables are annotated using //| in the same way as top-level declarations. Public members are always displayed. Private callbacks will always be displayed. All other private members will be displayed only if they are annotated with a Sandcastle comment.\n\ntemplate <auto Maximum, auto Initial>\nclass counter\n{\npublic:\n    //| Convenient type alias.\n    using ctr_t = count_t<Maximum>;\n\nprivate:\n    //| This is displayed in generated documentation.\n    ctr_t _first = Initial;\n\n    ctr_t _second = 0; // This will not be displayed.\n\n    (uint32 x) -> uint2 callback; // This will be displayed\n                                  // even if it is not annotated.\n\npublic:\n    //| Returns the current count.\n    inline ctr_t count()\n    {\n        ctr_t result;\n        atomic\n        {\n            result = _first - _second;\n        }\n        return result;\n    }\n}\n\n\nstruct, enum\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>SANDCASTLE<|>ORGANIZATION<|>Sandcastle is a tool designed to generate documentation from Sandpiper source code, supporting markdown and html formats, and utilizes annotations for documentation generation)\n##\n("entity"<|>SANDPIPER<|>ORGANIZATION<|>Sandpiper is a programming language or module system for which Sandcastle generates documentation)\n##\n("entity"<|>PIPEDREAM COMPILER<|>ORGANIZATION<|>The compiler used to parse documentation annotations in Sandpiper source code with the --parse-docs command-line option)\n##\n("relationship"<|>SANDCASTLE<|>SANDPIPER<|>Sandcastle generates documentation specifically for Sandpiper modules<|>9)\n##\n("relationship"<|>SANDCASTLE<|>PIPEDREAM COMPILER<|>Sandcastle utilizes the PipeDream compiler to parse documentation annotations in Sandpiper source code<|>8)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:25:27,96 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 27271, Requested 3371. Please try again in 1.284s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:27,97 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'Sandcastle\n\nGenerate documentation from annotated Sandpiper source code.\n\n\nTable of Contents\n\n- Goals\n- Invocation\n- Documentation and markup Documenting top-level declaration Documenting parts of a declaration Class methods, variables, and callbacks struct, enum, and union fields Template parameters and function arguments Documentation structure Module description Hyperlinking Markup Svgbob Anchors Collapsible Examples\n- References\n\n- Documenting top-level declaration\n- Documenting parts of a declaration Class methods, variables, and callbacks struct, enum, and union fields Template parameters and function arguments\n- Documentation structure Module description Hyperlinking\n- Markup Svgbob Anchors Collapsible Examples\n\n- Class methods, variables, and callbacks\n- struct, enum, and union fields\n- Template parameters and function arguments\n\n- Module description\n- Hyperlinking\n\n- Svgbob\n- Anchors\n- Collapsible Examples\n\n\nGoals ¶\n\nSandcastle is designed to fulfill several goals:\n\n- Generate documentation from Sandpiper modules, extracting API documentation from exposed type aliases, functions, classes, etc. The generated documentation will encapsulate only the interface that is available to the module user.\n- Keep the documentation as close as possible to the implementation of the API. Sandcastle allows the programmer to write documentation for any entity adjacent to the definition of the entity in the source code.\n- Documentation annotations are non-intrusive and do not obfuscate the source code. Annotations should be lightweight and easy to read and write while also supporting basic markdown features.\n- Recognize the language scopes and module system. Generated documentation should display information important to users.\n- Navigation via hyperlinks. Documentation generated by Sandcastle makes abundant use of hyperlinks and anchors. Identifiers are linked and declarations are anchored including their respective components. Furthermore, user-written annotations may contain hyperlinks.\n- Produce documentation in multiple formats. Sandcastle supports a markdown and html backend. Adding new backends is straightforward and flexible.\n\n\nInvocation ¶\n\nSandcastle is invoked from the command line:\n\nsandcastle [OPTIONS] [FILE]\n\nWhere each FILE is a filename containing a Sandpiper source module. Files can be absolute paths or relative paths to the current directory. Use the option -? or --help to see a list of all command line options.\n\nThe modules specified on the command line are processed together. When one module refers to an type declared in another module being processed, the documentation will link to that declaration. The modules should not be mutually recursive. Currently, links to entities that cannot be found will be dead links.\n\nSandcastle currently only supports generating Markdown and HTML documentation.\n\n\nDocumentation and markup ¶\n\nSandcastle recognizes special documentation annotations in the Sandpiper source file and transforms these into generated documentation. If there are no annotations, Sandcastle generates documentation that incorporates exposed type alias, enum, struct, function, and class declarations.\n\nThe annotation is a language comment and is parsed by the PipeDream compiler using the --parse-docs command-line switch.\n\n\nDocumenting top-level declaration ¶\n\nThe simplest documentation annotation is for a top-level declaration. Suppose the source file contains the following function:\n\ntemplate <typename T>\ninline T xor(T a, T b)\n{\n    return a ^ b;\n}\n\nThen we can document it like this:\n\n//| Return xor of inputs.\ntemplate <typename T>\ninline T xor(T a, T b)\n{\n    return a ^ b;\n}\n\nThe annotation begins with the //| syntax and applies to the following declaration in the source file. Additionally, Sandcastle supports writing documentation after the declaration by using //< .\n\ntemplate\n  < typename T //< Type of number to square\n  , typename R //< Return type of squared number\n  >\ninline R square\n    ( T x //< Input number\n    )\n{\n    return x * x;\n}\n//< Square a number\n\nAnnotations can span several lines and continue until the first non-comment line in the source file.\n\n//| Adds two values of the input type.\n// Returns the result as the output type, which might be larger.\n// e.g. 3 fits in a uint2, but 3 + 3 does not.\ntemplate <typename R, typename T>\ninline R add(T a, T b)\n{\n    return a + b;\n}\n\nThe line comment style // requires a single space of margin after the comment prefix, | or / , and after each subsequent line.\n\nAnnotations can also utilize Sandpiper’s multi-line comment style. This style does not require a single space margin.\n\n/*|\nAdds two values of the input type.\nReturns the result as the output type, which might be larger.\ne.g. 3 fits in a uint2, but 3 + 3 does not.\n*/\ntemplate <typename R, typename T>\ninline R add(T a, T b)\n{\n    return a + b;\n}\n\n\nDocumenting parts of a declaration ¶\n\nIn addition to annotating a top-level declaration, Sandcastle supports documenting parts of a declaration.\n\n\nClass methods, variables, and callbacks ¶\n\nClass methods and variables are annotated using //| in the same way as top-level declarations. Public members are always displayed. Private callbacks will always be displayed. All other private members will be displayed only if they are annotated with a Sandcastle comment.\n\ntemplate <auto Maximum, auto Initial>\nclass counter\n{\npublic:\n    //| Convenient type alias.\n    using ctr_t = count_t<Maximum>;\n\nprivate:\n    //| This is displayed in generated documentation.\n    ctr_t _first = Initial;\n\n    ctr_t _second = 0; // This will not be displayed.\n\n    (uint32 x) -> uint2 callback; // This will be displayed\n                                  // even if it is not annotated.\n\npublic:\n    //| Returns the current count.\n    inline ctr_t count()\n    {\n        ctr_t result;\n        atomic\n        {\n            result = _first - _second;\n        }\n        return result;\n    }\n}\n\n\nstruct, enum'}
04:25:27,257 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,258 openai._base_client INFO Retrying request to /chat/completions in 5.086000 seconds
04:25:27,285 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,285 openai._base_client INFO Retrying request to /chat/completions in 5.074000 seconds
04:25:27,502 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,503 openai._base_client INFO Retrying request to /chat/completions in 3.700000 seconds
04:25:27,507 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,507 openai._base_client INFO Retrying request to /chat/completions in 3.704000 seconds
04:25:27,518 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,518 openai._base_client INFO Retrying request to /chat/completions in 5.078000 seconds
04:25:27,527 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,527 openai._base_client INFO Retrying request to /chat/completions in 3.696000 seconds
04:25:27,550 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,550 openai._base_client INFO Retrying request to /chat/completions in 3.696000 seconds
04:25:27,556 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,556 openai._base_client INFO Retrying request to /chat/completions in 4.256000 seconds
04:25:27,576 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,577 openai._base_client INFO Retrying request to /chat/completions in 3.700000 seconds
04:25:27,597 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,598 openai._base_client INFO Retrying request to /chat/completions in 3.696000 seconds
04:25:27,614 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,615 openai._base_client INFO Retrying request to /chat/completions in 3.678000 seconds
04:25:27,627 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,627 openai._base_client INFO Retrying request to /chat/completions in 3.694000 seconds
04:25:27,689 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,689 openai._base_client INFO Retrying request to /chat/completions in 3.690000 seconds
04:25:27,692 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,692 openai._base_client INFO Retrying request to /chat/completions in 3.698000 seconds
04:25:27,706 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,707 openai._base_client INFO Retrying request to /chat/completions in 5.076000 seconds
04:25:27,709 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,709 openai._base_client INFO Retrying request to /chat/completions in 3.694000 seconds
04:25:27,726 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,727 openai._base_client INFO Retrying request to /chat/completions in 3.700000 seconds
04:25:27,796 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,796 openai._base_client INFO Retrying request to /chat/completions in 3.682000 seconds
04:25:27,879 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,880 openai._base_client INFO Retrying request to /chat/completions in 3.704000 seconds
04:25:27,987 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:27,988 openai._base_client INFO Retrying request to /chat/completions in 3.700000 seconds
04:25:28,49 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:28,50 openai._base_client INFO Retrying request to /chat/completions in 3.666000 seconds
04:25:28,65 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:28,65 openai._base_client INFO Retrying request to /chat/completions in 3.686000 seconds
04:25:28,288 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:28,288 openai._base_client INFO Retrying request to /chat/completions in 3.702000 seconds
04:25:28,392 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:28,393 openai._base_client INFO Retrying request to /chat/completions in 3.698000 seconds
04:25:31,301 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,301 openai._base_client INFO Retrying request to /chat/completions in 5.686000 seconds
04:25:31,323 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,324 openai._base_client INFO Retrying request to /chat/completions in 5.678000 seconds
04:25:31,339 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,339 openai._base_client INFO Retrying request to /chat/completions in 5.684000 seconds
04:25:31,364 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,365 openai._base_client INFO Retrying request to /chat/completions in 5.696000 seconds
04:25:31,383 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,383 openai._base_client INFO Retrying request to /chat/completions in 5.688000 seconds
04:25:31,423 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,424 openai._base_client INFO Retrying request to /chat/completions in 5.690000 seconds
04:25:31,425 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,425 openai._base_client INFO Retrying request to /chat/completions in 5.670000 seconds
04:25:31,477 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,477 openai._base_client INFO Retrying request to /chat/completions in 5.680000 seconds
04:25:31,490 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,491 openai._base_client INFO Retrying request to /chat/completions in 5.688000 seconds
04:25:31,491 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,492 openai._base_client INFO Retrying request to /chat/completions in 5.672000 seconds
04:25:31,514 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,515 openai._base_client INFO Retrying request to /chat/completions in 5.688000 seconds
04:25:31,671 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,672 openai._base_client INFO Retrying request to /chat/completions in 5.678000 seconds
04:25:31,691 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,691 openai._base_client INFO Retrying request to /chat/completions in 5.556000 seconds
04:25:31,791 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,791 openai._base_client INFO Retrying request to /chat/completions in 5.672000 seconds
04:25:31,817 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,817 openai._base_client INFO Retrying request to /chat/completions in 5.664000 seconds
04:25:31,864 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,864 openai._base_client INFO Retrying request to /chat/completions in 5.658000 seconds
04:25:31,896 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:31,896 openai._base_client INFO Retrying request to /chat/completions in 5.692000 seconds
04:25:32,79 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:32,79 openai._base_client INFO Retrying request to /chat/completions in 5.690000 seconds
04:25:32,198 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:32,200 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: 1; FIVE is assigned the value of the expression ONE + 2 , which is 3; NINE is assigned the value of 0; and, finally, FIFTEEN is assigned the value 1.\n\nenum CrazyNumbers : uint5\n{\n    ONE = 1,\n    FIVE = ONE + 2,\n    NINE = 0,\n    FIFTEEN\n}\n\nEnumerators can only represent values within the range of their base type.\n\nEnumerators are almost always qualified with the enumeration name:\n\nenum RGBColor : uint2\n{\n    RED,\n    GREEN,\n    BLUE\n}\n\nRGBColor color = RGBColor::GREEN;\n\nThe one case where a enumerator name does not need to be fully qualified is in the definition of an enumeration. In the following example, RED is referenced in the defintion of GREEN .\n\nenum RGBColor : uint2\n{\n    RED,\n    GREEN = RED + 1,\n    BLUE\n}\n\n\nStructures\n\nStructures are defined with the struct keyword, as shown in the following code sample.\n\nstruct ExampleStruct\n{\n    uint8 x;\n    uint4 y;\n}\n\nvoid MyStructFunction()\n{\n    ExampleStruct es;\n    es.x = 0x20;\n    es.y = 0x02;\n\n    // Could also use an initializer list:\n    // ExampleStruct es = { 0x20, 0x02 };\n}\n\nStructures are stored in little-endian format (the first element occupies the least-significant bit).\n\n\nUnions\n\nUnions allow different data types to be efficiently stored in the same memory location.\n\nunion ExampleUnion\n{\n    uint8 larger;\n    uint4 smaller;\n}\n\nvoid MyUnionFunction()\n{\n    ExampleUnion eu;\n    eu.larger=0x20;\n    eu.smaller=0;\n    println(eu.smaller);\n}\n\nAll union fields are packed such that the least significant bit of each field is the least significant bit of the union. The width of a union is equal to the width of the widest field. A write to a field of width F in a union of total width N affects the lower F bits of all fields. The remaining bits (up to N-F ) of each field are undefined after the write.\n\n\nArrays\n\nSandpiper supports arrays:\n\nuint32[4] x; // An array of 4 uint32 values\narray<uint32, 4> y; // Another syntax\n\nuint8 i = 1;\nuint32 z = x[i]; // reading from an array\nx[i + 1] = z + 2; // writing to an array\n\n\nOut-Of-Bounds Array Access\n\nWrites beyond the end of an array are silently dropped. Array reads behave as if the array size was rounded up a power of two (padding with zeros) and only the relevant least-significant bits of the index used to access the padded array.\n\nuint8[6] x;\nuint4 i = 9;\n\n// Prints x[1] because only the lower 3 bits of i are used\nprintln(x[i]);\n\n\nMemories\n\nSandpiper supports memories in addition to arrays. Memories have different semantics and performance characteristics than arrays.\n\nmemory<uint32, 4> x;\n\nvoid F()\n{\n    uint8 i = 1;\n    uint32 z = x[i]; // reading from a memory\n    x[i + 1] = z + 2; // writing to a memory\n}\n\n\nSemantic Differences Between Memories and Arrays\n\n- Arrays can be copied and passed by value, memories cannot\n- If two threads write to the same memory at the same time (even with different addresses), one write will be dropped. See Data Races .\n\n\nOut-Of-Bounds Memory Access\n\nMemory read and write addresses are implicitly converted the narrowest unsigned integer type that can represent all possible addresses for the memory in question ( index_t<N> where N is the number of elements in the memory). If the converted index is greater than or equal to N then the access is considered out-of-bounds. Out-of-bounds reads produced undefined results. Out-of-bounds writes have no affect. Note that if N is a power of two, then out-of-bounds accesses are impossible because the conversion to index_t<N> results in an address that is in the range [0, N) .\n\n\nMemory Initialization\n\nMemories can be declared with initial values (see Initializer Lists ). For FPGA targets, initial values are set when the FPGA image is programmed ( not during reset). For ASIC targets, initial values are programmed to the memory after reset.\n\nmemory<uint32, 4> mem = { 3, 8, 5, 1 };\n\n\nRead-only Memories\n\nMemories can be declared read-only with the const keyword. Declaring a memory read-only can result in less resource usage.\n\nconst memory<uint32, 4> read_only_mem = { 10, 4, 3, 6 };\n\n\nError Correcting Codes\n\n\nmemory_ecc\n\nmemory_ecc can be used to declare a memory with ECC support. Reads from a memory_ecc return a value of type: ecc<T> .\n\nimport data.memory\n\nmemory_ecc<uint32, 512> mem;\n\nvoid F(uint9 addr, uint32 data)\n{\n    // Store a uint32 into the memory\n    mem[addr] = data;\n\n    // Loads return ecc<uint32>\n    ecc<uint32> result = mem[addr];\n\n    if (result.error)\n    {\n        // An error (corrected or not) was encountered\n    }\n\n    if (result.data.is_valid)\n    {\n        // Either there was no ECC error\n        // or an error was corrected\n        // result.data.value can be used\n        sim_assert(result.data.value == data);\n    }\n}\n\nmemory_ecc_norep behaves like memory_ecc but without replication.\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>CRAZYNUMBERS<|>ORGANIZATION<|>CrazyNumbers is an enumeration in programming that defines constants ONE, FIVE, NINE, and FIFTEEN with specific values)\n##\n("entity"<|>RGBColor<|>ORGANIZATION<|>RGBColor is an enumeration for color values RED, GREEN, BLUE with a base type of uint2)\n##\n("entity"<|>EXAMPLESTRUCT<|>ORGANIZATION<|>ExampleStruct is a structure defined with uint8 x and uint4 y as its members)\n##\n("entity"<|>EXAMPLEUNION<|>ORGANIZATION<|>ExampleUnion allows storage of different data types in the same memory location with members larger and smaller)\n##\n("entity"<|>SANDPIPER<|>ORGANIZATION<|>Sandpiper supports features like arrays, memories, and out-of-bounds array access in programming)\n##\n("entity"<|>MEMORY<|>ORGANIZATION<|>Memory in Sandpiper has different semantics and performance characteristics than arrays, supporting operations like read and write)\n##\n("entity"<|>MEMORY_ECC<|>ORGANIZATION<|>Memory_ecc is used to declare a memory with ECC support for error correction in Sandpiper programming language)\n##\n("relationship"<|>CRAZYNUMBERS<|>SANDPIPER<|>CrazyNumbers is a concept or feature supported by the Sandpiper programming language<|>5)\n##\n("relationship"<|>RGBColor<|>SANDPIPER<|>RGBColor is a concept or feature supported by the Sandpiper programming language<|>5)\n##\n("relationship"<|>EXAMPLESTRUCT<|>SANDPIPER<|>ExampleStruct is a concept or feature supported by the Sandpiper programming language<|>5)\n##\n("relationship"<|>EXAMPLEUNION<|>SANDPIPER<|>ExampleUnion is a concept or feature supported by the Sandpiper programming language<|>5)\n##\n("relationship"<|>MEMORY<|>SANDPIPER<|>Memory is a concept or feature supported by the Sandpiper programming language<|>5)\n##\n("relationship"<|>MEMORY_ECC<|>SANDPIPER<|>Memory_ecc is a concept or feature supported by the Sandpiper programming language<|>5)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:25:32,200 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29498, Requested 3331. Please try again in 5.658s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:32,201 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': '1; FIVE is assigned the value of the expression ONE + 2 , which is 3; NINE is assigned the value of 0; and, finally, FIFTEEN is assigned the value 1.\n\nenum CrazyNumbers : uint5\n{\n    ONE = 1,\n    FIVE = ONE + 2,\n    NINE = 0,\n    FIFTEEN\n}\n\nEnumerators can only represent values within the range of their base type.\n\nEnumerators are almost always qualified with the enumeration name:\n\nenum RGBColor : uint2\n{\n    RED,\n    GREEN,\n    BLUE\n}\n\nRGBColor color = RGBColor::GREEN;\n\nThe one case where a enumerator name does not need to be fully qualified is in the definition of an enumeration. In the following example, RED is referenced in the defintion of GREEN .\n\nenum RGBColor : uint2\n{\n    RED,\n    GREEN = RED + 1,\n    BLUE\n}\n\n\nStructures\n\nStructures are defined with the struct keyword, as shown in the following code sample.\n\nstruct ExampleStruct\n{\n    uint8 x;\n    uint4 y;\n}\n\nvoid MyStructFunction()\n{\n    ExampleStruct es;\n    es.x = 0x20;\n    es.y = 0x02;\n\n    // Could also use an initializer list:\n    // ExampleStruct es = { 0x20, 0x02 };\n}\n\nStructures are stored in little-endian format (the first element occupies the least-significant bit).\n\n\nUnions\n\nUnions allow different data types to be efficiently stored in the same memory location.\n\nunion ExampleUnion\n{\n    uint8 larger;\n    uint4 smaller;\n}\n\nvoid MyUnionFunction()\n{\n    ExampleUnion eu;\n    eu.larger=0x20;\n    eu.smaller=0;\n    println(eu.smaller);\n}\n\nAll union fields are packed such that the least significant bit of each field is the least significant bit of the union. The width of a union is equal to the width of the widest field. A write to a field of width F in a union of total width N affects the lower F bits of all fields. The remaining bits (up to N-F ) of each field are undefined after the write.\n\n\nArrays\n\nSandpiper supports arrays:\n\nuint32[4] x; // An array of 4 uint32 values\narray<uint32, 4> y; // Another syntax\n\nuint8 i = 1;\nuint32 z = x[i]; // reading from an array\nx[i + 1] = z + 2; // writing to an array\n\n\nOut-Of-Bounds Array Access\n\nWrites beyond the end of an array are silently dropped. Array reads behave as if the array size was rounded up a power of two (padding with zeros) and only the relevant least-significant bits of the index used to access the padded array.\n\nuint8[6] x;\nuint4 i = 9;\n\n// Prints x[1] because only the lower 3 bits of i are used\nprintln(x[i]);\n\n\nMemories\n\nSandpiper supports memories in addition to arrays. Memories have different semantics and performance characteristics than arrays.\n\nmemory<uint32, 4> x;\n\nvoid F()\n{\n    uint8 i = 1;\n    uint32 z = x[i]; // reading from a memory\n    x[i + 1] = z + 2; // writing to a memory\n}\n\n\nSemantic Differences Between Memories and Arrays\n\n- Arrays can be copied and passed by value, memories cannot\n- If two threads write to the same memory at the same time (even with different addresses), one write will be dropped. See Data Races .\n\n\nOut-Of-Bounds Memory Access\n\nMemory read and write addresses are implicitly converted the narrowest unsigned integer type that can represent all possible addresses for the memory in question ( index_t<N> where N is the number of elements in the memory). If the converted index is greater than or equal to N then the access is considered out-of-bounds. Out-of-bounds reads produced undefined results. Out-of-bounds writes have no affect. Note that if N is a power of two, then out-of-bounds accesses are impossible because the conversion to index_t<N> results in an address that is in the range [0, N) .\n\n\nMemory Initialization\n\nMemories can be declared with initial values (see Initializer Lists ). For FPGA targets, initial values are set when the FPGA image is programmed ( not during reset). For ASIC targets, initial values are programmed to the memory after reset.\n\nmemory<uint32, 4> mem = { 3, 8, 5, 1 };\n\n\nRead-only Memories\n\nMemories can be declared read-only with the const keyword. Declaring a memory read-only can result in less resource usage.\n\nconst memory<uint32, 4> read_only_mem = { 10, 4, 3, 6 };\n\n\nError Correcting Codes\n\n\nmemory_ecc\n\nmemory_ecc can be used to declare a memory with ECC support. Reads from a memory_ecc return a value of type: ecc<T> .\n\nimport data.memory\n\nmemory_ecc<uint32, 512> mem;\n\nvoid F(uint9 addr, uint32 data)\n{\n    // Store a uint32 into the memory\n    mem[addr] = data;\n\n    // Loads return ecc<uint32>\n    ecc<uint32> result = mem[addr];\n\n    if (result.error)\n    {\n        // An error (corrected or not) was encountered\n    }\n\n    if (result.data.is_valid)\n    {\n        // Either there was no ECC error\n        // or an error was corrected\n        // result.data.value can be used\n        sim_assert(result.data.value == data);\n    }\n}\n\nmemory_ecc_norep behaves like memory_ecc but without replication.'}
04:25:32,292 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:32,292 openai._base_client INFO Retrying request to /chat/completions in 5.102000 seconds
04:25:32,437 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:32,437 openai._base_client INFO Retrying request to /chat/completions in 5.684000 seconds
04:25:32,452 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:32,453 openai._base_client INFO Retrying request to /chat/completions in 5.686000 seconds
04:25:32,484 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:32,577 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:32,578 openai._base_client INFO Retrying request to /chat/completions in 3.300000 seconds
04:25:32,694 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:32,695 openai._base_client INFO Retrying request to /chat/completions in 6.146000 seconds
04:25:32,877 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:32,878 openai._base_client INFO Retrying request to /chat/completions in 6.158000 seconds
04:25:37,82 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,82 openai._base_client INFO Retrying request to /chat/completions in 4.584000 seconds
04:25:37,148 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,149 openai._base_client INFO Retrying request to /chat/completions in 4.556000 seconds
04:25:37,175 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,175 openai._base_client INFO Retrying request to /chat/completions in 4.564000 seconds
04:25:37,182 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,183 openai._base_client INFO Retrying request to /chat/completions in 4.566000 seconds
04:25:37,194 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,195 openai._base_client INFO Retrying request to /chat/completions in 4.574000 seconds
04:25:37,197 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,197 openai._base_client INFO Retrying request to /chat/completions in 4.480000 seconds
04:25:37,224 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,225 openai._base_client INFO Retrying request to /chat/completions in 4.526000 seconds
04:25:37,252 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,256 openai._base_client INFO Retrying request to /chat/completions in 4.584000 seconds
04:25:37,268 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,268 openai._base_client INFO Retrying request to /chat/completions in 4.590000 seconds
04:25:37,273 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,274 openai._base_client INFO Retrying request to /chat/completions in 4.566000 seconds
04:25:37,293 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,293 openai._base_client INFO Retrying request to /chat/completions in 4.590000 seconds
04:25:37,338 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,338 openai._base_client INFO Retrying request to /chat/completions in 4.584000 seconds
04:25:37,437 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,437 openai._base_client INFO Retrying request to /chat/completions in 4.590000 seconds
04:25:37,482 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,483 openai._base_client INFO Retrying request to /chat/completions in 4.594000 seconds
04:25:37,554 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,555 openai._base_client INFO Retrying request to /chat/completions in 4.588000 seconds
04:25:37,577 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,578 openai._base_client INFO Retrying request to /chat/completions in 4.582000 seconds
04:25:37,628 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,630 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: F()\n{\n    bool done = false;\n    uint32 x;\n\n    do\n    {\n        atomic do {} while (count < x);\n    } while (!done);\n}\n\n\nData\n\n\nLocal Variables\n\nAs the following diagram illustrates, the values of local variables are stored in pipeline registers and/or FIFOs:\n\nvoid F(uint32 x, uint16 y)\n{\n    uint32 z = x * 15;\n\n    uint48 w = z + y;\n\n    async_exec([w]()\n    {\n        uint64 a = w + 3;\n    });\n}\n\n\nArrays\n\nArray accesses have dramatically difference resource and time costs depending if the value of the index is known at compile time. If an array index is known at compile time, then array indexing has no cost.\n\nArray reads with a dynamic index are implemented with a multiplexer:\n\nuint32[4] x;\nindex_t<4> i; // not known at compile time\nuint32 y;\n\ny = x[i];\n\n// The assignment above is the same as:\ny = mux(i, x[0], x[1], x[2], x[3]);\n\nArray writes with a dynamic index are implemented with a de-multiplexer:\n\nuint32[4] x;\nindex_t<4> i; // not known at compile time\nuint32 y;\n\nx[i] = y;\n\n// The assignment above is the same as:\nstatic for (const auto j : 4)\n{\n    if (i == j)\n    {\n        // j is known at compile time\n        x[j] = y;\n    }\n}\n\n\nMemory\n\nA memory in the Sandpiper language corresponds to a logical memory in the generated hardware with R read ports and W write ports. R is equal to the number of statements in the source that read from the memory. W is equal to the number of statements in the source that write to the memory. Note that the counting of statements occurs after static for loops have been unrolled and function calls have been inlined.\n\nEach logical memory is implemented with a set of physical memories.\n\n\nRead Ports\n\nBy default, there exists a unique replica of the memory contents for each read port. If a memory has the [[non_replicated]] attribute then all read ports share a single replica. If there are concurrent reads, then an arbiter grants access to a single port on each cycle (and returns undefined values to all other ports).\n\n\nWrite Ports\n\nIf there are multiple write ports for a given memory then an arbiter is instantiated that grants write access to a single write statement on each cycle, and drops write requests from other ports.\n\n\nExamples\n\n\n2R2W memory\n\nThis code and diagram illustrates the implementation of a memory with 2 write ports and 2 read ports.\n\nmemory<uint32, 256> mem;\n\nvoid F(uint8 i, uint32 val)\n{\n    // write port 1\n    mem[i] = val;\n}\n\nvoid G(uint8 i, uint32 val)\n{\n    // write port 2\n    mem[i] = val + i;\n}\n\nuint32 H(uint8 i)\n{\n    // read port 1\n    return mem[i];\n}\n\nuint32 J(uint8 i)\n{\n    // read port 2\n    return mem[i + 2];\n}\n\n\n2R2W non-replicated memory\n\nThis code and diagram illustrates the implementation of a non-replicated memory with 2 write ports and 2 read ports.\n\nmemory_norep<uint32, 256> mem;\n\nvoid F(uint8 i, uint32 val)\n{\n    // write port 1\n    mem[i] = val;\n}\n\nvoid G(uint8 i, uint32 val)\n{\n    // write port 2\n    mem[i] = val + i;\n}\n\nuint32 H(uint8 i)\n{\n    // read port 1\n    return mem[i];\n}\n\nuint32 J(uint8 i)\n{\n    // read port 2\n    return mem[i + 2];\n}\n\n\nReset\n\nThe reset pin of generated RTL from Sandpiper design can be asynchronous or synchronous. By default the reset input is synchronous to the clock. If the command-line option --asynchronous-reset is applied when compiling Sandpiper design, the reset input is asynchronous to the clock.\n\n\nAsynchronous Reset\n\nWhen the reset is asynchronous, a reset synchronizer will be instantiated inside ResetControl module to generate a synchronous reset driving the remaining of the reset control logics. To avoid X values appearing on rst_and_startup_done_out port of the generated RTL during the synchronization of async reset, another synchronizer is used to ensure rst_and_startup_done_out is 1’b0 before the end of reset synchronization to avoid unexpected behavior of other modules sourcing this signal.\n\nAn extra synchronous reset pin( sw_srst_in ) will be present at the generated RTL top-level when the master reset is asynchronous. The synchronous reset provides an extra level of reset capability. sw_srst_in is ORed with the synchronized version of rst_in inside the reset synchronizer before driving the core reset logic.\n\n\nSynchronous Reset\n\nWhen rst_in is synchronous(default), sw_srst_in won’t be exported at the generated RTL top-level.\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>SANDPIPER<|>ORGANIZATION<|>A programming language or tool used for designing and implementing hardware designs, as inferred from the context of memory management, array handling, and execution models described in the text)\n##\n("entity"<|>MEMORY<|>ORGANIZATION<|>Represents a logical memory in hardware generated by Sandpiper, with specific attributes for read and write ports, and can be either replicated or non-replicated based on the design requirements)\n##\n("entity"<|>ASYNC_EXEC<|>EVENT<|>An asynchronous execution model in Sandpiper that allows for operations to be performed independently of the main execution flow, as demonstrated by the addition operation on variable \'w\'")\n##\n("entity"<|>RESET CONTROL<|>ORGANIZATION<|>A module within Sandpiper-generated hardware that manages reset operations, which can be either synchronous or asynchronous, ensuring stable initialization of the hardware design")\n##\n("relationship"<|>MEMORY<|>SANDPIPER<|>Memory management and configuration is a significant aspect of hardware design in Sandpiper, indicating a direct relationship between memory concepts and the Sandpiper tool<|>8)\n##\n("relationship"<|>ASYNC_EXEC<|>SANDPIPER<|>The async_exec event is a feature provided by Sandpiper to support asynchronous operations, showing how Sandpiper facilitates various execution models<|>7)\n##\n("relationship"<|>RESET CONTROL<|>SANDPIPER<|>Reset Control is a functionality within the Sandpiper tool that manages the reset states of hardware designs, illustrating Sandpiper\'s role in ensuring correct initialization and operation of hardware<|>8)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:25:37,630 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29124, Requested 3159. Please try again in 4.566s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:37,631 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'F()\n{\n    bool done = false;\n    uint32 x;\n\n    do\n    {\n        atomic do {} while (count < x);\n    } while (!done);\n}\n\n\nData\n\n\nLocal Variables\n\nAs the following diagram illustrates, the values of local variables are stored in pipeline registers and/or FIFOs:\n\nvoid F(uint32 x, uint16 y)\n{\n    uint32 z = x * 15;\n\n    uint48 w = z + y;\n\n    async_exec([w]()\n    {\n        uint64 a = w + 3;\n    });\n}\n\n\nArrays\n\nArray accesses have dramatically difference resource and time costs depending if the value of the index is known at compile time. If an array index is known at compile time, then array indexing has no cost.\n\nArray reads with a dynamic index are implemented with a multiplexer:\n\nuint32[4] x;\nindex_t<4> i; // not known at compile time\nuint32 y;\n\ny = x[i];\n\n// The assignment above is the same as:\ny = mux(i, x[0], x[1], x[2], x[3]);\n\nArray writes with a dynamic index are implemented with a de-multiplexer:\n\nuint32[4] x;\nindex_t<4> i; // not known at compile time\nuint32 y;\n\nx[i] = y;\n\n// The assignment above is the same as:\nstatic for (const auto j : 4)\n{\n    if (i == j)\n    {\n        // j is known at compile time\n        x[j] = y;\n    }\n}\n\n\nMemory\n\nA memory in the Sandpiper language corresponds to a logical memory in the generated hardware with R read ports and W write ports. R is equal to the number of statements in the source that read from the memory. W is equal to the number of statements in the source that write to the memory. Note that the counting of statements occurs after static for loops have been unrolled and function calls have been inlined.\n\nEach logical memory is implemented with a set of physical memories.\n\n\nRead Ports\n\nBy default, there exists a unique replica of the memory contents for each read port. If a memory has the [[non_replicated]] attribute then all read ports share a single replica. If there are concurrent reads, then an arbiter grants access to a single port on each cycle (and returns undefined values to all other ports).\n\n\nWrite Ports\n\nIf there are multiple write ports for a given memory then an arbiter is instantiated that grants write access to a single write statement on each cycle, and drops write requests from other ports.\n\n\nExamples\n\n\n2R2W memory\n\nThis code and diagram illustrates the implementation of a memory with 2 write ports and 2 read ports.\n\nmemory<uint32, 256> mem;\n\nvoid F(uint8 i, uint32 val)\n{\n    // write port 1\n    mem[i] = val;\n}\n\nvoid G(uint8 i, uint32 val)\n{\n    // write port 2\n    mem[i] = val + i;\n}\n\nuint32 H(uint8 i)\n{\n    // read port 1\n    return mem[i];\n}\n\nuint32 J(uint8 i)\n{\n    // read port 2\n    return mem[i + 2];\n}\n\n\n2R2W non-replicated memory\n\nThis code and diagram illustrates the implementation of a non-replicated memory with 2 write ports and 2 read ports.\n\nmemory_norep<uint32, 256> mem;\n\nvoid F(uint8 i, uint32 val)\n{\n    // write port 1\n    mem[i] = val;\n}\n\nvoid G(uint8 i, uint32 val)\n{\n    // write port 2\n    mem[i] = val + i;\n}\n\nuint32 H(uint8 i)\n{\n    // read port 1\n    return mem[i];\n}\n\nuint32 J(uint8 i)\n{\n    // read port 2\n    return mem[i + 2];\n}\n\n\nReset\n\nThe reset pin of generated RTL from Sandpiper design can be asynchronous or synchronous. By default the reset input is synchronous to the clock. If the command-line option --asynchronous-reset is applied when compiling Sandpiper design, the reset input is asynchronous to the clock.\n\n\nAsynchronous Reset\n\nWhen the reset is asynchronous, a reset synchronizer will be instantiated inside ResetControl module to generate a synchronous reset driving the remaining of the reset control logics. To avoid X values appearing on rst_and_startup_done_out port of the generated RTL during the synchronization of async reset, another synchronizer is used to ensure rst_and_startup_done_out is 1’b0 before the end of reset synchronization to avoid unexpected behavior of other modules sourcing this signal.\n\nAn extra synchronous reset pin( sw_srst_in ) will be present at the generated RTL top-level when the master reset is asynchronous. The synchronous reset provides an extra level of reset capability. sw_srst_in is ORed with the synchronized version of rst_in inside the reset synchronizer before driving the core reset logic.\n\n\nSynchronous Reset\n\nWhen rst_in is synchronous(default), sw_srst_in won’t be exported at the generated RTL top-level.'}
04:25:37,693 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,693 openai._base_client INFO Retrying request to /chat/completions in 4.572000 seconds
04:25:37,739 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,739 openai._base_client INFO Retrying request to /chat/completions in 3.728000 seconds
04:25:37,860 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:37,860 openai._base_client INFO Retrying request to /chat/completions in 4.578000 seconds
04:25:38,219 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:38,220 openai._base_client INFO Retrying request to /chat/completions in 4.584000 seconds
04:25:38,233 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:38,234 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: -type template parameters can have default values.\n\n    template <typename T = uint32, auto N = 10>\n    using MyArray = T[N];\n\nThe default value of a parameter can depend on value(s) of preceding parameter(s):\n\n    template <auto InstrMemSize, auto InstrTCMSize = InstrMemSize>\n    class core\n    {\n    }\n\nTemplate parameter default values have to follow the same restrictions as template instance arguments: non-type parameter defaults must be known at compile time, type parameter defaults must be built-in or user defined types. Note that the default value of a parameter must be resolvable in the scope of the template definition, not in the scope where the template will be instantiated. In particular, a template defined in a module can declare parameters with defaults referring to symbols visible within that module, even if they are not visible outside, when the template is instantiated:\n\n    module test {Foo}\n\n    void Bar()\n    {}\n\n    template <() -> void Fn = Bar>\n    void Foo()\n    {\n    }\n\nFor function templates, when a parameter can be deduced from function call arguments, deduction takes precedence over using the default parameter value(s):\n\n    template <typename T = uint32>\n    void Foo(T x)\n    {\n    }\n\n    inline void Bar((uint32) -> void fn)\n    {\n    }\n\n    void Run()\n    {\n        Foo(false); // Foo<bool>\n\n        Bar(Foo);   // Foo<uint32>\n    }\n\nA function template for which all parameters can be deduced and/or have a default value, can be instantiated without angle brackets. Other kinds of template must be instantiated with a list of arguments enclosed in angle brackets, even when the list is empty:\n\n    template <auto N = 10>\n    struct Foo\n    {\n        uint<N>[N] x;\n    }\n\n    Foo<> foo;\n\n\nTemplate template parameters\n\nTemplates can have parameters specifying type templates. The syntax for template template parameter declaration is:\n\ntemplate < parameters > typename\n\nwhere parameters is a comma separated list specifying parameter kinds: typename , auto or type specifier .\n\nIn the body of the template declaration, the name of a template template parameter is a template-name and needs arguments to be instantiated.\n\n    template <template <typename, auto, bool> typename TT>\n    class Foo\n    {\n        TT<uint32, 10, false> x;\n    }\n\nThe argument for a template template parameter must be a type template, such as a struct template, union template, class template or an alias template, with a parameter list that matches the parameters in the template template parameter declaration.\n\n    template <template <typename> typename TT>\n    class Foo\n    {\n        TT<uint32> x;\n    }\n\n    template <typename T>\n    class Bar\n    {\n    }\n\n    Foo<Bar> foo;\n\nA template passed as argument for a template template parameter may have more parameters than the template template parameter signature specifies, as long as the extra parameters have default values.\n\n    template <template <typename> typename TT>\n    class Foo\n    {\n        TT<uint32> x;\n    }\n\n    template <typename T, auto N = 0>\n    class Bar\n    {\n    }\n\n    Foo<Bar> foo;\n\nDeclaration of a template template parameter can refer to preceding parameters:\n\n    template <typename T>\n    T Fn(T x)\n    {\n        return x;\n    }\n\n    template <typename T, template <(T) -> T> typename TT>\n    class Foo\n    {\n        TT<Fn<T>> x;\n    }\n\n    template <(uint32) -> uint32 Fn>\n    class Bar\n    {\n    }\n\n    Foo<uint32, Bar> foo;\n\nLike any template parameters, template template parameters can have default values:\n\n    template <typename T>\n    struct S\n    {\n    }\n\n    template <template <typename> typename TT = S>\n    class Foo\n    {\n        TT<uint32> x;\n    }\n\n    Foo<> foo;\n\n\nType casting\n\ncast<T>(e) can be used to convert an expression e to type T :\n\nbool b = false;\nuint1 u = cast<uint1>(b);\n\nThe input and output types must have the same width or the input type must be implicitly convertible to the output type. cast always reinterprets bits, it never performs a conversion like float to integer.\n\ncast supports:\n\n- int<N> / uint<N> widening with sign/zero extension, e.g.: int32 foo; auto bar = cast<int64>(foo);\n- int<N> / uint<N> narrowing with truncation, e.g.: uint32 foo; auto bar = cast<uint16>(foo); In both cases, truncation results in the most-significant bit(s) being dropped (including the sign bit for int<N> ) and can result in a loss of information.\n- In all other cases, provided that bitsizeof Input == bitsizeof Output , behave as reinterpret_cast , e.g.: bool[32] foo; auto bar = cast<uint1[8][4]>(foo);\n\nint<N> / uint<N> widening with sign/zero extension, e.g.:\n\nint32 foo;\nauto bar = cast<int64>(foo);\n\nint<N> / uint<N> narrowing with truncation, e.g.:\n\nuint32 foo;\nauto bar = cast<uint16>(foo);\n\nIn both cases, truncation results in the most-significant bit(s) being dropped (including the sign bit for int<N> ) and can result in a loss of information.\n\nIn all other cases, provided that bitsizeof Input == bitsizeof Output , behave as reinterpret_cast , e.g.:\n\nbool[32] foo;\nauto bar = cast<uint1[8][4]>(foo);\n\nreinterpret_cast<T>(e) can be used to explicitly cast between types of different widths. If the source type is wider than the\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>MYARRAY<|>ORGANIZATION<|>A template alias that defines an array type based on a type T and size N with default values uint32 and 10 respectively)\n##\n("entity"<|>CORE<|>ORGANIZATION<|>A class template with parameters for instruction memory size and instruction TCM size, where the latter defaults to the value of the former)\n##\n("entity"<|>MODULE TEST<|>ORGANIZATION<|>A module that includes a template with a default function parameter pointing to a function within its scope)\n##\n("entity"<|>FOO<|>ORGANIZATION<|>A function template and a struct template that demonstrate various template parameter default values and type deductions)\n##\n("entity"<|>BAR<|>ORGANIZATION<|>A function that demonstrates template parameter deduction and instantiation without angle brackets)\n##\n("entity"<|>RUN<|>ORGANIZATION<|>A function that shows the instantiation of templates with deduced and default parameter values)\n##\n("entity"<|>UINT32<|>ORGANIZATION<|>A built-in type used as a default parameter value in templates and as an example in type casting)\n##\n("entity"<|>CAST<|>EVENT<|>A type casting operation that converts an expression of one type to another, demonstrating widening, narrowing, and reinterpretation of bits)\n##\n("entity"<|>REINTERPRET_CAST<|>EVENT<|>An explicit casting operation that allows conversion between types of different widths)\n##\n("relationship"<|>MYARRAY<|>UINT32<|>MyArray uses uint32 as its default type parameter<|>5)\n##\n("relationship"<|>CORE<|>MODULE TEST<|>Core is an example of a template that could be defined within a module like Module Test<|>3)\n##\n("relationship"<|>FOO<|>BAR<|>Foo and Bar are related through template parameter deduction and instantiation examples<|>7)\n##\n("relationship"<|>CAST<|>UINT32<|>Cast demonstrates operations involving uint32 for widening and narrowing conversions<|>8)\n##\n("relationship"<|>REINTERPRET_CAST<|>CAST<|>Reinterpret_cast is a form of casting that could be compared to the operations shown in cast<|>6)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:25:38,234 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 28824, Requested 3470. Please try again in 4.588s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:38,235 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': '-type template parameters can have default values.\n\n    template <typename T = uint32, auto N = 10>\n    using MyArray = T[N];\n\nThe default value of a parameter can depend on value(s) of preceding parameter(s):\n\n    template <auto InstrMemSize, auto InstrTCMSize = InstrMemSize>\n    class core\n    {\n    }\n\nTemplate parameter default values have to follow the same restrictions as template instance arguments: non-type parameter defaults must be known at compile time, type parameter defaults must be built-in or user defined types. Note that the default value of a parameter must be resolvable in the scope of the template definition, not in the scope where the template will be instantiated. In particular, a template defined in a module can declare parameters with defaults referring to symbols visible within that module, even if they are not visible outside, when the template is instantiated:\n\n    module test {Foo}\n\n    void Bar()\n    {}\n\n    template <() -> void Fn = Bar>\n    void Foo()\n    {\n    }\n\nFor function templates, when a parameter can be deduced from function call arguments, deduction takes precedence over using the default parameter value(s):\n\n    template <typename T = uint32>\n    void Foo(T x)\n    {\n    }\n\n    inline void Bar((uint32) -> void fn)\n    {\n    }\n\n    void Run()\n    {\n        Foo(false); // Foo<bool>\n\n        Bar(Foo);   // Foo<uint32>\n    }\n\nA function template for which all parameters can be deduced and/or have a default value, can be instantiated without angle brackets. Other kinds of template must be instantiated with a list of arguments enclosed in angle brackets, even when the list is empty:\n\n    template <auto N = 10>\n    struct Foo\n    {\n        uint<N>[N] x;\n    }\n\n    Foo<> foo;\n\n\nTemplate template parameters\n\nTemplates can have parameters specifying type templates. The syntax for template template parameter declaration is:\n\ntemplate < parameters > typename\n\nwhere parameters is a comma separated list specifying parameter kinds: typename , auto or type specifier .\n\nIn the body of the template declaration, the name of a template template parameter is a template-name and needs arguments to be instantiated.\n\n    template <template <typename, auto, bool> typename TT>\n    class Foo\n    {\n        TT<uint32, 10, false> x;\n    }\n\nThe argument for a template template parameter must be a type template, such as a struct template, union template, class template or an alias template, with a parameter list that matches the parameters in the template template parameter declaration.\n\n    template <template <typename> typename TT>\n    class Foo\n    {\n        TT<uint32> x;\n    }\n\n    template <typename T>\n    class Bar\n    {\n    }\n\n    Foo<Bar> foo;\n\nA template passed as argument for a template template parameter may have more parameters than the template template parameter signature specifies, as long as the extra parameters have default values.\n\n    template <template <typename> typename TT>\n    class Foo\n    {\n        TT<uint32> x;\n    }\n\n    template <typename T, auto N = 0>\n    class Bar\n    {\n    }\n\n    Foo<Bar> foo;\n\nDeclaration of a template template parameter can refer to preceding parameters:\n\n    template <typename T>\n    T Fn(T x)\n    {\n        return x;\n    }\n\n    template <typename T, template <(T) -> T> typename TT>\n    class Foo\n    {\n        TT<Fn<T>> x;\n    }\n\n    template <(uint32) -> uint32 Fn>\n    class Bar\n    {\n    }\n\n    Foo<uint32, Bar> foo;\n\nLike any template parameters, template template parameters can have default values:\n\n    template <typename T>\n    struct S\n    {\n    }\n\n    template <template <typename> typename TT = S>\n    class Foo\n    {\n        TT<uint32> x;\n    }\n\n    Foo<> foo;\n\n\nType casting\n\ncast<T>(e) can be used to convert an expression e to type T :\n\nbool b = false;\nuint1 u = cast<uint1>(b);\n\nThe input and output types must have the same width or the input type must be implicitly convertible to the output type. cast always reinterprets bits, it never performs a conversion like float to integer.\n\ncast supports:\n\n- int<N> / uint<N> widening with sign/zero extension, e.g.: int32 foo; auto bar = cast<int64>(foo);\n- int<N> / uint<N> narrowing with truncation, e.g.: uint32 foo; auto bar = cast<uint16>(foo); In both cases, truncation results in the most-significant bit(s) being dropped (including the sign bit for int<N> ) and can result in a loss of information.\n- In all other cases, provided that bitsizeof Input == bitsizeof Output , behave as reinterpret_cast , e.g.: bool[32] foo; auto bar = cast<uint1[8][4]>(foo);\n\nint<N> / uint<N> widening with sign/zero extension, e.g.:\n\nint32 foo;\nauto bar = cast<int64>(foo);\n\nint<N> / uint<N> narrowing with truncation, e.g.:\n\nuint32 foo;\nauto bar = cast<uint16>(foo);\n\nIn both cases, truncation results in the most-significant bit(s) being dropped (including the sign bit for int<N> ) and can result in a loss of information.\n\nIn all other cases, provided that bitsizeof Input == bitsizeof Output , behave as reinterpret_cast , e.g.:\n\nbool[32] foo;\nauto bar = cast<uint1[8][4]>(foo);\n\nreinterpret_cast<T>(e) can be used to explicitly cast between types of different widths. If the source type is wider than the'}
04:25:38,322 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:38,323 openai._base_client INFO Retrying request to /chat/completions in 3.656000 seconds
04:25:38,944 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:38,946 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: Effective Sandpiper\n\n- Correctness Shared state No shared state Shared variables exclusive to one atomic block Shared variable with 1 write location Shared variable with multiple write locations Threading Computing number of threads for a vectorized loop\n- Compiler Settings Max register ratio Optimizing Output For Specific Downstream Tools Multicore compilation\n- Area Minimize Basic Block Count atomic do Use inline functions Minimize Variable Lifetime Short Circuit Re-compute Avoid sequential loops Sequential loop reorder buffer Unrolled loop-carried dependencies Hoisting static for Sequential loops and pipelined_* functions Reduce Mux Widths Optionals Remove initialization of global/static variables Control Inspection Narrow/rotate arrays before indexing Memory Allocator Trade frequency for area Trade logic for DSPs Trade registers for memories Trade registers for logic When to stop Thread Rate\n- Frequency Allow wide operations to be decomposed Decompose atomic blocks Break up atomic adds (or other wide operations) Move logic outside of atomic Minimize logic depth within atomic Parallel state updates\n- Power Clock Gating Clock Gating Level Clock Gating Threshold Clock Gating Report\n\n- Shared state No shared state Shared variables exclusive to one atomic block Shared variable with 1 write location Shared variable with multiple write locations\n- Threading Computing number of threads for a vectorized loop\n\n- No shared state\n- Shared variables exclusive to one atomic block\n- Shared variable with 1 write location\n- Shared variable with multiple write locations\n\n- Computing number of threads for a vectorized loop\n\n- Max register ratio\n- Optimizing Output For Specific Downstream Tools\n- Multicore compilation\n\n- Minimize Basic Block Count atomic do Use inline functions\n- Minimize Variable Lifetime Short Circuit Re-compute\n- Avoid sequential loops Sequential loop reorder buffer\n- Unrolled loop-carried dependencies\n- Hoisting static for Sequential loops and pipelined_* functions\n- Reduce Mux Widths\n- Optionals\n- Remove initialization of global/static variables\n- Control Inspection\n- Narrow/rotate arrays before indexing\n- Memory Allocator\n- Trade frequency for area\n- Trade logic for DSPs\n- Trade registers for memories\n- Trade registers for logic\n- When to stop\n- Thread Rate\n\n- atomic do\n- Use inline functions\n\n- Short Circuit\n- Re-compute\n\n- Sequential loop reorder buffer\n\n- static for\n- Sequential loops and pipelined_* functions\n\n- Allow wide operations to be decomposed\n- Decompose atomic blocks Break up atomic adds (or other wide operations)\n- Move logic outside of atomic\n- Minimize logic depth within atomic\n- Parallel state updates\n\n- Break up atomic adds (or other wide operations)\n\n- Clock Gating Clock Gating Level Clock Gating Threshold Clock Gating Report\n\n- Clock Gating Level\n- Clock Gating Threshold\n- Clock Gating Report\n\n\nCorrectness\n\n\nShared state\n\nThis section lists common idioms for accessing shared state. The list is sorted by complexity (or verification effort required). Strive to write most Sandpiper code using low complexity idioms.\n\n\nNo shared state\n\nSandpiper code that only accesses local variables is the lowest risk. An added benefit of this pattern is that it allows high clock frequencies to be achieved because constructs like atomic , [[schedule(n)]] , atomic do are not needed.\n\nuint32 F(uint32 a, uint32 b)\n{\n    return a + b;\n}\n\n\nShared variables exclusive to one atomic block\n\nThe fool-proof way to use a shared variable is to access that shared variable from only 1 atomic / [[schedule(N)]] block. One way to ensure this is to declare a static local variable within an atomic block. Using this pattern ensures a compile-time error if the shared variable is accessed outside of the block where it is declared.\n\nA typical use case for this pattern is when multiple threads all execute a common code path.\n\nuint32 Accumulate(uint32 a, bool reset)\n{\n    uint32 result;\n\n    atomic\n    {\n        // Shared variable, only visible within the atomic block\n        static uint32 _sum = 0;\n\n        _sum = reset ? a : _sum + a;\n        result = _sum;\n    }\n\n    return result;\n}\n\nThis common idiom is abstracted by the function attomically defined in the standard library module sync.atomic .\n\nimport sync.atomic\n\nuint32 Accumulate(uint32 a, bool reset)\n{\n    const auto x = atomically([a, reset](uint32 x) -> uint32\n    {\n        return reset ? a : x + a;\n    });\n\n    return x.second;\n}\n\nVerification considerations:\n\n- Is the initial value of the shared variable correct? Remove the initial value and verify that tests fail.\n- Have all control signals (like reset above) been tested?\n- For [[schedule(N)]] blocks, is the value of N correct? Increase the value of N and verify that tests fail.\n\n\nShared variable with 1 write location\n\nIf a shared variable must be accessed outside of a single atomic / [[schedule(N)]] block, try to design the code such that there is only one statement that writes to the shared variable.\n\nclass Accumulator\n{\nprivate:\n    uint32 _sum = 0;\n\npublic:\n    void Accumulate(uint32 x, bool reset)\n    {\n        atomic\n        {\n            // The only place where _sum is written\n            _sum = reset ? x : _sum + x;\n        }\n    }\n\n    uint32 GetResult()\n    {\n        return _sum;\n    }\n}\n\nVerification considerations:\n\n- Do writes to the shared variable need to be placed in atomic blocks? If multiple shared variables are written at nearby lines, most likely the writes should be contained within an atomic block.\n- Do reads of the shared variable need to be placed in atomic blocks? If multiple shared variables are read in nearby lines, most likely the reads should be contained within an atomic block.\n- What synchronization is needed between the write and read\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>SANDPIPER<|>ORGANIZATION<|>Sandpiper represents a coding framework or environment focused on optimizing computing processes, particularly in handling shared state, threading, compiler settings, area, frequency, and power management through specific programming idioms and techniques)\n##\n("entity"<|>ATOMIC BLOCK<|>EVENT<|>A programming construct within Sandpiper that ensures operations within it are completed without interruption, crucial for managing shared variables and synchronization in concurrent computing)\n##\n("entity"<|>COMPILER SETTINGS<|>EVENT<|>Settings that adjust how Sandpiper code is compiled, including max register ratio, optimizing output for specific tools, and multicore compilation to enhance performance and efficiency)\n##\n("entity"<|>MEMORY ALLOCATOR<|>EVENT<|>A component or process in Sandpiper that manages memory allocation, trading off between frequency, area, logic, DSPs, and registers to optimize for specific performance or resource usage goals)\n##\n("entity"<|>CLOCK GATING<|>EVENT<|>A power management technique used in Sandpiper to reduce power consumption by disabling the clock signal to portions of the device when not in use, involving levels, thresholds, and reporting)\n##\n("relationship"<|>ATOMIC BLOCK<|>SANDPIPER<|>Atomic blocks are a fundamental concept in Sandpiper for managing concurrency and shared state<|>9)\n##\n("relationship"<|>COMPILER SETTINGS<|>SANDPIPER<|>Compiler settings are part of Sandpiper\'s approach to optimize code compilation for performance and efficiency<|>8)\n##\n("relationship"<|>MEMORY ALLOCATOR<|>SANDPIPER<|>The memory allocator in Sandpiper is designed to optimize memory usage and performance through various trade-offs<|>7)\n##\n("relationship"<|>CLOCK GATING<|>SANDPIPER<|>Clock gating is implemented in Sandpiper as a strategy for power management and efficiency<|>8)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:25:38,946 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 28467, Requested 3585. Please try again in 4.104s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:38,947 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'Effective Sandpiper\n\n- Correctness Shared state No shared state Shared variables exclusive to one atomic block Shared variable with 1 write location Shared variable with multiple write locations Threading Computing number of threads for a vectorized loop\n- Compiler Settings Max register ratio Optimizing Output For Specific Downstream Tools Multicore compilation\n- Area Minimize Basic Block Count atomic do Use inline functions Minimize Variable Lifetime Short Circuit Re-compute Avoid sequential loops Sequential loop reorder buffer Unrolled loop-carried dependencies Hoisting static for Sequential loops and pipelined_* functions Reduce Mux Widths Optionals Remove initialization of global/static variables Control Inspection Narrow/rotate arrays before indexing Memory Allocator Trade frequency for area Trade logic for DSPs Trade registers for memories Trade registers for logic When to stop Thread Rate\n- Frequency Allow wide operations to be decomposed Decompose atomic blocks Break up atomic adds (or other wide operations) Move logic outside of atomic Minimize logic depth within atomic Parallel state updates\n- Power Clock Gating Clock Gating Level Clock Gating Threshold Clock Gating Report\n\n- Shared state No shared state Shared variables exclusive to one atomic block Shared variable with 1 write location Shared variable with multiple write locations\n- Threading Computing number of threads for a vectorized loop\n\n- No shared state\n- Shared variables exclusive to one atomic block\n- Shared variable with 1 write location\n- Shared variable with multiple write locations\n\n- Computing number of threads for a vectorized loop\n\n- Max register ratio\n- Optimizing Output For Specific Downstream Tools\n- Multicore compilation\n\n- Minimize Basic Block Count atomic do Use inline functions\n- Minimize Variable Lifetime Short Circuit Re-compute\n- Avoid sequential loops Sequential loop reorder buffer\n- Unrolled loop-carried dependencies\n- Hoisting static for Sequential loops and pipelined_* functions\n- Reduce Mux Widths\n- Optionals\n- Remove initialization of global/static variables\n- Control Inspection\n- Narrow/rotate arrays before indexing\n- Memory Allocator\n- Trade frequency for area\n- Trade logic for DSPs\n- Trade registers for memories\n- Trade registers for logic\n- When to stop\n- Thread Rate\n\n- atomic do\n- Use inline functions\n\n- Short Circuit\n- Re-compute\n\n- Sequential loop reorder buffer\n\n- static for\n- Sequential loops and pipelined_* functions\n\n- Allow wide operations to be decomposed\n- Decompose atomic blocks Break up atomic adds (or other wide operations)\n- Move logic outside of atomic\n- Minimize logic depth within atomic\n- Parallel state updates\n\n- Break up atomic adds (or other wide operations)\n\n- Clock Gating Clock Gating Level Clock Gating Threshold Clock Gating Report\n\n- Clock Gating Level\n- Clock Gating Threshold\n- Clock Gating Report\n\n\nCorrectness\n\n\nShared state\n\nThis section lists common idioms for accessing shared state. The list is sorted by complexity (or verification effort required). Strive to write most Sandpiper code using low complexity idioms.\n\n\nNo shared state\n\nSandpiper code that only accesses local variables is the lowest risk. An added benefit of this pattern is that it allows high clock frequencies to be achieved because constructs like atomic , [[schedule(n)]] , atomic do are not needed.\n\nuint32 F(uint32 a, uint32 b)\n{\n    return a + b;\n}\n\n\nShared variables exclusive to one atomic block\n\nThe fool-proof way to use a shared variable is to access that shared variable from only 1 atomic / [[schedule(N)]] block. One way to ensure this is to declare a static local variable within an atomic block. Using this pattern ensures a compile-time error if the shared variable is accessed outside of the block where it is declared.\n\nA typical use case for this pattern is when multiple threads all execute a common code path.\n\nuint32 Accumulate(uint32 a, bool reset)\n{\n    uint32 result;\n\n    atomic\n    {\n        // Shared variable, only visible within the atomic block\n        static uint32 _sum = 0;\n\n        _sum = reset ? a : _sum + a;\n        result = _sum;\n    }\n\n    return result;\n}\n\nThis common idiom is abstracted by the function attomically defined in the standard library module sync.atomic .\n\nimport sync.atomic\n\nuint32 Accumulate(uint32 a, bool reset)\n{\n    const auto x = atomically([a, reset](uint32 x) -> uint32\n    {\n        return reset ? a : x + a;\n    });\n\n    return x.second;\n}\n\nVerification considerations:\n\n- Is the initial value of the shared variable correct? Remove the initial value and verify that tests fail.\n- Have all control signals (like reset above) been tested?\n- For [[schedule(N)]] blocks, is the value of N correct? Increase the value of N and verify that tests fail.\n\n\nShared variable with 1 write location\n\nIf a shared variable must be accessed outside of a single atomic / [[schedule(N)]] block, try to design the code such that there is only one statement that writes to the shared variable.\n\nclass Accumulator\n{\nprivate:\n    uint32 _sum = 0;\n\npublic:\n    void Accumulate(uint32 x, bool reset)\n    {\n        atomic\n        {\n            // The only place where _sum is written\n            _sum = reset ? x : _sum + x;\n        }\n    }\n\n    uint32 GetResult()\n    {\n        return _sum;\n    }\n}\n\nVerification considerations:\n\n- Do writes to the shared variable need to be placed in atomic blocks? If multiple shared variables are written at nearby lines, most likely the writes should be contained within an atomic block.\n- Do reads of the shared variable need to be placed in atomic blocks? If multiple shared variables are read in nearby lines, most likely the reads should be contained within an atomic block.\n- What synchronization is needed between the write and read'}
04:25:39,35 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:39,36 openai._base_client INFO Retrying request to /chat/completions in 3.100000 seconds
04:25:39,150 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:39,151 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: GetResult()\n    {\n        return _sum;\n    }\n}\n\nVerification considerations:\n\n- Do writes to the shared variable need to be placed in atomic blocks? If multiple shared variables are written at nearby lines, most likely the writes should be contained within an atomic block.\n- Do reads of the shared variable need to be placed in atomic blocks? If multiple shared variables are read in nearby lines, most likely the reads should be contained within an atomic block.\n- What synchronization is needed between the write and read locations?\n- For non-replicated memories: can a data race occur (multiple concurrent reads)?\n- Is the initial value of the shared variable correct? Remove the initial value and verify that tests fail.\n- Have all control signals (like reset above) been tested?\n- For [[schedule(N)]] blocks, is the value of N correct? Increase the value of N and verify that tests fail.\n\n\nShared variable with multiple write locations\n\nThe most complex code contains multiple statements that each can write to a shared variable. Read the following code an convince yourself that a data race is impossible (two threads writing to _flag concurrently).\n\nvoid F()\n{\n    // Shared variable, with multiple write locations\n    static bool _flag = false;\n\n    bool local_flag;\n\n    atomic\n    {\n        local_flag = _flag;\n\n        if (!_flag)\n        {\n            // write location 1\n            _flag = true;\n        }\n    }\n\n    // more code here\n\n    atomic\n    {\n        if (!local_flag)\n        {\n            // write location 2\n            _flag = false;\n        }\n    }\n}\n\nVerification considerations:\n\n- Can a data race occur (concurrent writes to the same shared variable)?\n- Do writes to the shared variable need to be placed in atomic blocks?\n- Do reads of the shared variable need to be placed in atomic blocks?\n- What synchronization is needed between the write and read locations?\n- For non-replicated memories: can a data race occur (multiple concurrent reads)?\n- Is the initial value of the shared variable correct? Remove the initial value and verify that tests fail.\n- Have all control signals been tested?\n- For [[schedule(N)]] blocks, is the value of N correct? Increase the value of N and verify that tests fail.\n\n\nThreading\n\n\nComputing number of threads for a vectorized loop\n\nIf item_count items must be processed by a loop (such as a call to pipelined_for ) which operates on M elements per iteration, use code like the following to compute the number of loop iterations and the number of items processed by the final iteration.\n\nimport numeric.int.operator\n\nconst auto M = 4;\n\nvoid f(uint32 item_count)\n{\n    auto iter = ceil_div_mod<1>(item_count, M);\n\n    // iter.first contains the number of loop iterations\n    // iter.second contains the number of items processed by the last loop iteration\n}\n\n\nCompiler Settings\n\nThe following command line parameters trade compile time for quality of generated hardware.\n\n\nMax register ratio\n\nThe --max-register-ratio setting allows the compiler to use a higher register ratio within [[schedule(N)]] blocks to meet the schedule constraint while better dividing logic across pipeline stages. Increasing the difference between --register-ratio and --max-register-ratio adds extra iterations to the compiler scheduling, increasing compiler execution time.\n\n\nOptimizing Output For Specific Downstream Tools\n\nThe --sparse-reg-opt command line switch causes the compiler to remove bits from pipeline registers that are known to be unused or constant. Some synthesis tools can perform a similar optimization.\n\n\nMulticore compilation\n\nThe jobs=N command line option controls the number of parallel jobs the compiler spawns. Generally the value should not be set higher than number of logical processors, which is the default, but in some cases compilation might run faster with fewer jobs, especially if the machine has a lot of cores and/or there is not enough compilation parallelism in the project to exploit.\n\nThe compiler can better exploit compilation parallelism if the design logic is spread across multiple files (modules). This is a good practice for organizing projects not just to optimize compilation speed but also for general code maintainability.\n\n\nArea\n\n\nMinimize Basic Block Count\n\nA basic block is a sequence of statements with the property that if a given thread executes the first statement of a basic block, that thread will execute all statements in the basic block. In general, try to minimize the total number of basic blocks in a design. This avoids fixed overhead associated with each basic block, and makes compiler optimizations more effective. Static analysis can be used to inspect the set of basic blocks used to implement a particular design.\n\nThe following control flow constructs do not introduce new basic blocks:\n\n- static for\n- if / else\n- switch\n- Inline function calls\n\n\natomic do\n\natomic do usually introduces a new basic block (which contains the atomic do loop body, loop condition, and the statements following atomic do .) This additional basic block can be avoided by hoisting the atomic do statement to the top of the containing function.\n\nOriginal:\n\nvoid F(uint32 x)\n{\n    static uint32 _counter;\n\n    // This line forces the atomic do\n    // to introduce a new basic block\n    uint32 y = x + 2;\n\n    atomic do {} while (x > _counter);\n}\n\nOptimized:\n\nvoid F(uint32 x)\n{\n    static uint32 _counter;\n\n    atomic do {} while (x > _counter);\n\n    uint32 y = x + 2;\n}\n\nA common pattern to enable hoisting atomic do statements is to split atomic do blocking into a separate method:\n\nOriginal:\n\nimport data.counter\n\nclass IntegerAllocator\n{\nprivate:\n    counter<32, 32> _free_count;\n    uint32 _id = 0;\n\n    inline bool wait_internal()\n    {\n        bool result = false;\n\n        if (_free_count.count() > 0)\n        {\n            result = true;\n            _free\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>ATOMIC<|>EVENT<|>Atomic blocks are used to ensure that operations on shared variables are performed without interference from other threads, crucial for maintaining data integrity in concurrent programming environments)\n##\n("entity"<|>SHARED VARIABLE<|>ORGANIZATION<|>A variable that can be accessed by multiple threads, requiring careful synchronization to prevent data races and ensure thread safety)\n##\n("entity"<|>DATA RACE<|>EVENT<|>A situation in concurrent programming where two or more threads access a shared variable concurrently, and at least one of the accesses is a write, potentially leading to unpredictable results)\n##\n("entity"<|>THREAD<|>ORGANIZATION<|>A thread in computing is the smallest sequence of programmed instructions that can be managed independently by a scheduler)\n##\n("entity"<|>COMPILER<|>ORGANIZATION<|>A compiler is a special program that translates a programming language\'s source code into machine code, bytecode or another programming language)\n##\n("entity"<|>PIPELINE REGISTER<|>ORGANIZATION<|>A register used in pipelining to hold data between one stage and the next in a pipeline processor, contributing to instruction execution without interruption)\n##\n("entity"<|>BASIC BLOCK<|>ORGANIZATION<|>A basic block in computing is a straight-line code sequence with no branches in except to the entry and no branches out except at the exit)\n##\n("relationship"<|>ATOMIC<|>SHARED VARIABLE<|>Atomic blocks are used to protect the integrity of shared variables in concurrent programming<|>9)\n##\n("relationship"<|>DATA RACE<|>SHARED VARIABLE<|>Data races occur when multiple threads access a shared variable concurrently without proper synchronization<|>9)\n##\n("relationship"<|>THREAD<|>SHARED VARIABLE<|>Threads may access and modify shared variables, necessitating mechanisms like atomic blocks to prevent data races<|>8)\n##\n("relationship"<|>COMPILER<|>BASIC BLOCK<|>Compilers analyze basic blocks for optimizations and efficient execution of code<|>7)\n##\n("relationship"<|>PIPELINE REGISTER<|>COMPILER<|>Compilers manage pipeline registers to optimize the execution of pipelined processors<|>6)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:25:39,151 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 28373, Requested 3680. Please try again in 4.106s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:39,152 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'GetResult()\n    {\n        return _sum;\n    }\n}\n\nVerification considerations:\n\n- Do writes to the shared variable need to be placed in atomic blocks? If multiple shared variables are written at nearby lines, most likely the writes should be contained within an atomic block.\n- Do reads of the shared variable need to be placed in atomic blocks? If multiple shared variables are read in nearby lines, most likely the reads should be contained within an atomic block.\n- What synchronization is needed between the write and read locations?\n- For non-replicated memories: can a data race occur (multiple concurrent reads)?\n- Is the initial value of the shared variable correct? Remove the initial value and verify that tests fail.\n- Have all control signals (like reset above) been tested?\n- For [[schedule(N)]] blocks, is the value of N correct? Increase the value of N and verify that tests fail.\n\n\nShared variable with multiple write locations\n\nThe most complex code contains multiple statements that each can write to a shared variable. Read the following code an convince yourself that a data race is impossible (two threads writing to _flag concurrently).\n\nvoid F()\n{\n    // Shared variable, with multiple write locations\n    static bool _flag = false;\n\n    bool local_flag;\n\n    atomic\n    {\n        local_flag = _flag;\n\n        if (!_flag)\n        {\n            // write location 1\n            _flag = true;\n        }\n    }\n\n    // more code here\n\n    atomic\n    {\n        if (!local_flag)\n        {\n            // write location 2\n            _flag = false;\n        }\n    }\n}\n\nVerification considerations:\n\n- Can a data race occur (concurrent writes to the same shared variable)?\n- Do writes to the shared variable need to be placed in atomic blocks?\n- Do reads of the shared variable need to be placed in atomic blocks?\n- What synchronization is needed between the write and read locations?\n- For non-replicated memories: can a data race occur (multiple concurrent reads)?\n- Is the initial value of the shared variable correct? Remove the initial value and verify that tests fail.\n- Have all control signals been tested?\n- For [[schedule(N)]] blocks, is the value of N correct? Increase the value of N and verify that tests fail.\n\n\nThreading\n\n\nComputing number of threads for a vectorized loop\n\nIf item_count items must be processed by a loop (such as a call to pipelined_for ) which operates on M elements per iteration, use code like the following to compute the number of loop iterations and the number of items processed by the final iteration.\n\nimport numeric.int.operator\n\nconst auto M = 4;\n\nvoid f(uint32 item_count)\n{\n    auto iter = ceil_div_mod<1>(item_count, M);\n\n    // iter.first contains the number of loop iterations\n    // iter.second contains the number of items processed by the last loop iteration\n}\n\n\nCompiler Settings\n\nThe following command line parameters trade compile time for quality of generated hardware.\n\n\nMax register ratio\n\nThe --max-register-ratio setting allows the compiler to use a higher register ratio within [[schedule(N)]] blocks to meet the schedule constraint while better dividing logic across pipeline stages. Increasing the difference between --register-ratio and --max-register-ratio adds extra iterations to the compiler scheduling, increasing compiler execution time.\n\n\nOptimizing Output For Specific Downstream Tools\n\nThe --sparse-reg-opt command line switch causes the compiler to remove bits from pipeline registers that are known to be unused or constant. Some synthesis tools can perform a similar optimization.\n\n\nMulticore compilation\n\nThe jobs=N command line option controls the number of parallel jobs the compiler spawns. Generally the value should not be set higher than number of logical processors, which is the default, but in some cases compilation might run faster with fewer jobs, especially if the machine has a lot of cores and/or there is not enough compilation parallelism in the project to exploit.\n\nThe compiler can better exploit compilation parallelism if the design logic is spread across multiple files (modules). This is a good practice for organizing projects not just to optimize compilation speed but also for general code maintainability.\n\n\nArea\n\n\nMinimize Basic Block Count\n\nA basic block is a sequence of statements with the property that if a given thread executes the first statement of a basic block, that thread will execute all statements in the basic block. In general, try to minimize the total number of basic blocks in a design. This avoids fixed overhead associated with each basic block, and makes compiler optimizations more effective. Static analysis can be used to inspect the set of basic blocks used to implement a particular design.\n\nThe following control flow constructs do not introduce new basic blocks:\n\n- static for\n- if / else\n- switch\n- Inline function calls\n\n\natomic do\n\natomic do usually introduces a new basic block (which contains the atomic do loop body, loop condition, and the statements following atomic do .) This additional basic block can be avoided by hoisting the atomic do statement to the top of the containing function.\n\nOriginal:\n\nvoid F(uint32 x)\n{\n    static uint32 _counter;\n\n    // This line forces the atomic do\n    // to introduce a new basic block\n    uint32 y = x + 2;\n\n    atomic do {} while (x > _counter);\n}\n\nOptimized:\n\nvoid F(uint32 x)\n{\n    static uint32 _counter;\n\n    atomic do {} while (x > _counter);\n\n    uint32 y = x + 2;\n}\n\nA common pattern to enable hoisting atomic do statements is to split atomic do blocking into a separate method:\n\nOriginal:\n\nimport data.counter\n\nclass IntegerAllocator\n{\nprivate:\n    counter<32, 32> _free_count;\n    uint32 _id = 0;\n\n    inline bool wait_internal()\n    {\n        bool result = false;\n\n        if (_free_count.count() > 0)\n        {\n            result = true;\n            _free'}
04:25:39,258 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:39,258 openai._base_client INFO Retrying request to /chat/completions in 2.634000 seconds
04:25:41,227 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:41,326 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,326 openai._base_client INFO Retrying request to /chat/completions in 1.886000 seconds
04:25:41,572 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,572 openai._base_client INFO Retrying request to /chat/completions in 0.698000 seconds
04:25:41,774 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,775 openai._base_client INFO Retrying request to /chat/completions in 0.686000 seconds
04:25:41,784 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,785 openai._base_client INFO Retrying request to /chat/completions in 0.690000 seconds
04:25:41,800 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,800 openai._base_client INFO Retrying request to /chat/completions in 0.698000 seconds
04:25:41,829 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,830 openai._base_client INFO Retrying request to /chat/completions in 0.704000 seconds
04:25:41,833 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,833 openai._base_client INFO Retrying request to /chat/completions in 0.706000 seconds
04:25:41,834 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,834 openai._base_client INFO Retrying request to /chat/completions in 0.708000 seconds
04:25:41,931 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,931 openai._base_client INFO Retrying request to /chat/completions in 0.700000 seconds
04:25:41,932 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,932 openai._base_client INFO Retrying request to /chat/completions in 0.700000 seconds
04:25:41,948 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,948 openai._base_client INFO Retrying request to /chat/completions in 0.702000 seconds
04:25:41,949 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,949 openai._base_client INFO Retrying request to /chat/completions in 0.624000 seconds
04:25:41,976 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,977 openai._base_client INFO Retrying request to /chat/completions in 0.702000 seconds
04:25:41,977 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:41,978 openai._base_client INFO Retrying request to /chat/completions in 0.700000 seconds
04:25:42,8 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,8 openai._base_client INFO Retrying request to /chat/completions in 0.708000 seconds
04:25:42,74 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,75 openai._base_client INFO Retrying request to /chat/completions in 0.712000 seconds
04:25:42,119 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,119 openai._base_client INFO Retrying request to /chat/completions in 0.708000 seconds
04:25:42,177 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,178 openai._base_client INFO Retrying request to /chat/completions in 0.696000 seconds
04:25:42,228 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,228 openai._base_client INFO Retrying request to /chat/completions in 0.708000 seconds
04:25:42,252 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,252 openai._base_client INFO Retrying request to /chat/completions in 0.702000 seconds
04:25:42,252 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,253 openai._base_client INFO Retrying request to /chat/completions in 0.682000 seconds
04:25:42,357 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,357 openai._base_client INFO Retrying request to /chat/completions in 0.712000 seconds
04:25:42,534 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,535 openai._base_client INFO Retrying request to /chat/completions in 6.296000 seconds
04:25:42,561 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,561 openai._base_client INFO Retrying request to /chat/completions in 5.484000 seconds
04:25:42,567 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,568 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: .\n\n\nStatic local variable instances\n\nA given static local variable may have many instances in the generated hardware. The following table describes how many instances are created for a static local variable.\n\n\nControl flow\n\n\nif/else\n\nuint32 c;\n\nif (c > 75)\n{\n    c += 75;\n}\nelse\n{\n    c = 0;\n}\n\nif/else ladders are supported:\n\nuint32 c;\n\nif (c > 75)\n{\n    c += 75;\n}\nelse if (c < 32)\n{\n    c = 32;\n}\nelse\n{\n    c--;\n}\n\n\nswitch\n\nuint8 x;\nuint64 result;\n\nswitch (x)\n{\ncase 0:\n    result = 3;\n    break;\n\ncase 1:\n    result = 5;\n    break;\n\ndefault:\n    result = 44;\n    break;\n}\n\nAll case statements must have a corresponding break statement, fall-through is not supported.\n\n\nLoops\n\n\ndo/while\n\ndo/while loops are similar to other programming languages:\n\nuint32 i = 6;\ndo\n{\n    i--;\n} while (i != 3)\n\n\nRange for\n\nRanged based for loops iterate from 0 to N-1. Note that the type of the induction variable can be inferred. It is the narrowest unsigned integer type that can represent N-1.\n\nfor (const auto i : 8)\n{\n    // 8 loop iterations\n    // i is: 0, 1, 2, 3, 4, 5, 6, 7\n}\n\n\nStatic for\n\nStatic for loops iterate from 0 to N-1. The body of the loop is replicated N times, which can affect the performance and correctness of Sandpiper code. See Spatial Computing for more details.\n\nThis snippet:\n\nuint8[4] a;\n\nstatic for (const auto i : 4)\n{\n    println(a[i]);\n}\n\nis equivalent to:\n\nuint8[4] a;\n{\n    {\n        const uint2 i = 0;\n        {\n            println(a[i]);\n        }\n    }\n\n    {\n        const uint2 i = 1;\n        {\n            println(a[i]);\n        }\n    }\n\n    {\n        const uint2 i = 2;\n        {\n            println(a[i]);\n        }\n    }\n\n    {\n        const uint2 i = 3;\n        {\n            println(a[i]);\n        }\n    }\n}\n\nThe induction variable of static for is known at compile time for each iteration of the loop. As such it can be used as an argument to templates, in conditions of static if , or in type declarations, e.g.:\n\nstatic for (const auto i : 2)\n{\n    index_t<i> x;\n}\n\nWhen a lambda is declared within static for body then each iteration of the loop instantiates its own lambda, allowing different iterations to operate on different types, e.g.:\n\nimport data.array\n\nvoid Run()\n{\n    static for(const auto i : 2)\n    {\n        index_t<i>[5+i] a;\n\n        sum<uint<5+i>>(a);\n    }\n}\n\n\nFunctions\n\nLogic of a design is expressed with functions. This section explains how to declare and call functions.\n\n\nFunction declaration\n\nA function declaration consists of its name, parameters, return type, and the function body, which contains zero or more statements. Here’s the basic syntax for declaring a function:\n\nuint32 add(uint32 x, uint32 y)\n{\n    return x + y;\n}\n\nParameters in a function declaration must have value types, and the return type can be a value type or void , indicating that the function does not return any result. If the return type is anything other than void , the function must have exactly one return statement. If the return type is specified as auto , the compiler will attempt to infer the type from the value the function returns:\n\n// Return type inferred by the compiler as `uint33`\nauto add(uint32 x, uint32 y)\n{\n    return x + y;\n}\n\n\nGlobal functions\n\nFunctions declared in global scope of a module are visible to other code in that module. Global functions can also be exposed by a module and then they are visible to code in other modules that import it.\n\nmodule foo.bar\n    { DoFoo\n    }\n\nvoid DoFoo()\n{\n}\n\n\nLocal functions\n\nA function can be declared locally within the body of another function. These local functions have access to any local types defined in their parent scope, but they do not have access to local variables or parameters of the enclosing function. Here’s an example of a local function:\n\nauto add(uint32 x, uint32 y)\n{\n    struct Record\n    {\n        uint32 x;\n        uint32 y;\n    };\n\n    auto helper(Record record)\n    {\n        // ...\n    }\n\n    return helper({x, y});\n}\n\n\nMethods\n\nFunctions declared within a class declaration are called methods. Methods are visible to code in other methods of the class, and when they are declared in the public section of the class, they are also accessible from outside the class using an object qualifier syntax.\n\nclass Foo\n{\npublic:\n    void Run()\n    {\n    }\n}\n\nFoo foo;\n\nvoid Run()\n{\n    foo.Run();\n}\n\nThe dual of a method is a free function. The global and local functions mentioned before are also called free functions.\n\n\nFunction call\n\nWhen a function is called, its body defines a piece of hardware that is used to execute the function’s logic. Multiple calls to a function may either share the same hardware or be inlined as completely independent pieces of hardware. The choice between sharing hardware and inlining has implications for performance and correctness.\n\n\nFunction inlining\n\nBy default, functions with multiple call sites are not inlined, meaning that callers share the same piece of hardware for the function implementation, potentially leading to queueing and contention. On the other hand, functions with only one call site are by\n######################\nOutput:', 'kwargs': {}}
04:25:42,568 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29851, Requested 2900. Please try again in 5.502s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:42,569 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': '.\n\n\nStatic local variable instances\n\nA given static local variable may have many instances in the generated hardware. The following table describes how many instances are created for a static local variable.\n\n\nControl flow\n\n\nif/else\n\nuint32 c;\n\nif (c > 75)\n{\n    c += 75;\n}\nelse\n{\n    c = 0;\n}\n\nif/else ladders are supported:\n\nuint32 c;\n\nif (c > 75)\n{\n    c += 75;\n}\nelse if (c < 32)\n{\n    c = 32;\n}\nelse\n{\n    c--;\n}\n\n\nswitch\n\nuint8 x;\nuint64 result;\n\nswitch (x)\n{\ncase 0:\n    result = 3;\n    break;\n\ncase 1:\n    result = 5;\n    break;\n\ndefault:\n    result = 44;\n    break;\n}\n\nAll case statements must have a corresponding break statement, fall-through is not supported.\n\n\nLoops\n\n\ndo/while\n\ndo/while loops are similar to other programming languages:\n\nuint32 i = 6;\ndo\n{\n    i--;\n} while (i != 3)\n\n\nRange for\n\nRanged based for loops iterate from 0 to N-1. Note that the type of the induction variable can be inferred. It is the narrowest unsigned integer type that can represent N-1.\n\nfor (const auto i : 8)\n{\n    // 8 loop iterations\n    // i is: 0, 1, 2, 3, 4, 5, 6, 7\n}\n\n\nStatic for\n\nStatic for loops iterate from 0 to N-1. The body of the loop is replicated N times, which can affect the performance and correctness of Sandpiper code. See Spatial Computing for more details.\n\nThis snippet:\n\nuint8[4] a;\n\nstatic for (const auto i : 4)\n{\n    println(a[i]);\n}\n\nis equivalent to:\n\nuint8[4] a;\n{\n    {\n        const uint2 i = 0;\n        {\n            println(a[i]);\n        }\n    }\n\n    {\n        const uint2 i = 1;\n        {\n            println(a[i]);\n        }\n    }\n\n    {\n        const uint2 i = 2;\n        {\n            println(a[i]);\n        }\n    }\n\n    {\n        const uint2 i = 3;\n        {\n            println(a[i]);\n        }\n    }\n}\n\nThe induction variable of static for is known at compile time for each iteration of the loop. As such it can be used as an argument to templates, in conditions of static if , or in type declarations, e.g.:\n\nstatic for (const auto i : 2)\n{\n    index_t<i> x;\n}\n\nWhen a lambda is declared within static for body then each iteration of the loop instantiates its own lambda, allowing different iterations to operate on different types, e.g.:\n\nimport data.array\n\nvoid Run()\n{\n    static for(const auto i : 2)\n    {\n        index_t<i>[5+i] a;\n\n        sum<uint<5+i>>(a);\n    }\n}\n\n\nFunctions\n\nLogic of a design is expressed with functions. This section explains how to declare and call functions.\n\n\nFunction declaration\n\nA function declaration consists of its name, parameters, return type, and the function body, which contains zero or more statements. Here’s the basic syntax for declaring a function:\n\nuint32 add(uint32 x, uint32 y)\n{\n    return x + y;\n}\n\nParameters in a function declaration must have value types, and the return type can be a value type or void , indicating that the function does not return any result. If the return type is anything other than void , the function must have exactly one return statement. If the return type is specified as auto , the compiler will attempt to infer the type from the value the function returns:\n\n// Return type inferred by the compiler as `uint33`\nauto add(uint32 x, uint32 y)\n{\n    return x + y;\n}\n\n\nGlobal functions\n\nFunctions declared in global scope of a module are visible to other code in that module. Global functions can also be exposed by a module and then they are visible to code in other modules that import it.\n\nmodule foo.bar\n    { DoFoo\n    }\n\nvoid DoFoo()\n{\n}\n\n\nLocal functions\n\nA function can be declared locally within the body of another function. These local functions have access to any local types defined in their parent scope, but they do not have access to local variables or parameters of the enclosing function. Here’s an example of a local function:\n\nauto add(uint32 x, uint32 y)\n{\n    struct Record\n    {\n        uint32 x;\n        uint32 y;\n    };\n\n    auto helper(Record record)\n    {\n        // ...\n    }\n\n    return helper({x, y});\n}\n\n\nMethods\n\nFunctions declared within a class declaration are called methods. Methods are visible to code in other methods of the class, and when they are declared in the public section of the class, they are also accessible from outside the class using an object qualifier syntax.\n\nclass Foo\n{\npublic:\n    void Run()\n    {\n    }\n}\n\nFoo foo;\n\nvoid Run()\n{\n    foo.Run();\n}\n\nThe dual of a method is a free function. The global and local functions mentioned before are also called free functions.\n\n\nFunction call\n\nWhen a function is called, its body defines a piece of hardware that is used to execute the function’s logic. Multiple calls to a function may either share the same hardware or be inlined as completely independent pieces of hardware. The choice between sharing hardware and inlining has implications for performance and correctness.\n\n\nFunction inlining\n\nBy default, functions with multiple call sites are not inlined, meaning that callers share the same piece of hardware for the function implementation, potentially leading to queueing and contention. On the other hand, functions with only one call site are by'}
04:25:42,586 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,587 openai._base_client INFO Retrying request to /chat/completions in 5.496000 seconds
04:25:42,621 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,622 openai._base_client INFO Retrying request to /chat/completions in 5.500000 seconds
04:25:42,633 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,634 openai._base_client INFO Retrying request to /chat/completions in 5.502000 seconds
04:25:42,635 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,635 openai._base_client INFO Retrying request to /chat/completions in 5.498000 seconds
04:25:42,683 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,684 openai._base_client INFO Retrying request to /chat/completions in 5.674000 seconds
04:25:42,688 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,688 openai._base_client INFO Retrying request to /chat/completions in 5.472000 seconds
04:25:42,719 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,719 openai._base_client INFO Retrying request to /chat/completions in 5.506000 seconds
04:25:42,725 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,725 openai._base_client INFO Retrying request to /chat/completions in 5.496000 seconds
04:25:42,741 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,741 openai._base_client INFO Retrying request to /chat/completions in 5.504000 seconds
04:25:42,768 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,768 openai._base_client INFO Retrying request to /chat/completions in 5.496000 seconds
04:25:42,816 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,816 openai._base_client INFO Retrying request to /chat/completions in 5.492000 seconds
04:25:42,817 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,817 openai._base_client INFO Retrying request to /chat/completions in 5.452000 seconds
04:25:42,880 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,880 openai._base_client INFO Retrying request to /chat/completions in 5.494000 seconds
04:25:42,926 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,927 openai._base_client INFO Retrying request to /chat/completions in 6.284000 seconds
04:25:42,930 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,931 openai._base_client INFO Retrying request to /chat/completions in 5.488000 seconds
04:25:42,963 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:42,963 openai._base_client INFO Retrying request to /chat/completions in 5.498000 seconds
04:25:43,34 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:43,34 openai._base_client INFO Retrying request to /chat/completions in 5.490000 seconds
04:25:43,36 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:43,36 openai._base_client INFO Retrying request to /chat/completions in 5.496000 seconds
04:25:43,51 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:43,52 openai._base_client INFO Retrying request to /chat/completions in 5.494000 seconds
04:25:43,162 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:43,163 openai._base_client INFO Retrying request to /chat/completions in 5.494000 seconds
04:25:43,195 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:43,288 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:43,289 openai._base_client INFO Retrying request to /chat/completions in 4.976000 seconds
04:25:43,304 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:43,305 openai._base_client INFO Retrying request to /chat/completions in 5.796000 seconds
04:25:44,129 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:44,236 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:44,236 openai._base_client INFO Retrying request to /chat/completions in 2.492000 seconds
04:25:48,178 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,178 openai._base_client INFO Retrying request to /chat/completions in 4.358000 seconds
04:25:48,237 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,238 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: hardware that is used to execute the function’s logic. Multiple calls to a function may either share the same hardware or be inlined as completely independent pieces of hardware. The choice between sharing hardware and inlining has implications for performance and correctness.\n\n\nFunction inlining\n\nBy default, functions with multiple call sites are not inlined, meaning that callers share the same piece of hardware for the function implementation, potentially leading to queueing and contention. On the other hand, functions with only one call site are by default inlined. This means that the hardware is instantiated at the call site, and there is no queue to access it. The default behavior can be modified using function modifiers inline and noninline .\n\n\nGeneric functions\n\nIn Sandpiper, functions can be defined in a generic way, without assuming specific parameter types. This allows writing more versatile functions that can operate on different data types as long as the required operations are defined for those types. Here’s an example of a generic function:\n\ninline auto add(auto x, auto y)\n{\n    return x + y;\n}\n\nThe function add can be used for any types of arguments, as long as the + operator is defined for those types. When a generic function is called, the compiler creates an instance of the function for each set of parameter types used. For example, calling add(10, 17) would create the following instance:\n\ninline uint6 ?add$uint@4$uint@5(uint4 x, uint5 y)\n{\n    return x + y;\n}\n\n\nFunction templates\n\nFunction templates provide a more general way to declare generic functions. Templates define a list of parameters, which can be both types and values. When a template function is called, template arguments can be specified explicitly, or they may be deduced from the arguments passed to the function:\n\ntemplate <typename T, auto N>\nvoid Foo(T[N] a)\n{\n}\n\nvoid Run()\n{\n    int6[8] a;\n\n    // Deduced Foo<int6, 8>\n    Foo(a);\n}\n\n\nReturn type polymorphism\n\nTemplates can be used to define functions that are polymorphic on the return type:\n\ntemplate <typename T>\nT Foo(auto x)\n{\n    return reinterpret_cast<T>(x);\n}\n\nThe template parameter(s) specifying the function return type can be deduced by the compiler from the context in which the function is called:\n\ntemplate <typename T>\nT Foo(auto x)\n{\n    return reinterpret_cast<T>(x);\n}\n\nvoid Bar(uint23 x)\n{\n}\n\nvoid Run()\n{\n    Bar(Foo(true));\n}\n\nThe compiler can deduce expected return type of a function template when the result of the function call is used in one of the following contexts:\n\n- When result is passed as an argument to a function, the expected return type is deduced from the type of corresponding function parameter: void Foo(uint8[4] x) { } template <typename T, auto N> T[N] Bar() { return {}; } void Run() { Foo(Bar()); }\n- When result is assigned to a variable the return type is deduced from the type of the variable: template <typename T> T Foo() { static if (T == bool) return true; else return 42; } void Run() { uint32[10] x; x[2] = Foo(); }\n- When result is used as an initialization value in variable declaration, the return type is deduced from the declared type of the variable: void Run() { uint32[16] x = pipelined_map(10, [](index_t<10> x) { return x; }); }\n\nWhen result is passed as an argument to a function, the expected return type is deduced from the type of corresponding function parameter:\n\nvoid Foo(uint8[4] x)\n{\n}\n\ntemplate <typename T, auto N>\nT[N] Bar()\n{\n    return {};\n}\n\nvoid Run()\n{\n    Foo(Bar());\n}\n\nWhen result is assigned to a variable the return type is deduced from the type of the variable:\n\ntemplate <typename T>\nT Foo()\n{\n    static if (T == bool)\n        return true;\n    else\n        return 42;\n}\n\nvoid Run()\n{\n    uint32[10] x;\n\n    x[2] = Foo();\n}\n\nWhen result is used as an initialization value in variable declaration, the return type is deduced from the declared type of the variable:\n\nvoid Run()\n{\n    uint32[16] x = pipelined_map(10, [](index_t<10> x)\n        {\n            return x;\n        });\n}\n\n\nLambdas\n\nLambdas are unnamed, inline, local functions that allow defining pieces of logic in-line. They are particularly useful for one-off functions that don’t need to be named or reused. Here’s the basic syntax for defining a lambda:\n\n[](uint32 x, uint32 y) -> uint32\n{\n    return x + y;\n}\n\nThe return type of a lambda can be explicitly specified or omitted. If omitted, it is inferred by the compiler based on the return statement in the lambda’s body. Lambdas can also capture values from their surrounding scope. Captures are copies of captured values.\n\n\nClosures\n\nClosures are special values that encapsulate a function with a set of captured values from their defining scope. They can be called like functions, but they can also be stored and passed around like regular values. Closures are particularly useful in situations where a context needs to be carried with a function. Here’s an example of a closure:\n\nvoid Run(uint32 a)\n{\n    auto fn = [a](uint32 x, uint32 y) -> uint32\n    {\n        return a - (x + y);\n    };\n\n    auto fn2 = [fn]()\n    {\n        fn(10, 20);\n    };\n\n    fn2();\n}\n\nIn the above example, the closure fn captures the value\n######################\nOutput:', 'kwargs': {}}
04:25:48,238 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29242, Requested 2929. Please try again in 4.342s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:48,239 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'hardware that is used to execute the function’s logic. Multiple calls to a function may either share the same hardware or be inlined as completely independent pieces of hardware. The choice between sharing hardware and inlining has implications for performance and correctness.\n\n\nFunction inlining\n\nBy default, functions with multiple call sites are not inlined, meaning that callers share the same piece of hardware for the function implementation, potentially leading to queueing and contention. On the other hand, functions with only one call site are by default inlined. This means that the hardware is instantiated at the call site, and there is no queue to access it. The default behavior can be modified using function modifiers inline and noninline .\n\n\nGeneric functions\n\nIn Sandpiper, functions can be defined in a generic way, without assuming specific parameter types. This allows writing more versatile functions that can operate on different data types as long as the required operations are defined for those types. Here’s an example of a generic function:\n\ninline auto add(auto x, auto y)\n{\n    return x + y;\n}\n\nThe function add can be used for any types of arguments, as long as the + operator is defined for those types. When a generic function is called, the compiler creates an instance of the function for each set of parameter types used. For example, calling add(10, 17) would create the following instance:\n\ninline uint6 ?add$uint@4$uint@5(uint4 x, uint5 y)\n{\n    return x + y;\n}\n\n\nFunction templates\n\nFunction templates provide a more general way to declare generic functions. Templates define a list of parameters, which can be both types and values. When a template function is called, template arguments can be specified explicitly, or they may be deduced from the arguments passed to the function:\n\ntemplate <typename T, auto N>\nvoid Foo(T[N] a)\n{\n}\n\nvoid Run()\n{\n    int6[8] a;\n\n    // Deduced Foo<int6, 8>\n    Foo(a);\n}\n\n\nReturn type polymorphism\n\nTemplates can be used to define functions that are polymorphic on the return type:\n\ntemplate <typename T>\nT Foo(auto x)\n{\n    return reinterpret_cast<T>(x);\n}\n\nThe template parameter(s) specifying the function return type can be deduced by the compiler from the context in which the function is called:\n\ntemplate <typename T>\nT Foo(auto x)\n{\n    return reinterpret_cast<T>(x);\n}\n\nvoid Bar(uint23 x)\n{\n}\n\nvoid Run()\n{\n    Bar(Foo(true));\n}\n\nThe compiler can deduce expected return type of a function template when the result of the function call is used in one of the following contexts:\n\n- When result is passed as an argument to a function, the expected return type is deduced from the type of corresponding function parameter: void Foo(uint8[4] x) { } template <typename T, auto N> T[N] Bar() { return {}; } void Run() { Foo(Bar()); }\n- When result is assigned to a variable the return type is deduced from the type of the variable: template <typename T> T Foo() { static if (T == bool) return true; else return 42; } void Run() { uint32[10] x; x[2] = Foo(); }\n- When result is used as an initialization value in variable declaration, the return type is deduced from the declared type of the variable: void Run() { uint32[16] x = pipelined_map(10, [](index_t<10> x) { return x; }); }\n\nWhen result is passed as an argument to a function, the expected return type is deduced from the type of corresponding function parameter:\n\nvoid Foo(uint8[4] x)\n{\n}\n\ntemplate <typename T, auto N>\nT[N] Bar()\n{\n    return {};\n}\n\nvoid Run()\n{\n    Foo(Bar());\n}\n\nWhen result is assigned to a variable the return type is deduced from the type of the variable:\n\ntemplate <typename T>\nT Foo()\n{\n    static if (T == bool)\n        return true;\n    else\n        return 42;\n}\n\nvoid Run()\n{\n    uint32[10] x;\n\n    x[2] = Foo();\n}\n\nWhen result is used as an initialization value in variable declaration, the return type is deduced from the declared type of the variable:\n\nvoid Run()\n{\n    uint32[16] x = pipelined_map(10, [](index_t<10> x)\n        {\n            return x;\n        });\n}\n\n\nLambdas\n\nLambdas are unnamed, inline, local functions that allow defining pieces of logic in-line. They are particularly useful for one-off functions that don’t need to be named or reused. Here’s the basic syntax for defining a lambda:\n\n[](uint32 x, uint32 y) -> uint32\n{\n    return x + y;\n}\n\nThe return type of a lambda can be explicitly specified or omitted. If omitted, it is inferred by the compiler based on the return statement in the lambda’s body. Lambdas can also capture values from their surrounding scope. Captures are copies of captured values.\n\n\nClosures\n\nClosures are special values that encapsulate a function with a set of captured values from their defining scope. They can be called like functions, but they can also be stored and passed around like regular values. Closures are particularly useful in situations where a context needs to be carried with a function. Here’s an example of a closure:\n\nvoid Run(uint32 a)\n{\n    auto fn = [a](uint32 x, uint32 y) -> uint32\n    {\n        return a - (x + y);\n    };\n\n    auto fn2 = [fn]()\n    {\n        fn(10, 20);\n    };\n\n    fn2();\n}\n\nIn the above example, the closure fn captures the value'}
04:25:48,244 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,245 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: template <typename T, auto N>\ninline auto reduce(T[N] a, (T, T) -> T fn)\n{\n    static assert((N & (N-1)) == 0);\n\n    static if (N == 1)\n    {\n        return a[0];\n    }\n    else\n    {\n        const auto b = split(a);\n        return fn(reduce(b.first, fn), reduce(b.second, fn));\n    }\n}\n\ntemplate <typename T, auto N>\ninline auto maximum(T[N] a)\n{\n    return reduce(a, [](uint32 x, uint32 y)\n    {\n        return x > y ? x : y;\n    });\n}\n\nAnother form of static recursion is recursive instantiation of object hierarchies.\n\ntemplate <auto N, template <auto> typename Node>\nclass List\n{\n    public:\n        void Do()\n        {\n            node.Do();\n            static if (N > 1)\n            {\n               next.Do();\n            }\n        }\n    private:\n        Node<N-1> node;\n\n        static if (N > 1)\n        {\n            List<N - 1, Node> next;\n        }\n}\n\ntemplate <auto N>\nclass Worker\n{\n    public:\n       void Do()\n       {\n       }\n}\n\nList<7, Worker> workers;\n\n\nType comparison\n\nTypes can be compared for equality and subtype relationship. When applied to types the comparison operators have the following semantics:\n\n- == true if operands are equal types\n- <= true if left operand is subtype of the right operand\n- < true if left operand is subtype of the right operand but is not the same type\n\nNote that the comparison is about types, not symbols specifying types. For example uint8 , uint<8> , index<200> and uint8_t all specify the same type (the last two are type aliases defined in the standard library).\n\nType comparisons are evaluated at compile time and can be used in contexts like static if or static assert . A common usage scenario is specialization of templates based on type parameters, e.g.:\n\ntemplate <typename T>\ninline void Go(() -> T fn)\n{\n    static if (T == void)\n    {\n        // ...\n    }\n    else\n    {\n        // ...\n    }\n}\n\nAny kind of type specifier can be used in type comparison expression, e.g.:\n\n- built-in types uint32 == uint<32>\n- names of user defined types struct Foo{} struct Bar() Foo != Bar\n- type aliases uint32_t == uint32\n- instances of type templates intex_t<10> == uint4\n- template type parameters template <typename T> void Go(uint32 x) { static if (T == void) {} }\n- arrays bool[10] != bool[11]\n- function types (uint33) -> uint9 < (uint32) -> uint10\n- decltype declarations decltype(Foo::Run) == (uint32) -> bool\n\nbuilt-in types\n\nuint32 == uint<32>\n\nnames of user defined types\n\nstruct Foo{}\nstruct Bar()\n\nFoo != Bar\n\ntype aliases\n\nuint32_t == uint32\n\ninstances of type templates\n\nintex_t<10> == uint4\n\ntemplate type parameters\n\ntemplate <typename T>\nvoid Go(uint32 x)\n{\n    static if (T == void)\n    {}\n}\n\narrays\n\nbool[10] != bool[11]\n\nfunction types\n\n(uint33) -> uint9 < (uint32) -> uint10\n\ndecltype declarations\n\ndecltype(Foo::Run) == (uint32) -> bool\n\n\nModules\n\nSandpiper uses modules to package reusable code. A module provides functionality through the types, functions, and constants that make up its public interface. Collections of modules can be organized into libraries.\n\n\nUsing modules\n\nThe first way you are likely to encounter modules is by importing a module from the standard library. Modules are imported using an import statement.\n\nimport data.array\n\nModules provide functionality via a set of exposed symbols that can be used after a module has been imported. For example, the data.array module exposes a function sum to compute the sum of an array of integers.\n\nimport data.array\n\nuint32 func(uint32[4] ary)\n{\n    return sum<uint32>(ary);\n}\n\nThe name of a module must correspond to the directory and filename in which the module is defined. For example, a module foo.bar must be defined in a file foo/bar.pd relative to a directory specified as a source for imported modules (specified with the --import-dir compiler switch). The --import-dir switch can be used multiple times to specify multiple search locations for modules.\n\nEach module is associated with a unique namespace whose name is derived from the module name. This namespace is never directly referenced in Sandpiper source code (but it is present in the interface to generated hardware). All symbols declared within a module are placed into the associated namespace.\n\nImporting a module makes all symbols exposed by the module visible within the importing file. This may lead to name ambiguity if multiple imported modules expose symbols with identical names, or importing file declares a symbol whose name conflicts with a symbol from an imported module. Name ambiguities can be resolved using qualified imports:\n\nimport numeric.float32 as F32\nimport numeric.float64 as F64\n\nvoid func(uint32 a)\n{\n    auto x = F32::from_uint<32>(a);\n\n    auto y = F64::from_uint<32>(a);\n}\n\nIn the example above, the numeric.float32 and numeric.float64 modules expose many symbols that have the same names; to resolve these conflicts they are imported with the F32 and F64 qualifiers which can then be used to disambiguate the conflicting names.\n\nIt is important to note that mere importing of modules that expose symbols with identical names doesn’t create conflicts. A name ambiguity occurs only when referencing a name that is defined in multiple modules. If only some names in an imported module\n######################\nOutput:', 'kwargs': {}}
04:25:48,245 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29237, Requested 2935. Please try again in 4.344s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:48,246 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'template <typename T, auto N>\ninline auto reduce(T[N] a, (T, T) -> T fn)\n{\n    static assert((N & (N-1)) == 0);\n\n    static if (N == 1)\n    {\n        return a[0];\n    }\n    else\n    {\n        const auto b = split(a);\n        return fn(reduce(b.first, fn), reduce(b.second, fn));\n    }\n}\n\ntemplate <typename T, auto N>\ninline auto maximum(T[N] a)\n{\n    return reduce(a, [](uint32 x, uint32 y)\n    {\n        return x > y ? x : y;\n    });\n}\n\nAnother form of static recursion is recursive instantiation of object hierarchies.\n\ntemplate <auto N, template <auto> typename Node>\nclass List\n{\n    public:\n        void Do()\n        {\n            node.Do();\n            static if (N > 1)\n            {\n               next.Do();\n            }\n        }\n    private:\n        Node<N-1> node;\n\n        static if (N > 1)\n        {\n            List<N - 1, Node> next;\n        }\n}\n\ntemplate <auto N>\nclass Worker\n{\n    public:\n       void Do()\n       {\n       }\n}\n\nList<7, Worker> workers;\n\n\nType comparison\n\nTypes can be compared for equality and subtype relationship. When applied to types the comparison operators have the following semantics:\n\n- == true if operands are equal types\n- <= true if left operand is subtype of the right operand\n- < true if left operand is subtype of the right operand but is not the same type\n\nNote that the comparison is about types, not symbols specifying types. For example uint8 , uint<8> , index<200> and uint8_t all specify the same type (the last two are type aliases defined in the standard library).\n\nType comparisons are evaluated at compile time and can be used in contexts like static if or static assert . A common usage scenario is specialization of templates based on type parameters, e.g.:\n\ntemplate <typename T>\ninline void Go(() -> T fn)\n{\n    static if (T == void)\n    {\n        // ...\n    }\n    else\n    {\n        // ...\n    }\n}\n\nAny kind of type specifier can be used in type comparison expression, e.g.:\n\n- built-in types uint32 == uint<32>\n- names of user defined types struct Foo{} struct Bar() Foo != Bar\n- type aliases uint32_t == uint32\n- instances of type templates intex_t<10> == uint4\n- template type parameters template <typename T> void Go(uint32 x) { static if (T == void) {} }\n- arrays bool[10] != bool[11]\n- function types (uint33) -> uint9 < (uint32) -> uint10\n- decltype declarations decltype(Foo::Run) == (uint32) -> bool\n\nbuilt-in types\n\nuint32 == uint<32>\n\nnames of user defined types\n\nstruct Foo{}\nstruct Bar()\n\nFoo != Bar\n\ntype aliases\n\nuint32_t == uint32\n\ninstances of type templates\n\nintex_t<10> == uint4\n\ntemplate type parameters\n\ntemplate <typename T>\nvoid Go(uint32 x)\n{\n    static if (T == void)\n    {}\n}\n\narrays\n\nbool[10] != bool[11]\n\nfunction types\n\n(uint33) -> uint9 < (uint32) -> uint10\n\ndecltype declarations\n\ndecltype(Foo::Run) == (uint32) -> bool\n\n\nModules\n\nSandpiper uses modules to package reusable code. A module provides functionality through the types, functions, and constants that make up its public interface. Collections of modules can be organized into libraries.\n\n\nUsing modules\n\nThe first way you are likely to encounter modules is by importing a module from the standard library. Modules are imported using an import statement.\n\nimport data.array\n\nModules provide functionality via a set of exposed symbols that can be used after a module has been imported. For example, the data.array module exposes a function sum to compute the sum of an array of integers.\n\nimport data.array\n\nuint32 func(uint32[4] ary)\n{\n    return sum<uint32>(ary);\n}\n\nThe name of a module must correspond to the directory and filename in which the module is defined. For example, a module foo.bar must be defined in a file foo/bar.pd relative to a directory specified as a source for imported modules (specified with the --import-dir compiler switch). The --import-dir switch can be used multiple times to specify multiple search locations for modules.\n\nEach module is associated with a unique namespace whose name is derived from the module name. This namespace is never directly referenced in Sandpiper source code (but it is present in the interface to generated hardware). All symbols declared within a module are placed into the associated namespace.\n\nImporting a module makes all symbols exposed by the module visible within the importing file. This may lead to name ambiguity if multiple imported modules expose symbols with identical names, or importing file declares a symbol whose name conflicts with a symbol from an imported module. Name ambiguities can be resolved using qualified imports:\n\nimport numeric.float32 as F32\nimport numeric.float64 as F64\n\nvoid func(uint32 a)\n{\n    auto x = F32::from_uint<32>(a);\n\n    auto y = F64::from_uint<32>(a);\n}\n\nIn the example above, the numeric.float32 and numeric.float64 modules expose many symbols that have the same names; to resolve these conflicts they are imported with the F32 and F64 qualifiers which can then be used to disambiguate the conflicting names.\n\nIt is important to note that mere importing of modules that expose symbols with identical names doesn’t create conflicts. A name ambiguity occurs only when referencing a name that is defined in multiple modules. If only some names in an imported module'}
04:25:48,248 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,249 openai._base_client INFO Retrying request to /chat/completions in 4.344000 seconds
04:25:48,282 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,282 openai._base_client INFO Retrying request to /chat/completions in 4.336000 seconds
04:25:48,310 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,310 openai._base_client INFO Retrying request to /chat/completions in 4.370000 seconds
04:25:48,344 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,345 openai._base_client INFO Retrying request to /chat/completions in 4.356000 seconds
04:25:48,354 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,355 openai._base_client INFO Retrying request to /chat/completions in 4.332000 seconds
04:25:48,356 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,357 openai._base_client INFO Retrying request to /chat/completions in 4.364000 seconds
04:25:48,362 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,363 openai._base_client INFO Retrying request to /chat/completions in 4.055000 seconds
04:25:48,381 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,381 openai._base_client INFO Retrying request to /chat/completions in 4.344000 seconds
04:25:48,403 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,403 openai._base_client INFO Retrying request to /chat/completions in 4.362000 seconds
04:25:48,465 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,465 openai._base_client INFO Retrying request to /chat/completions in 4.338000 seconds
04:25:48,466 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,466 openai._base_client INFO Retrying request to /chat/completions in 4.362000 seconds
04:25:48,519 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,520 openai._base_client INFO Retrying request to /chat/completions in 4.352000 seconds
04:25:48,579 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,579 openai._base_client INFO Retrying request to /chat/completions in 4.342000 seconds
04:25:48,605 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,606 openai._base_client INFO Retrying request to /chat/completions in 4.372000 seconds
04:25:48,623 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,624 openai._base_client INFO Retrying request to /chat/completions in 4.358000 seconds
04:25:48,634 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,634 openai._base_client INFO Retrying request to /chat/completions in 4.362000 seconds
04:25:48,751 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,751 openai._base_client INFO Retrying request to /chat/completions in 4.366000 seconds
04:25:48,925 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:48,926 openai._base_client INFO Retrying request to /chat/completions in 4.360000 seconds
04:25:49,157 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:49,158 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: numIter = 4;\n\n// prints: 0, 1, 2, 3\npipelined_for(numIter, [](uint2 thread_id)\n{\n    println(thread_id);\n});\n\n\npipelined_do\n\npipelined_do creates 2^N threads, each of which execute the provided function as long as the provided function returns true.\n\n// 8 threads will execute the lambda body forever\npipelined_do([](uint3 thread_id)\n{\n    return true;\n});\n\n\npipelined_map\n\npipelined_map creates N threads, each of which executes the provided function one time. The return values from all threads are combined into an array that is returned from pipelined_map . The number of elements in the combined array is fixed at compile time. The thread count is determined at run time. If the thread count is smaller than the array size, then the upper elements of the returned array are undefined. The thread count must not be larger than the array size.\n\nauto numIter = 4;\n\nuint32[4] result = pipelined_map<4>(\n    numIter,\n    [](uint2 thread_id) -> uint32\n{\n    return thread_id + 3;\n});\n\n// result contains { 3, 4, 5, 6 }\n\n\npipelined_last\n\npipelined_last creates N threads, each of which executes the provided function one time. The return value from the last thread is returned from pipelined_last .\n\nauto numIter = 4;\n\nuint32 result = pipelined_last(numIter, [](uint2 thread_id)\n{\n    return thread_id + 3;\n});\n\n// result is 6\n\n\nasync_exec\n\nasync_exec creates a thread which starts execution in the specified function.\n\nasync_exec([]()\n{\n    println("executing the lambda asynchronously");\n});\n\nNote that if that are no ordering guarantees between multiple asynchronous call sites to the same function:\n\nvoid common_function(uint5 tid, uint32 call_site)\n{\n    println(tid, call_site);\n}\n\nvoid F()\n{\n    pipelined_for(2, [](uint5 tid)\n    {\n        async_exec([tid]() { common_function(tid, 1); });\n\n        async_exec([tid]() { common_function(tid, 2); });\n    });\n}\n\n// Valid output sequences:\n//\n// 0, 1\n// 0, 2\n// 1, 1\n// 1, 2\n//\n// and:\n//\n// 0, 2\n// 0, 1\n// 1, 2\n// 1, 1\n//\n\n\nSpatial computing\n\nThe Sandpiper compiler translates imperative source code into spatial hardware. The structure of the generated hardware determines how much parallelism can be achieved. The circuits generated by Sandpiper comprise:\n\n- A set of hardware operators\n- Connectivity between the operators\n- Grouping of operators into stages\n- A schedule that determines the time at which stages perform their computation (relative to other stages)\n\nEach hardware operator is specialized: it can only perform one simple task (like integer addition, bitwise XOR, or reading from an array). The Sandpiper compiler performs non-trivial decompositions to optimize the generated hardware. For example, a wide integer addition in the source code may be translated into multiple narrow hardware adders to keep each hardware operator small and fast.\n\nHardware operators are grouped into stages. Multiple operators can be assigned to the same stage, even if there is a dependency between them. For example, consider the following Sandpiper source:\n\ne = ((a + b) & c) - d;\n\nThis could translate into 3 hardware operators:\n\nop1: t1 = a + b\nop2: t2 = t1 & c\nop3: e = t2 - d\n\nWhich could be grouped into two stages:\n\nstage0: op1 op2\nstage1: op3\n\nThere is a relationship between Sandpiper threads and Sandpiper-generated circuits. A Sandpiper thread corresponds to data flowing through the stages in a circuit. A thread physically moves through the circuit like how a thread logically moves through the statements in the imperative source code. The local variables associated with a thread are the data flowing between operators in the generated hardware. The movement of threads through a circuit occurs in discrete units of time (clock cycles).\n\nWhen executing straight-line code, a thread moves through a linear list of stages in order. A list of stages that are always executed in the same order is called a pipeline. Sandpiper control flow constructs cause threads to conditionally move between stages.\n\nFor example, the following code:\n\nuint32 sum = 0;\n\nfor (const auto i : 4)\n{\n    uint32 x = i + 4;\n    uint32 y = x * 3;\n    sum += y;\n}\n\nprintln(sum);\n\ncould be decomposed into the following stages:\n\nstage0: sum = 0; <jump to stage 1>\n\nstage1: x = i + 4;\nstage2: y = x * 3;\nstage3: sum += y; <jump to either stage 1 or stage 4>\n\nstage4: println(sum)\n\nThe following properties hold at all possible moments in time:\n\n- A particular thread will never be executing in more than one stage\n- A particular stage will never be executing for more than one thread\n\nA few interesting consequences can be derived from these properties. First, when multiple threads converge from distinct paths onto a shared path through the circuit then some threads must wait for their turn to execute the shared stage. Imagine two threads are executing the example above, and at a specific moment in time one thread is at stage0 , while another is at stage3 (ready to loop back). Both threads need to execute stage1 next, but stage1 can only service one thread at a time. The generated hardware will contain a queue\n######################\nOutput:', 'kwargs': {}}
04:25:49,158 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 28783, Requested 2892. Please try again in 3.35s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:49,159 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'numIter = 4;\n\n// prints: 0, 1, 2, 3\npipelined_for(numIter, [](uint2 thread_id)\n{\n    println(thread_id);\n});\n\n\npipelined_do\n\npipelined_do creates 2^N threads, each of which execute the provided function as long as the provided function returns true.\n\n// 8 threads will execute the lambda body forever\npipelined_do([](uint3 thread_id)\n{\n    return true;\n});\n\n\npipelined_map\n\npipelined_map creates N threads, each of which executes the provided function one time. The return values from all threads are combined into an array that is returned from pipelined_map . The number of elements in the combined array is fixed at compile time. The thread count is determined at run time. If the thread count is smaller than the array size, then the upper elements of the returned array are undefined. The thread count must not be larger than the array size.\n\nauto numIter = 4;\n\nuint32[4] result = pipelined_map<4>(\n    numIter,\n    [](uint2 thread_id) -> uint32\n{\n    return thread_id + 3;\n});\n\n// result contains { 3, 4, 5, 6 }\n\n\npipelined_last\n\npipelined_last creates N threads, each of which executes the provided function one time. The return value from the last thread is returned from pipelined_last .\n\nauto numIter = 4;\n\nuint32 result = pipelined_last(numIter, [](uint2 thread_id)\n{\n    return thread_id + 3;\n});\n\n// result is 6\n\n\nasync_exec\n\nasync_exec creates a thread which starts execution in the specified function.\n\nasync_exec([]()\n{\n    println("executing the lambda asynchronously");\n});\n\nNote that if that are no ordering guarantees between multiple asynchronous call sites to the same function:\n\nvoid common_function(uint5 tid, uint32 call_site)\n{\n    println(tid, call_site);\n}\n\nvoid F()\n{\n    pipelined_for(2, [](uint5 tid)\n    {\n        async_exec([tid]() { common_function(tid, 1); });\n\n        async_exec([tid]() { common_function(tid, 2); });\n    });\n}\n\n// Valid output sequences:\n//\n// 0, 1\n// 0, 2\n// 1, 1\n// 1, 2\n//\n// and:\n//\n// 0, 2\n// 0, 1\n// 1, 2\n// 1, 1\n//\n\n\nSpatial computing\n\nThe Sandpiper compiler translates imperative source code into spatial hardware. The structure of the generated hardware determines how much parallelism can be achieved. The circuits generated by Sandpiper comprise:\n\n- A set of hardware operators\n- Connectivity between the operators\n- Grouping of operators into stages\n- A schedule that determines the time at which stages perform their computation (relative to other stages)\n\nEach hardware operator is specialized: it can only perform one simple task (like integer addition, bitwise XOR, or reading from an array). The Sandpiper compiler performs non-trivial decompositions to optimize the generated hardware. For example, a wide integer addition in the source code may be translated into multiple narrow hardware adders to keep each hardware operator small and fast.\n\nHardware operators are grouped into stages. Multiple operators can be assigned to the same stage, even if there is a dependency between them. For example, consider the following Sandpiper source:\n\ne = ((a + b) & c) - d;\n\nThis could translate into 3 hardware operators:\n\nop1: t1 = a + b\nop2: t2 = t1 & c\nop3: e = t2 - d\n\nWhich could be grouped into two stages:\n\nstage0: op1 op2\nstage1: op3\n\nThere is a relationship between Sandpiper threads and Sandpiper-generated circuits. A Sandpiper thread corresponds to data flowing through the stages in a circuit. A thread physically moves through the circuit like how a thread logically moves through the statements in the imperative source code. The local variables associated with a thread are the data flowing between operators in the generated hardware. The movement of threads through a circuit occurs in discrete units of time (clock cycles).\n\nWhen executing straight-line code, a thread moves through a linear list of stages in order. A list of stages that are always executed in the same order is called a pipeline. Sandpiper control flow constructs cause threads to conditionally move between stages.\n\nFor example, the following code:\n\nuint32 sum = 0;\n\nfor (const auto i : 4)\n{\n    uint32 x = i + 4;\n    uint32 y = x * 3;\n    sum += y;\n}\n\nprintln(sum);\n\ncould be decomposed into the following stages:\n\nstage0: sum = 0; <jump to stage 1>\n\nstage1: x = i + 4;\nstage2: y = x * 3;\nstage3: sum += y; <jump to either stage 1 or stage 4>\n\nstage4: println(sum)\n\nThe following properties hold at all possible moments in time:\n\n- A particular thread will never be executing in more than one stage\n- A particular stage will never be executing for more than one thread\n\nA few interesting consequences can be derived from these properties. First, when multiple threads converge from distinct paths onto a shared path through the circuit then some threads must wait for their turn to execute the shared stage. Imagine two threads are executing the example above, and at a specific moment in time one thread is at stage0 , while another is at stage3 (ready to loop back). Both threads need to execute stage1 next, but stage1 can only service one thread at a time. The generated hardware will contain a queue'}
04:25:49,206 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:49,206 openai._base_client INFO Retrying request to /chat/completions in 4.062000 seconds
04:25:49,307 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:49,307 openai._base_client INFO Retrying request to /chat/completions in 4.338000 seconds
04:25:52,635 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,636 openai._base_client INFO Retrying request to /chat/completions in 5.600000 seconds
04:25:52,699 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,700 openai._base_client INFO Retrying request to /chat/completions in 5.586000 seconds
04:25:52,728 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,729 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: 1)]] :\n\nWithout [[schedule(1)]] :\n\nThe atomic keyword is a synonym for [[schedule(1)]] :\n\n// This variable is shared among threads\nstatic uint32 _counter = 0;\n\n// Only 1 thread allowed in this block at a time\natomic\n{\n    // Read-modify-write the shared variable\n    _counter = _counter + 2;\n}\n\nIt is common practice in Sandpiper to read-modify-write the contents of memories in a [[schedule(N)]] block:\n\nmemory<uint32, 512> g_histogram;\n\nvoid update_histogram(uint32 src)\n{\n    atomic\n    {\n        // atomically read-increment-write\n        g_histogram[src]++;\n    }\n}\n\nThere is no need to wrap a read or write of a single variable in [[schedule(N)]]/atomic . Accesses to a single variable (including a memory) are always atomic. For example, there is no need to use atomic in the following code when writing to _shared_var .\n\nauto numIter = 256;\n\npipelined_for(numIter, [](uint32 thread_id)\n{\n    static uint32 _shared_var;\n\n    _shared_var = thread_id;\n});\n\n\nNesting scheduling constraints\n\nSchedule blocks can always be nested if the nested, inner schedule block is equally or less restrictive than the outer schedule block. A [[schedule(N)]] block is less restrictive than [[schedule(M)]] block if N > M . In these cases, the nested schedule block is ignored because the outer, more restrictive schedule takes precedence. For example:\n\n[[schedule(2)]]\n{\n    // No more than 2 threads can be executing this block\n\n    [[schedule(3)]]\n    {\n        // The schedule(3) indicates that no more than 3 threads can be\n        // executing this block. However, the outer schedule(2) indicates\n        // that no more than 2 threads can be executing this block and so\n        // the inner schedule(3) is ignored.\n    }\n\n    [[schedule(2)]]\n    {\n        // Similarly, nesting a schedule(2) is redundant and is also ignored.\n    }\n}\n\nA more restrictive schedule block can be nested within another schedule block under the following restrictions: - Memory accesses cannot occur in the outer schedule block For example:\n\n// Memory\nmemory<uint32, 32> g_mem;\n\nvoid Foo()\n{\n    [[schedule(3)]]\n    {\n        // Memory accesses are not allowed here because of the atomic block below\n        // g_mem[0]++;\n\n        atomic\n        {\n            // Memory accesses are allowed here\n            g_mem[0]++;\n        }\n\n        [[schedule(2)]]\n        {\n            atomic\n            {\n                // Multiple nestings are also allowed\n                g_mem[0]++;\n            }\n        }\n    }\n\n    // Memory accesses are always allowed outside of any schedule blocks\n    g_mem[0]++;\n}\n\n\nGlobal accesses in schedule blocks\n\nGlobal variables in a schedule block will only read from global state once per thread, typically at the start of the schedule block. Subsequent reads will use a local copy. Similarly, global variables in a schedule block will only write to global state once per thread, typically at the end of the schedule block. Earlier writes will write to a local copy before the final write to global state. For example:\n\nuint32 g_var;\n\nvoid Foo()\n{\n    [[schedule(4)]]\n    {\n        // First read will access global state and store it into a thread-local\n        // register.\n        uint32 x = g_var;\n\n        // Second read does not access global state. Instead, it uses the\n        // thread-local copy from above.\n        uint32 y = g_var;\n\n        // This is not the last write to g_var and does not write to global\n        // state. I.e., other threads will not see g_var = 1. This instead\n        // writes to the thread-local copy.\n        g_var = 1;\n\n        // This read does not access global state. It will read from the\n        // thread-local copy which has a value of 1.\n        uint32 z = g_var;\n\n        // This is the final write to g_var and will be written to global state.\n        // Other threads will only see g_var = 2.\n        g_var = 2;\n    }\n}\n\nFor nested schedule blocks, this behavior is also applied to each section of outer schedule blocks that does not contain an inner schedule block. For example:\n\nvoid Foo()\n{\n    [[schedule(8)]]\n    {\n        // Read from global state\n\n        // Compute on thread-local copy\n\n        // Write to global state\n\n        [[schedule(4)]]\n        {\n            // Read from global state\n\n            // Compute on thread-local copy\n\n            // Write to global state\n        }\n        // Read from global state\n\n        // Compute on thread-local copy\n\n        // Write to global state\n    }\n}\n\n\natomic do\n\nAn atomic do loop causes the calling thread to spin until the loop condition evaluates to false.\n\nstatic uint32 x; // shared variable\nuint32 y; // local variable\n\n// Loop until some other thread to set x to a value larger than y\natomic do\n{\n} while (x <= y)\n\natomic do has ‘head-of-line blocking’, which means that while one thread is waiting for the loop condition to return true, no other thread has a chance to evaluate the loop.\n\nA common pattern is to use atomic do with an inline function. This is a safe way to update shared state within a atomic do :\n\n// A shared variable\nbool _locked = false;\n\ninline bool test_and_set()\n{\n    // The read-modify-write of _locked is atomic\n    // because test_and_set is called within atomic do\n    bool result = false;\n\n    if (!_locked)\n    {\n        _\n######################\nOutput:', 'kwargs': {}}
04:25:52,729 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29843, Requested 2948. Please try again in 5.582s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:52,731 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': '1)]] :\n\nWithout [[schedule(1)]] :\n\nThe atomic keyword is a synonym for [[schedule(1)]] :\n\n// This variable is shared among threads\nstatic uint32 _counter = 0;\n\n// Only 1 thread allowed in this block at a time\natomic\n{\n    // Read-modify-write the shared variable\n    _counter = _counter + 2;\n}\n\nIt is common practice in Sandpiper to read-modify-write the contents of memories in a [[schedule(N)]] block:\n\nmemory<uint32, 512> g_histogram;\n\nvoid update_histogram(uint32 src)\n{\n    atomic\n    {\n        // atomically read-increment-write\n        g_histogram[src]++;\n    }\n}\n\nThere is no need to wrap a read or write of a single variable in [[schedule(N)]]/atomic . Accesses to a single variable (including a memory) are always atomic. For example, there is no need to use atomic in the following code when writing to _shared_var .\n\nauto numIter = 256;\n\npipelined_for(numIter, [](uint32 thread_id)\n{\n    static uint32 _shared_var;\n\n    _shared_var = thread_id;\n});\n\n\nNesting scheduling constraints\n\nSchedule blocks can always be nested if the nested, inner schedule block is equally or less restrictive than the outer schedule block. A [[schedule(N)]] block is less restrictive than [[schedule(M)]] block if N > M . In these cases, the nested schedule block is ignored because the outer, more restrictive schedule takes precedence. For example:\n\n[[schedule(2)]]\n{\n    // No more than 2 threads can be executing this block\n\n    [[schedule(3)]]\n    {\n        // The schedule(3) indicates that no more than 3 threads can be\n        // executing this block. However, the outer schedule(2) indicates\n        // that no more than 2 threads can be executing this block and so\n        // the inner schedule(3) is ignored.\n    }\n\n    [[schedule(2)]]\n    {\n        // Similarly, nesting a schedule(2) is redundant and is also ignored.\n    }\n}\n\nA more restrictive schedule block can be nested within another schedule block under the following restrictions: - Memory accesses cannot occur in the outer schedule block For example:\n\n// Memory\nmemory<uint32, 32> g_mem;\n\nvoid Foo()\n{\n    [[schedule(3)]]\n    {\n        // Memory accesses are not allowed here because of the atomic block below\n        // g_mem[0]++;\n\n        atomic\n        {\n            // Memory accesses are allowed here\n            g_mem[0]++;\n        }\n\n        [[schedule(2)]]\n        {\n            atomic\n            {\n                // Multiple nestings are also allowed\n                g_mem[0]++;\n            }\n        }\n    }\n\n    // Memory accesses are always allowed outside of any schedule blocks\n    g_mem[0]++;\n}\n\n\nGlobal accesses in schedule blocks\n\nGlobal variables in a schedule block will only read from global state once per thread, typically at the start of the schedule block. Subsequent reads will use a local copy. Similarly, global variables in a schedule block will only write to global state once per thread, typically at the end of the schedule block. Earlier writes will write to a local copy before the final write to global state. For example:\n\nuint32 g_var;\n\nvoid Foo()\n{\n    [[schedule(4)]]\n    {\n        // First read will access global state and store it into a thread-local\n        // register.\n        uint32 x = g_var;\n\n        // Second read does not access global state. Instead, it uses the\n        // thread-local copy from above.\n        uint32 y = g_var;\n\n        // This is not the last write to g_var and does not write to global\n        // state. I.e., other threads will not see g_var = 1. This instead\n        // writes to the thread-local copy.\n        g_var = 1;\n\n        // This read does not access global state. It will read from the\n        // thread-local copy which has a value of 1.\n        uint32 z = g_var;\n\n        // This is the final write to g_var and will be written to global state.\n        // Other threads will only see g_var = 2.\n        g_var = 2;\n    }\n}\n\nFor nested schedule blocks, this behavior is also applied to each section of outer schedule blocks that does not contain an inner schedule block. For example:\n\nvoid Foo()\n{\n    [[schedule(8)]]\n    {\n        // Read from global state\n\n        // Compute on thread-local copy\n\n        // Write to global state\n\n        [[schedule(4)]]\n        {\n            // Read from global state\n\n            // Compute on thread-local copy\n\n            // Write to global state\n        }\n        // Read from global state\n\n        // Compute on thread-local copy\n\n        // Write to global state\n    }\n}\n\n\natomic do\n\nAn atomic do loop causes the calling thread to spin until the loop condition evaluates to false.\n\nstatic uint32 x; // shared variable\nuint32 y; // local variable\n\n// Loop until some other thread to set x to a value larger than y\natomic do\n{\n} while (x <= y)\n\natomic do has ‘head-of-line blocking’, which means that while one thread is waiting for the loop condition to return true, no other thread has a chance to evaluate the loop.\n\nA common pattern is to use atomic do with an inline function. This is a safe way to update shared state within a atomic do :\n\n// A shared variable\nbool _locked = false;\n\ninline bool test_and_set()\n{\n    // The read-modify-write of _locked is atomic\n    // because test_and_set is called within atomic do\n    bool result = false;\n\n    if (!_locked)\n    {\n        _'}
04:25:52,764 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,764 openai._base_client INFO Retrying request to /chat/completions in 5.602000 seconds
04:25:52,779 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,780 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: ing functions\n\nCurried functions can also be constructed one parameter at a time. A simple example is function constant which returns a function that always returns the value passed to constant as argument:\n\nimport data.function\n\nvoid Foo()\n{\n    auto fn = constant(false);\n\n    // `fn` is a function that ignores its argument and always returns `false`\n    sim_assert(false == fn(10));\n    sim_assert(false == fn(true));\n}\n\nApplying constant to the result of constant produces a function which returns a function which returns a specified value. In other words it is a curried form of binary function which ignores both its arguments and always returns the specified value:\n\nimport data.function\n\nvoid Foo()\n{\n    auto fn = uncurry(constant(constant(false)));\n\n    // `fn` is a binary function that ignores its arguments and always returns `false`\n    sim_assert(false == fn(10, 34));\n    sim_assert(false == fn(true, 1));\n}\n\n\nLooping functions\n\nThere are a number of commonly used functions in the standard library that implement looping behavior (see concurrency library functions ).\n\n\nReset functions\n\nFunctions annotated with [[reset]] attribute are called automatically after the design is reset (typically used to initialize state). Reset functions must have void return type and an empty parameter list.\n\nclass Foo\n{\nprivate:\n    [[reset]] void init()\n    {\n        pipelined_for(32, [](index_t<32> i)\n        {\n            mem[i] = 0;\n        });\n    }\n\n    memory<uint32, 32> mem;\n}\n\nThe order in which reset functions are called after reset is undefined. Reset functions will execute concurrently with other reset functions.\n\nExported functions will not be invoked until after all reset functions have returned.\n\nReset functions can be called directly just like any other functions.\n\n\nMeta-programming\n\n\nConditional code\n\nThe static if syntax allows including code conditionally based on a boolean expression that can be evaluated at compilation time. A canonical use case is to provide alternative implementations based on template argument(s):\n\ntemplate <typename T, auto N>\nauto Foo(T[N] a)\n{\n    static if (N > 16)\n    {\n        // implementation for large arrays\n    }\n    else\n    {\n        // implementation for small arrays\n    }\n}\n\nThe static if syntax looks similar to the standard if conditional statement but semantically it differs from it in significant ways. The branches of static if do not form nested scopes . A symbol declared within a static if can be accessed outside of it:\n\nstatic if (true)\n{\n    uint32 x;\n}\n\nx++;\n\nA corollary is that declaration within static if are in the same scope as the static if , and can conflict with declaration outside of it. For example, the following code is invalid because the variable x is declared multiple times:\n\nbool x;\n\nstatic if (true)\n{\n    uint32 x;\n}\n\nA static if branch can contain a return statement, and if the function is declared with auto return type, different branches can return values of different types:\n\ntemplate <auto N>\nauto Foo()\n{\n    static if (N == 1)\n    {\n        return;\n    }\n    else\n    {\n        return N;\n    }\n}\n\nThe static if syntax can be used outside of function body to make conditional declarations. The canonical example is declaring class members conditionally based on values of template parameters:\n\ntemplate <typename T, auto N>\nclass Storage\n{\npublic:\n    static if (N > 10 && ((N & (N - 1)) == 0))\n    {\n        memory<T, N> storage;\n    }\n    else\n    {\n        array<T, N> storage;\n    }\n}\n\nStorage<uint32, 8> s8;\nStorage<bool, 16> s16;\n\nAny part of class body can be made conditional, including access specifier(s):\n\ntemplate <bool Public>\nclass Foo\n{\n    static if (Public)\npublic:\n    else\nprivate:\n\n    void Do()\n    {\n    }\n}\n\nFoo<true> publicDo;\nFoo<false>privateDo;\n\nWhile code within static if branches must be syntactically correct, code within a branch that is not included based on the static if condition may include statements or declarations that would otherwise be erroneous:\n\nconst auto N = 0;\n\nstatic if (N > 1)\n    uint<clog2(N)> x;\n\nIn the example above the uint type would be invalid for N that is not greater than 1 . The snippet above is however valid because the declaration is included in the program only when the static if condition N > 1 is true .\n\nIt is important to note that static if is not analogous to #ifdef preprocessor directive used in languages like C and C++. Since static if is part of the language syntax, the condition can evaluate values at the language level:\n\ntemplate <typename T>\nauto Foo()\n{\n    static if (bitsizeof(T) > 32)\n    {\n    }\n}\n\nOn the other hand, unlike preprocessor directives that operate at the level of text, the static if syntax can’t conditionally include/exclude any random fragment of the source file, only whole statements or declarations.\n\n\nStatic recursion\n\nWhile Sandpiper doesn’t support runtime recursion, recursive algorithms can be expressed statically if the recursion “size” is known at compile time. The trick is to use static if syntax to terminate the recursive calls of a template function:\n\ntemplate <typename T, auto N>\ninline auto reduce(T[N] a, (T, T) -> T fn)\n{\n    static assert((N & (N-1)) == 0);\n\n    static if (N == 1)\n    {\n        return a[0];\n    }\n    else\n    {\n        const auto b = split(a);\n        return fn(reduce(b.first, fn), reduce(b.second, fn));\n    }\n}\n\ntemplate <typename T, auto N>\n######################\nOutput:', 'kwargs': {}}
04:25:52,780 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29819, Requested 2982. Please try again in 5.602s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:52,781 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'ing functions\n\nCurried functions can also be constructed one parameter at a time. A simple example is function constant which returns a function that always returns the value passed to constant as argument:\n\nimport data.function\n\nvoid Foo()\n{\n    auto fn = constant(false);\n\n    // `fn` is a function that ignores its argument and always returns `false`\n    sim_assert(false == fn(10));\n    sim_assert(false == fn(true));\n}\n\nApplying constant to the result of constant produces a function which returns a function which returns a specified value. In other words it is a curried form of binary function which ignores both its arguments and always returns the specified value:\n\nimport data.function\n\nvoid Foo()\n{\n    auto fn = uncurry(constant(constant(false)));\n\n    // `fn` is a binary function that ignores its arguments and always returns `false`\n    sim_assert(false == fn(10, 34));\n    sim_assert(false == fn(true, 1));\n}\n\n\nLooping functions\n\nThere are a number of commonly used functions in the standard library that implement looping behavior (see concurrency library functions ).\n\n\nReset functions\n\nFunctions annotated with [[reset]] attribute are called automatically after the design is reset (typically used to initialize state). Reset functions must have void return type and an empty parameter list.\n\nclass Foo\n{\nprivate:\n    [[reset]] void init()\n    {\n        pipelined_for(32, [](index_t<32> i)\n        {\n            mem[i] = 0;\n        });\n    }\n\n    memory<uint32, 32> mem;\n}\n\nThe order in which reset functions are called after reset is undefined. Reset functions will execute concurrently with other reset functions.\n\nExported functions will not be invoked until after all reset functions have returned.\n\nReset functions can be called directly just like any other functions.\n\n\nMeta-programming\n\n\nConditional code\n\nThe static if syntax allows including code conditionally based on a boolean expression that can be evaluated at compilation time. A canonical use case is to provide alternative implementations based on template argument(s):\n\ntemplate <typename T, auto N>\nauto Foo(T[N] a)\n{\n    static if (N > 16)\n    {\n        // implementation for large arrays\n    }\n    else\n    {\n        // implementation for small arrays\n    }\n}\n\nThe static if syntax looks similar to the standard if conditional statement but semantically it differs from it in significant ways. The branches of static if do not form nested scopes . A symbol declared within a static if can be accessed outside of it:\n\nstatic if (true)\n{\n    uint32 x;\n}\n\nx++;\n\nA corollary is that declaration within static if are in the same scope as the static if , and can conflict with declaration outside of it. For example, the following code is invalid because the variable x is declared multiple times:\n\nbool x;\n\nstatic if (true)\n{\n    uint32 x;\n}\n\nA static if branch can contain a return statement, and if the function is declared with auto return type, different branches can return values of different types:\n\ntemplate <auto N>\nauto Foo()\n{\n    static if (N == 1)\n    {\n        return;\n    }\n    else\n    {\n        return N;\n    }\n}\n\nThe static if syntax can be used outside of function body to make conditional declarations. The canonical example is declaring class members conditionally based on values of template parameters:\n\ntemplate <typename T, auto N>\nclass Storage\n{\npublic:\n    static if (N > 10 && ((N & (N - 1)) == 0))\n    {\n        memory<T, N> storage;\n    }\n    else\n    {\n        array<T, N> storage;\n    }\n}\n\nStorage<uint32, 8> s8;\nStorage<bool, 16> s16;\n\nAny part of class body can be made conditional, including access specifier(s):\n\ntemplate <bool Public>\nclass Foo\n{\n    static if (Public)\npublic:\n    else\nprivate:\n\n    void Do()\n    {\n    }\n}\n\nFoo<true> publicDo;\nFoo<false>privateDo;\n\nWhile code within static if branches must be syntactically correct, code within a branch that is not included based on the static if condition may include statements or declarations that would otherwise be erroneous:\n\nconst auto N = 0;\n\nstatic if (N > 1)\n    uint<clog2(N)> x;\n\nIn the example above the uint type would be invalid for N that is not greater than 1 . The snippet above is however valid because the declaration is included in the program only when the static if condition N > 1 is true .\n\nIt is important to note that static if is not analogous to #ifdef preprocessor directive used in languages like C and C++. Since static if is part of the language syntax, the condition can evaluate values at the language level:\n\ntemplate <typename T>\nauto Foo()\n{\n    static if (bitsizeof(T) > 32)\n    {\n    }\n}\n\nOn the other hand, unlike preprocessor directives that operate at the level of text, the static if syntax can’t conditionally include/exclude any random fragment of the source file, only whole statements or declarations.\n\n\nStatic recursion\n\nWhile Sandpiper doesn’t support runtime recursion, recursive algorithms can be expressed statically if the recursion “size” is known at compile time. The trick is to use static if syntax to terminate the recursive calls of a template function:\n\ntemplate <typename T, auto N>\ninline auto reduce(T[N] a, (T, T) -> T fn)\n{\n    static assert((N & (N-1)) == 0);\n\n    static if (N == 1)\n    {\n        return a[0];\n    }\n    else\n    {\n        const auto b = split(a);\n        return fn(reduce(b.first, fn), reduce(b.second, fn));\n    }\n}\n\ntemplate <typename T, auto N>'}
04:25:52,797 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,799 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: returns a one parameter, generic closure that always returns the value x , regardless of the argument passed to it. While it may seem simple, such higher-order functions are powerful building blocks for creating more complex functions and structures.\n\nFor example, consider how it can be used with the map function from the data.array module:\n\nimport data.array\nimport data.function\n\nvoid Run(uint32[10] a)\n{\n    map(constant(false), a);\n}\n\nThe map function creates a new array by applying a given function to every element of the argument array. Using constant(false) as the function results in an array with every element set to false .\n\nFunctions creating functions often also take functions as arguments. A common use case is transforming a function into a slightly different one. Let’s say we want to add elements of two lists. The standard library defines zip_with function that applies a given function to elements of two arrays, and returns array of results. It could be used like this:\n\nimport data.array\n\ninline auto add(auto x, auto y)\n{\n    return x + y;\n}\n\nvoid Run(int32[10] x, int32[10] y)\n{\n    auto result = zip_with(add, x, y);\n}\n\nThis returns an array int33[10] , which is sufficient to store the result of the addition. However, what if the result array needs to be of the same type as the input arrays, int32[10] ? That requires a different add function, one that casts the result of addition to int32 . It is easy to define such a function but the problem can be solved in a more general way by using a higher order function to transform our existing add into a function that returns a result of desired type:\n\nimport data.array\nimport type.coerce\n\ninline auto add(auto x, auto y)\n{\n    return x + y;\n}\n\ninline auto compose2((auto) -> auto f, (auto, auto) -> auto g)\n{\n    return [f, g](auto x, auto y)\n        {\n            return f(g(x, y));\n        };\n}\n\nvoid Run(int32[10] x, int32[10] y)\n{\n    auto result = zip_with(compose2(static_cast<int32>, add), x, y);\n}\n\nThe function compose2 defined above is one of the functions available in the data.function module of the standard library. It takes as an argument two functions, f and g , and returns a function which composes them: first the function g is applied to the arguments and then the function f is applied to the result of g . In our specific example the static_cast<int32> is applied to result of addition.\n\nHigher-order functions can greatly enhance the expressiveness and composability of the code, allowing creation of reusable, generic, and powerful algorithms and structures.\n\n\nFunction currying\n\nFunction currying is a technique for converting a function that takes multiple arguments into a function taking one argument and returning a function. Normally multi-parameter functions in Sandpiper have an uncurried form, however it is sometimes convenient to work with curried functions so the standard library module data.function provides utilities for currying and uncurrying functions. Curried form is especially useful for applying functions one argument at a time, or for constructing functions one parameter at at time.\n\n\nPartial application\n\nSince curried functions take one argument and return another function, they can naturally be partially applied. Here’s a simple example that illustrates the concept:\n\nimport data.function\nimport numeric.int.operator\n\nvoid Foo()\n{\n    auto fn1 = curry(add<uint8, uint8>);\n    auto fn2 = fn1(20);\n    auto x = fn2(56);\n\n    sim_assert(x == add<uint8>(20, 56));\n}\n\nThe above example is contrived, there is no reason to apply add one argument at a time in this case. However the technique is useful in the real world, allowing composition of existing, general functions instead of writing special-case, one-off code. To illustrate let’s consider adding a value to every element of an input array. It would be trivial to write a loop to do it:\n\nuint32[10] a;\n\nvoid Foo()\n{\n    uint32[10] b;\n\n    static for (const auto i : 10)\n    {\n        b[i] = a[i] + 7;\n    }\n}\n\nIt turns out that applying a function to every element of an array is such a common thing to do that the standard library provides map function specially for this purpose:\n\nimport data.array\n\nuint32[10] a;\n\nvoid Foo()\n{\n    auto b = map([](uint32 x)\n            {\n                return x + 7;\n            },\n            a);\n}\n\nIn terms of code reuse this is a clear improvement. The special purpose, one-off loop has been eliminated and now there is just a lambda implementing the special purpose “increment by 7” operation. However, this still is not fully satisfying. The only thing that is special about the lambda is the constant 7 , other than that it is just a regular addition. Using utilities from data.function the one-off code can be further reduced to that essence:\n\nimport data.array\nimport data.function\nimport numeric.int.operator\n\nuint32[10] a;\n\nvoid Foo()\n{\n    auto b = map(apply(curry(add<uint32, uint32>), 7), a);\n}\n\n\nConstructing functions\n\nCurried functions can also be constructed one parameter at a time. A simple example is function constant which returns a function that always returns the value passed to constant as argument:\n\nimport data.function\n\nvoid Foo()\n{\n    auto fn = constant(false);\n\n    // `fn` is a function that ignores its argument and always returns `false`\n    sim_assert(false == fn(10));\n    sim_assert(false == fn(true));\n}\n\nApplying constant to the result of constant produces a function which\n######################\nOutput:', 'kwargs': {}}
04:25:52,799 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29811, Requested 2990. Please try again in 5.602s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:52,800 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'returns a one parameter, generic closure that always returns the value x , regardless of the argument passed to it. While it may seem simple, such higher-order functions are powerful building blocks for creating more complex functions and structures.\n\nFor example, consider how it can be used with the map function from the data.array module:\n\nimport data.array\nimport data.function\n\nvoid Run(uint32[10] a)\n{\n    map(constant(false), a);\n}\n\nThe map function creates a new array by applying a given function to every element of the argument array. Using constant(false) as the function results in an array with every element set to false .\n\nFunctions creating functions often also take functions as arguments. A common use case is transforming a function into a slightly different one. Let’s say we want to add elements of two lists. The standard library defines zip_with function that applies a given function to elements of two arrays, and returns array of results. It could be used like this:\n\nimport data.array\n\ninline auto add(auto x, auto y)\n{\n    return x + y;\n}\n\nvoid Run(int32[10] x, int32[10] y)\n{\n    auto result = zip_with(add, x, y);\n}\n\nThis returns an array int33[10] , which is sufficient to store the result of the addition. However, what if the result array needs to be of the same type as the input arrays, int32[10] ? That requires a different add function, one that casts the result of addition to int32 . It is easy to define such a function but the problem can be solved in a more general way by using a higher order function to transform our existing add into a function that returns a result of desired type:\n\nimport data.array\nimport type.coerce\n\ninline auto add(auto x, auto y)\n{\n    return x + y;\n}\n\ninline auto compose2((auto) -> auto f, (auto, auto) -> auto g)\n{\n    return [f, g](auto x, auto y)\n        {\n            return f(g(x, y));\n        };\n}\n\nvoid Run(int32[10] x, int32[10] y)\n{\n    auto result = zip_with(compose2(static_cast<int32>, add), x, y);\n}\n\nThe function compose2 defined above is one of the functions available in the data.function module of the standard library. It takes as an argument two functions, f and g , and returns a function which composes them: first the function g is applied to the arguments and then the function f is applied to the result of g . In our specific example the static_cast<int32> is applied to result of addition.\n\nHigher-order functions can greatly enhance the expressiveness and composability of the code, allowing creation of reusable, generic, and powerful algorithms and structures.\n\n\nFunction currying\n\nFunction currying is a technique for converting a function that takes multiple arguments into a function taking one argument and returning a function. Normally multi-parameter functions in Sandpiper have an uncurried form, however it is sometimes convenient to work with curried functions so the standard library module data.function provides utilities for currying and uncurrying functions. Curried form is especially useful for applying functions one argument at a time, or for constructing functions one parameter at at time.\n\n\nPartial application\n\nSince curried functions take one argument and return another function, they can naturally be partially applied. Here’s a simple example that illustrates the concept:\n\nimport data.function\nimport numeric.int.operator\n\nvoid Foo()\n{\n    auto fn1 = curry(add<uint8, uint8>);\n    auto fn2 = fn1(20);\n    auto x = fn2(56);\n\n    sim_assert(x == add<uint8>(20, 56));\n}\n\nThe above example is contrived, there is no reason to apply add one argument at a time in this case. However the technique is useful in the real world, allowing composition of existing, general functions instead of writing special-case, one-off code. To illustrate let’s consider adding a value to every element of an input array. It would be trivial to write a loop to do it:\n\nuint32[10] a;\n\nvoid Foo()\n{\n    uint32[10] b;\n\n    static for (const auto i : 10)\n    {\n        b[i] = a[i] + 7;\n    }\n}\n\nIt turns out that applying a function to every element of an array is such a common thing to do that the standard library provides map function specially for this purpose:\n\nimport data.array\n\nuint32[10] a;\n\nvoid Foo()\n{\n    auto b = map([](uint32 x)\n            {\n                return x + 7;\n            },\n            a);\n}\n\nIn terms of code reuse this is a clear improvement. The special purpose, one-off loop has been eliminated and now there is just a lambda implementing the special purpose “increment by 7” operation. However, this still is not fully satisfying. The only thing that is special about the lambda is the constant 7 , other than that it is just a regular addition. Using utilities from data.function the one-off code can be further reduced to that essence:\n\nimport data.array\nimport data.function\nimport numeric.int.operator\n\nuint32[10] a;\n\nvoid Foo()\n{\n    auto b = map(apply(curry(add<uint32, uint32>), 7), a);\n}\n\n\nConstructing functions\n\nCurried functions can also be constructed one parameter at a time. A simple example is function constant which returns a function that always returns the value passed to constant as argument:\n\nimport data.function\n\nvoid Foo()\n{\n    auto fn = constant(false);\n\n    // `fn` is a function that ignores its argument and always returns `false`\n    sim_assert(false == fn(10));\n    sim_assert(false == fn(true));\n}\n\nApplying constant to the result of constant produces a function which'}
04:25:52,815 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,816 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: can be derived from these properties. First, when multiple threads converge from distinct paths onto a shared path through the circuit then some threads must wait for their turn to execute the shared stage. Imagine two threads are executing the example above, and at a specific moment in time one thread is at stage0 , while another is at stage3 (ready to loop back). Both threads need to execute stage1 next, but stage1 can only service one thread at a time. The generated hardware will contain a queue, and the context of the thread at stage0 will be placed into that queue until it has a chance to execute stage1 .\n\nSecondly, there is an ordering among Sandpiper threads. If a group of threads are in a pipeline in a specific order, that order will be maintained. There is no way for one thread to ‘jump ahead’ of another. Thread ordering is well defined by all Sandpiper control flow constructs. See Thread Ordering .\n\nThe amount of concurrency at any given moment in time is determined by the number of threads that are active. Maximum parallelism is determined by the number of operators in the generated hardware. Maximum parallelism is achieved when enough threads exist that all stages are executing in parallel. It is the programmer’s responsibility to express enough concurrency to ensure that most of the stages can do useful work most of the time - thus enabling enough parallelism in the circuit to achieve the desired throughput. A rule of thumb is use 100s or 1000s of threads.\n\nIn the following examples, assume that the only relevant threads are threads created in the snippet and one thread that exists a priori and calls the function F .\n\nThe following code snippet has low concurrency and low parallelism. No threads are created in the snippet, and thus only one thread executes all of the loop iterations serially.\n\nuint32 sum = 0;\n\nvoid F()\n{\n    for (const auto i : 256)\n    {\n        sum += i;\n    }\n}\n\nThis next code snippet has high concurrency and low parallelism. The call to pipelined_for creates many threads but the total number of hardware operators is low (just add operator in the generated circuit). The atomic block is needed to synchronize access to the shared sum variable see Scheduling Constraints .\n\nuint32 sum = 0;\n\nvoid F()\n{\n    pipelined_for(256, [](uint8 i)\n    {\n        atomic\n        {\n            sum += i;\n        }\n    });\n}\n\nThe next code snippet has high parallelism (the generated circuit has 16 add operators) but that parallelism will not be fully utilized because of low concurrency (only one thread).\n\nuint32 sum = 0;\n\nvoid F()\n{\n    for (const auto i : 16)\n    {\n        static for (const auto j : 16)\n        {\n            sum += ((i * 16) + j);\n        }\n    }\n}\n\nThe next code snippet has high parallelism (16 threads) and high concurrency (16 add operators).\n\nuint32 sum = 0;\n\nvoid F()\n{\n    pipelined_for(16, [](uint4 i)\n    {\n        uint32 local_sum = 0;\n\n        static for (const auto j : 16)\n        {\n            local_sum += ((i * 16) + j);\n        }\n\n        atomic\n        {\n            sum += local_sum;\n        }\n    });\n}\n\n\nPredicting throughput\n\nExplicit parallelism makes it possible to accurately predict the throughput of Sandpiper code and enables programmers to trade resource usage for throughput. The trick is to remember that each stage can service at most one thread at a time. If there are enough threads executing a given block of code, then maximum throughput for that block will be reached.\n\nThe following examples illustrate how to predict throughput. Assume that numIter is large (hundreds or thousands). Each example calls pipelined_for to create numIter threads, each of which executes the specified lambda. In the descriptions that follow, ‘approximately’ is used to describe a value that performance asymptotically approaches as the number of threads increases.\n\nThe following code snippet will execute in approximately numIter clock cycles. The reasoning behind this is that the addition and multiplication are decomposed into operators in stages, and every thread will execute each of those stages exactly once. The only way for this code to complete in less than numIter clock cycles would be if one stage could be doing computations for two threads in parallel (which is impossible).\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32 a = tid + 1;\n\n    uint32 b = a * 3;\n});\n\nThe following code snippet will execute in approximately numIter clock cycles. The operators corresponding to the x = x - tid statement can service at most one thread per cycle. Therefore, there is no end-to-end time saved by skipping the body of the if statement for half of the threads. The generated circuit may choose to skip the body of the if statement to save power, but this will not affect throughput.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32 x = tid;\n\n    if ((tid & 1) == 1)\n    {\n        x++;\n\n        x = x * 5;\n\n        // many more operators on x\n    }\n\n    x = x - tid;\n\n    println(x);\n});\n\nThe following code snippet will execute in approximately numIter * 4 clock cycles. The key insight is that any particular thread must execute the operators corresponding to x += tid four times.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32 x = tid & 5;\n\n    for (const auto i : 4)\n    {\n        x += tid;\n    }\n\n    println(x);\n});\n\nThe following code snippet has nested concurrency. It will execute in approximately numIter * 4\n######################\nOutput:', 'kwargs': {}}
04:25:52,816 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29801, Requested 3001. Please try again in 5.604s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:52,817 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'can be derived from these properties. First, when multiple threads converge from distinct paths onto a shared path through the circuit then some threads must wait for their turn to execute the shared stage. Imagine two threads are executing the example above, and at a specific moment in time one thread is at stage0 , while another is at stage3 (ready to loop back). Both threads need to execute stage1 next, but stage1 can only service one thread at a time. The generated hardware will contain a queue, and the context of the thread at stage0 will be placed into that queue until it has a chance to execute stage1 .\n\nSecondly, there is an ordering among Sandpiper threads. If a group of threads are in a pipeline in a specific order, that order will be maintained. There is no way for one thread to ‘jump ahead’ of another. Thread ordering is well defined by all Sandpiper control flow constructs. See Thread Ordering .\n\nThe amount of concurrency at any given moment in time is determined by the number of threads that are active. Maximum parallelism is determined by the number of operators in the generated hardware. Maximum parallelism is achieved when enough threads exist that all stages are executing in parallel. It is the programmer’s responsibility to express enough concurrency to ensure that most of the stages can do useful work most of the time - thus enabling enough parallelism in the circuit to achieve the desired throughput. A rule of thumb is use 100s or 1000s of threads.\n\nIn the following examples, assume that the only relevant threads are threads created in the snippet and one thread that exists a priori and calls the function F .\n\nThe following code snippet has low concurrency and low parallelism. No threads are created in the snippet, and thus only one thread executes all of the loop iterations serially.\n\nuint32 sum = 0;\n\nvoid F()\n{\n    for (const auto i : 256)\n    {\n        sum += i;\n    }\n}\n\nThis next code snippet has high concurrency and low parallelism. The call to pipelined_for creates many threads but the total number of hardware operators is low (just add operator in the generated circuit). The atomic block is needed to synchronize access to the shared sum variable see Scheduling Constraints .\n\nuint32 sum = 0;\n\nvoid F()\n{\n    pipelined_for(256, [](uint8 i)\n    {\n        atomic\n        {\n            sum += i;\n        }\n    });\n}\n\nThe next code snippet has high parallelism (the generated circuit has 16 add operators) but that parallelism will not be fully utilized because of low concurrency (only one thread).\n\nuint32 sum = 0;\n\nvoid F()\n{\n    for (const auto i : 16)\n    {\n        static for (const auto j : 16)\n        {\n            sum += ((i * 16) + j);\n        }\n    }\n}\n\nThe next code snippet has high parallelism (16 threads) and high concurrency (16 add operators).\n\nuint32 sum = 0;\n\nvoid F()\n{\n    pipelined_for(16, [](uint4 i)\n    {\n        uint32 local_sum = 0;\n\n        static for (const auto j : 16)\n        {\n            local_sum += ((i * 16) + j);\n        }\n\n        atomic\n        {\n            sum += local_sum;\n        }\n    });\n}\n\n\nPredicting throughput\n\nExplicit parallelism makes it possible to accurately predict the throughput of Sandpiper code and enables programmers to trade resource usage for throughput. The trick is to remember that each stage can service at most one thread at a time. If there are enough threads executing a given block of code, then maximum throughput for that block will be reached.\n\nThe following examples illustrate how to predict throughput. Assume that numIter is large (hundreds or thousands). Each example calls pipelined_for to create numIter threads, each of which executes the specified lambda. In the descriptions that follow, ‘approximately’ is used to describe a value that performance asymptotically approaches as the number of threads increases.\n\nThe following code snippet will execute in approximately numIter clock cycles. The reasoning behind this is that the addition and multiplication are decomposed into operators in stages, and every thread will execute each of those stages exactly once. The only way for this code to complete in less than numIter clock cycles would be if one stage could be doing computations for two threads in parallel (which is impossible).\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32 a = tid + 1;\n\n    uint32 b = a * 3;\n});\n\nThe following code snippet will execute in approximately numIter clock cycles. The operators corresponding to the x = x - tid statement can service at most one thread per cycle. Therefore, there is no end-to-end time saved by skipping the body of the if statement for half of the threads. The generated circuit may choose to skip the body of the if statement to save power, but this will not affect throughput.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32 x = tid;\n\n    if ((tid & 1) == 1)\n    {\n        x++;\n\n        x = x * 5;\n\n        // many more operators on x\n    }\n\n    x = x - tid;\n\n    println(x);\n});\n\nThe following code snippet will execute in approximately numIter * 4 clock cycles. The key insight is that any particular thread must execute the operators corresponding to x += tid four times.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32 x = tid & 5;\n\n    for (const auto i : 4)\n    {\n        x += tid;\n    }\n\n    println(x);\n});\n\nThe following code snippet has nested concurrency. It will execute in approximately numIter * 4'}
04:25:52,833 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,834 openai._base_client INFO Retrying request to /chat/completions in 5.594000 seconds
04:25:52,855 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,857 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: a);\n}\n\nIn the example above, the numeric.float32 and numeric.float64 modules expose many symbols that have the same names; to resolve these conflicts they are imported with the F32 and F64 qualifiers which can then be used to disambiguate the conflicting names.\n\nIt is important to note that mere importing of modules that expose symbols with identical names doesn’t create conflicts. A name ambiguity occurs only when referencing a name that is defined in multiple modules. If only some names in an imported module cause ambiguity then it is often convenient to import the module both with and without qualification so that its symbols are accessible both with and without the qualifier.\n\nimport numeric.float32 as F32\nimport numeric.bfloat16\nimport numeric.bfloat16 as BF16\n\nvoid func(uint32 a)\n{\n    float32 x = F32::from_uint<32>(a);\n\n    bfloat16 y = BF16::from_uint<32>(a);\n}\n\n\nDevice specific modules\n\nDevice specific modules allow providing different implementation for parts of a design or library depending on the target device. The compiler looks for device specific modules in device\\<target-device> subdirectories of the import directories provided via --import-dir switch. For example, to provide device-specific implementations of a module bus.pci for Agilex , Arria10 and Stratix10 devices, the following directory structure would be created:\n\n+---device\n   +---Agilex\n   |   +---bus\n   |       +---pci.pd\n   +---Arria10\n   |   +---bus\n   |       +---pci.pd\n   +---Stratix10\n       +---bus\n           +---pci.pd\n\nEach of the pci.pd files would have the following structure:\n\nmodule bus.pci\n    { // exposed symbols\n    }\n\n// implementation\n\nA design using the bus.pci module would import it like any other module:\n\nimport bus.pci\n\nand the --import-dir switch would be used to specify the location of the directory structure shown above.\n\nWhen the compiler is unable to locate a module in a directory specific to a device, it will then search for it in the designated import directories. This enables the provision of a default implementation for the module.\n\n\nDefining modules\n\nTo define a module, simply include a module declaration at the top of a Sandpiper source code file.\n\nmodule some.other\n{\n    fn,     // exposes symbol \'fn\', a locally-defined function\n    stu     // exposes symbol \'stu\', a locally-defined structure\n}\n\nvoid fn()\n{\n}\n\nstruct stu\n{\n    uint32 foo;\n}\n\nThe module declaration specifies a name for the module and a list of symbols it makes available when its imported; those symbols make up the public interface of the module. A module can expose functions, types, and constants only. Global variables cannot be exposed and thus can never be accessed directly by code outside the module.\n\nBecause a module can be imported with and without an alias it is good practice to keep symbol names short. There is no need to add a prefix to symbol names to indicate which module they are included in.\n\nmodule binary_search_tree\n{\n    // data types:\n    binary_search_tree,\n\n    // functions:\n    // Avoid this style\n    // (pre-pending \'binary_search_tree_\' to function names)\n    binary_search_tree_insert,\n    binary_search_tree_find\n}\n\nstruct binary_search_tree {}\nvoid binary_search_tree_insert() {}\nvoid binary_search_tree_find() {}\n\nmodule binary_search_tree\n{\n    // data types:\n    binary_search_tree,\n\n    // functions:\n    // Prefer this style (short function names)\n    insert,\n    find\n}\n\nstruct binary_search_tree {}\nvoid insert() {}\nvoid find() {}\n\n\nRe-exposing symbols\n\nWhen a module A imports a module B , the symbols from B are not exposed from A by default. Sometimes it is useful for module A to expose symbols that it imports from module B . This is needed if some parts of B are required as a part of the public interface of A .\n\nmodule matrix\n{\n    // \'fixed\' from numeric.fixed is re-exposed by the \'matrix\' module\n    fixed\n}\n\nimport numeric.fixed\n\nA module can expose all symbols from an imported module by explicitly listing the module to be re-exposed:\n\n// All symbols exposed by numeric.fixed will be exposed by matrix\nmodule matrix { module numeric.fixed }\n\nimport numeric.fixed\n\nA module can expose itself, making all symbols defined within it public, without the need to list each one individually:\n\nmodule foo.bar { module foo.bar }\n\n// All exposable symbols (X and Z) will be exposed by foo.bar\nconst auto X = 3;\n\nstruct Z\n{\n    uint32 y;\n}\n\n// Note that global variable are never exposed\nZ z;\n\nNote that when exposing module’s symbols this way, only functions, types and constants are exposed. Mutable variables are never exposed.\n\n\nModule difference\n\nLimit exposed symbols to a difference between two modules using the backslash symbol:\n\nmodule params\n    { module .cmdargs\n    , module params \\ .cmdargs\n    }\n\nimport .cmdargs\n\nconst auto foo = 0;\nconst auto bar = 0;\n\nclass DefaultApp\n{}\n\nusing app_t = DefaultApp;\n\nThe module params exposes symbols imported from the module .cmdargs as well as any symbols defined in the module params that are not defined in module .cmdargs (i.e. difference between modules params and .cmdargs ).\n\nThe module .cmdargs is a special module that contains symbols defined via compiler command line options --define and --using . This technique allows specification of design parameters with default values that can be overwritten via compiler command line options.\n\n\nThe base module\n\nBy default, all files import the module named base . This can be disabled with the --no-implicit-base compiler argument. The Sandpiper standard library includes an implementation of the base module\n######################\nOutput:', 'kwargs': {}}
04:25:52,857 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29779, Requested 3023. Please try again in 5.604s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:52,858 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': "a);\n}\n\nIn the example above, the numeric.float32 and numeric.float64 modules expose many symbols that have the same names; to resolve these conflicts they are imported with the F32 and F64 qualifiers which can then be used to disambiguate the conflicting names.\n\nIt is important to note that mere importing of modules that expose symbols with identical names doesn’t create conflicts. A name ambiguity occurs only when referencing a name that is defined in multiple modules. If only some names in an imported module cause ambiguity then it is often convenient to import the module both with and without qualification so that its symbols are accessible both with and without the qualifier.\n\nimport numeric.float32 as F32\nimport numeric.bfloat16\nimport numeric.bfloat16 as BF16\n\nvoid func(uint32 a)\n{\n    float32 x = F32::from_uint<32>(a);\n\n    bfloat16 y = BF16::from_uint<32>(a);\n}\n\n\nDevice specific modules\n\nDevice specific modules allow providing different implementation for parts of a design or library depending on the target device. The compiler looks for device specific modules in device\\<target-device> subdirectories of the import directories provided via --import-dir switch. For example, to provide device-specific implementations of a module bus.pci for Agilex , Arria10 and Stratix10 devices, the following directory structure would be created:\n\n+---device\n   +---Agilex\n   |   +---bus\n   |       +---pci.pd\n   +---Arria10\n   |   +---bus\n   |       +---pci.pd\n   +---Stratix10\n       +---bus\n           +---pci.pd\n\nEach of the pci.pd files would have the following structure:\n\nmodule bus.pci\n    { // exposed symbols\n    }\n\n// implementation\n\nA design using the bus.pci module would import it like any other module:\n\nimport bus.pci\n\nand the --import-dir switch would be used to specify the location of the directory structure shown above.\n\nWhen the compiler is unable to locate a module in a directory specific to a device, it will then search for it in the designated import directories. This enables the provision of a default implementation for the module.\n\n\nDefining modules\n\nTo define a module, simply include a module declaration at the top of a Sandpiper source code file.\n\nmodule some.other\n{\n    fn,     // exposes symbol 'fn', a locally-defined function\n    stu     // exposes symbol 'stu', a locally-defined structure\n}\n\nvoid fn()\n{\n}\n\nstruct stu\n{\n    uint32 foo;\n}\n\nThe module declaration specifies a name for the module and a list of symbols it makes available when its imported; those symbols make up the public interface of the module. A module can expose functions, types, and constants only. Global variables cannot be exposed and thus can never be accessed directly by code outside the module.\n\nBecause a module can be imported with and without an alias it is good practice to keep symbol names short. There is no need to add a prefix to symbol names to indicate which module they are included in.\n\nmodule binary_search_tree\n{\n    // data types:\n    binary_search_tree,\n\n    // functions:\n    // Avoid this style\n    // (pre-pending 'binary_search_tree_' to function names)\n    binary_search_tree_insert,\n    binary_search_tree_find\n}\n\nstruct binary_search_tree {}\nvoid binary_search_tree_insert() {}\nvoid binary_search_tree_find() {}\n\nmodule binary_search_tree\n{\n    // data types:\n    binary_search_tree,\n\n    // functions:\n    // Prefer this style (short function names)\n    insert,\n    find\n}\n\nstruct binary_search_tree {}\nvoid insert() {}\nvoid find() {}\n\n\nRe-exposing symbols\n\nWhen a module A imports a module B , the symbols from B are not exposed from A by default. Sometimes it is useful for module A to expose symbols that it imports from module B . This is needed if some parts of B are required as a part of the public interface of A .\n\nmodule matrix\n{\n    // 'fixed' from numeric.fixed is re-exposed by the 'matrix' module\n    fixed\n}\n\nimport numeric.fixed\n\nA module can expose all symbols from an imported module by explicitly listing the module to be re-exposed:\n\n// All symbols exposed by numeric.fixed will be exposed by matrix\nmodule matrix { module numeric.fixed }\n\nimport numeric.fixed\n\nA module can expose itself, making all symbols defined within it public, without the need to list each one individually:\n\nmodule foo.bar { module foo.bar }\n\n// All exposable symbols (X and Z) will be exposed by foo.bar\nconst auto X = 3;\n\nstruct Z\n{\n    uint32 y;\n}\n\n// Note that global variable are never exposed\nZ z;\n\nNote that when exposing module’s symbols this way, only functions, types and constants are exposed. Mutable variables are never exposed.\n\n\nModule difference\n\nLimit exposed symbols to a difference between two modules using the backslash symbol:\n\nmodule params\n    { module .cmdargs\n    , module params \\ .cmdargs\n    }\n\nimport .cmdargs\n\nconst auto foo = 0;\nconst auto bar = 0;\n\nclass DefaultApp\n{}\n\nusing app_t = DefaultApp;\n\nThe module params exposes symbols imported from the module .cmdargs as well as any symbols defined in the module params that are not defined in module .cmdargs (i.e. difference between modules params and .cmdargs ).\n\nThe module .cmdargs is a special module that contains symbols defined via compiler command line options --define and --using . This technique allows specification of design parameters with default values that can be overwritten via compiler command line options.\n\n\nThe base module\n\nBy default, all files import the module named base . This can be disabled with the --no-implicit-base compiler argument. The Sandpiper standard library includes an implementation of the base module"}
04:25:52,896 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,896 openai._base_client INFO Retrying request to /chat/completions in 5.608000 seconds
04:25:52,925 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,925 openai._base_client INFO Retrying request to /chat/completions in 5.594000 seconds
04:25:52,969 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:52,970 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: losures are particularly useful in situations where a context needs to be carried with a function. Here’s an example of a closure:\n\nvoid Run(uint32 a)\n{\n    auto fn = [a](uint32 x, uint32 y) -> uint32\n    {\n        return a - (x + y);\n    };\n\n    auto fn2 = [fn]()\n    {\n        fn(10, 20);\n    };\n\n    fn2();\n}\n\nIn the above example, the closure fn captures the value of a , allowing it to use that value in its implementation. The closure fn2 in turn captures the closure fn and calls it within its implementation.\n\nClosures can be very useful when additional data or context needs to be passed to a function without modifying its parameters.\n\n\nClass member access within lambda\n\nLambdas declared within class methods can access members of the class object in the context in which the closure was created. This makes it convenient to use closures within class methods while still having access to the class’s internal data and functions.\n\nclass Foo\n{\n    void Run()\n    {\n        auto fn = []()\n        {\n            // call method `Do` of the same object for which `Run` was called.\n            Do();\n\n            // modify field `x` of the same object\n            x += 1;\n        };\n    }\n\n    void Do()\n    {\n        // ...\n    }\n\n    uint32 x;\n}\n\nLambdas may also capture member variables by value (copy a value):\n\nclass Foo\n{\n    void Run()\n    {\n        auto fn = [x]()\n        {\n            // call method `Do` of the same object for which `Run` was called.\n            Do();\n\n            // modify captured copy of field `x`, the field `x` is not changed\n            x += 1;\n        };\n    }\n\n    void Do()\n    {\n        // ...\n    }\n\n    uint32 x;\n}\n\n\nGeneric lambdas\n\nJust like regular functions, lambdas can be defined in a generic way, without assuming particular parameter types. This allows writing more versatile closures that can work with different data types, as long as the necessary operations are defined for those types. Here’s an example of a generic lambda:\n\n[](auto x, auto y)\n{\n    return x + y;\n}\n\n\nClosures in the global scope\n\nClosures are usually defined in function scope however it is also possible define closures in the global scope. This is particularly useful for defining global closure constants.\n\nimport data.function\nimport numeric.int.operator\n\nconst auto xor_and_increment = compose2(increment, xor);\n\nvoid Run()\n{\n    auto x = xor_and_increment(10, 13);\n}\n\nClosures defined in the global scope can be thought of as being “created” at compile time, and as such they can’t capture data values. For example the following is illegal because the lambda creating the closure attempts to capture value of x which is a meaningless thing to do at compile-time:\n\nuint32 x;\n\nconst auto illegal = [x](uint32 y)\n{\n    return x + y;\n};\n\nA little bit more subtly, the following is also illegal:\n\nimport data.function\nimport numeric.int.operator\n\nconst auto cipher = bind2nd(xor, 0xC0DE);\n\nThe function bind2nd creates a closure that captures the value of its second argument, which is not valid when declaring a closure in the global scope.\n\nNote that closures declared in the global scope can capture other closures, as long as captured closures don’t themselves capture data values.\n\n\nHigher order functions\n\nHigher-order functions are functions that take one or more functions as arguments and/or return functions as their result. This powerful concept enables building more flexible and composable code by treating functions as values.\n\n\nFunctions as function parameters\n\nOne common use of higher-order functions is to implement some general-purpose structure where specifics are filled in by functions passed as arguments. For example, consider the async_then function from the control.async module in the standard library:\n\ntemplate <typename T>\ninline void async_then(() -> T task, (T) -> void then)\n{\n    // ... implementation omitted for clarity\n}\n\nThe async_then function allows to execute a task asynchronously and pass the result to another function upon completion. The function is completely generic with regard to the logic of task and completion functions, which are both passed as arguments.\n\n\nCalling higher order functions\n\nWhen calling higher-order functions, closures are passed as arguments for the function type parameters. Lambdas are commonly used for this purpose because they are convenient and can capture local values, making them flexible. Here’s an example:\n\nimport control.async\n\nvoid Run(uint32 x)\n{\n    async_then(\n        [x]() -> uint32\n        {\n            uint32 result;\n            // some lengthy calculation\n            return result;\n        },\n        [](uint32 result)\n        {\n            // use the result\n        }\n    );\n}\n\nNamed functions as well as object methods and callbacks can also be passed as arguments to a higher order function:\n\nasync_then(compute, completion);\n\nasync_then(foo.compute, foo.completion_callback);\n\nThe ability to treat functions (closures) as values enables creating very composable and flexible code.\n\n\nFunctions as function results\n\nHigher-order functions can also return functions. This allows defining functions that generate new functions. Here’s a simple example:\n\ninline auto constant(auto x)\n{\n    return [x](auto y)\n    {\n        return x;\n    };\n}\n\nThe constant function returns a one parameter, generic closure that always returns the value x , regardless of the argument passed to it. While it may seem simple, such higher-order functions are powerful building blocks for creating more complex functions and structures.\n\nFor example, consider how it can be used with the map function from the data.array module:\n\nimport data.array\nimport data.function\n\nvoid Run(uint32[10] a)\n{\n    map(constant(false), a);\n}\n\nThe map function creates a new array by applying a\n######################\nOutput:', 'kwargs': {}}
04:25:52,970 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29723, Requested 3077. Please try again in 5.6s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:52,971 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'losures are particularly useful in situations where a context needs to be carried with a function. Here’s an example of a closure:\n\nvoid Run(uint32 a)\n{\n    auto fn = [a](uint32 x, uint32 y) -> uint32\n    {\n        return a - (x + y);\n    };\n\n    auto fn2 = [fn]()\n    {\n        fn(10, 20);\n    };\n\n    fn2();\n}\n\nIn the above example, the closure fn captures the value of a , allowing it to use that value in its implementation. The closure fn2 in turn captures the closure fn and calls it within its implementation.\n\nClosures can be very useful when additional data or context needs to be passed to a function without modifying its parameters.\n\n\nClass member access within lambda\n\nLambdas declared within class methods can access members of the class object in the context in which the closure was created. This makes it convenient to use closures within class methods while still having access to the class’s internal data and functions.\n\nclass Foo\n{\n    void Run()\n    {\n        auto fn = []()\n        {\n            // call method `Do` of the same object for which `Run` was called.\n            Do();\n\n            // modify field `x` of the same object\n            x += 1;\n        };\n    }\n\n    void Do()\n    {\n        // ...\n    }\n\n    uint32 x;\n}\n\nLambdas may also capture member variables by value (copy a value):\n\nclass Foo\n{\n    void Run()\n    {\n        auto fn = [x]()\n        {\n            // call method `Do` of the same object for which `Run` was called.\n            Do();\n\n            // modify captured copy of field `x`, the field `x` is not changed\n            x += 1;\n        };\n    }\n\n    void Do()\n    {\n        // ...\n    }\n\n    uint32 x;\n}\n\n\nGeneric lambdas\n\nJust like regular functions, lambdas can be defined in a generic way, without assuming particular parameter types. This allows writing more versatile closures that can work with different data types, as long as the necessary operations are defined for those types. Here’s an example of a generic lambda:\n\n[](auto x, auto y)\n{\n    return x + y;\n}\n\n\nClosures in the global scope\n\nClosures are usually defined in function scope however it is also possible define closures in the global scope. This is particularly useful for defining global closure constants.\n\nimport data.function\nimport numeric.int.operator\n\nconst auto xor_and_increment = compose2(increment, xor);\n\nvoid Run()\n{\n    auto x = xor_and_increment(10, 13);\n}\n\nClosures defined in the global scope can be thought of as being “created” at compile time, and as such they can’t capture data values. For example the following is illegal because the lambda creating the closure attempts to capture value of x which is a meaningless thing to do at compile-time:\n\nuint32 x;\n\nconst auto illegal = [x](uint32 y)\n{\n    return x + y;\n};\n\nA little bit more subtly, the following is also illegal:\n\nimport data.function\nimport numeric.int.operator\n\nconst auto cipher = bind2nd(xor, 0xC0DE);\n\nThe function bind2nd creates a closure that captures the value of its second argument, which is not valid when declaring a closure in the global scope.\n\nNote that closures declared in the global scope can capture other closures, as long as captured closures don’t themselves capture data values.\n\n\nHigher order functions\n\nHigher-order functions are functions that take one or more functions as arguments and/or return functions as their result. This powerful concept enables building more flexible and composable code by treating functions as values.\n\n\nFunctions as function parameters\n\nOne common use of higher-order functions is to implement some general-purpose structure where specifics are filled in by functions passed as arguments. For example, consider the async_then function from the control.async module in the standard library:\n\ntemplate <typename T>\ninline void async_then(() -> T task, (T) -> void then)\n{\n    // ... implementation omitted for clarity\n}\n\nThe async_then function allows to execute a task asynchronously and pass the result to another function upon completion. The function is completely generic with regard to the logic of task and completion functions, which are both passed as arguments.\n\n\nCalling higher order functions\n\nWhen calling higher-order functions, closures are passed as arguments for the function type parameters. Lambdas are commonly used for this purpose because they are convenient and can capture local values, making them flexible. Here’s an example:\n\nimport control.async\n\nvoid Run(uint32 x)\n{\n    async_then(\n        [x]() -> uint32\n        {\n            uint32 result;\n            // some lengthy calculation\n            return result;\n        },\n        [](uint32 result)\n        {\n            // use the result\n        }\n    );\n}\n\nNamed functions as well as object methods and callbacks can also be passed as arguments to a higher order function:\n\nasync_then(compute, completion);\n\nasync_then(foo.compute, foo.completion_callback);\n\nThe ability to treat functions (closures) as values enables creating very composable and flexible code.\n\n\nFunctions as function results\n\nHigher-order functions can also return functions. This allows defining functions that generate new functions. Here’s a simple example:\n\ninline auto constant(auto x)\n{\n    return [x](auto y)\n    {\n        return x;\n    };\n}\n\nThe constant function returns a one parameter, generic closure that always returns the value x , regardless of the argument passed to it. While it may seem simple, such higher-order functions are powerful building blocks for creating more complex functions and structures.\n\nFor example, consider how it can be used with the map function from the data.array module:\n\nimport data.array\nimport data.function\n\nvoid Run(uint32[10] a)\n{\n    map(constant(false), a);\n}\n\nThe map function creates a new array by applying a'}
04:25:53,16 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:53,16 openai._base_client INFO Retrying request to /chat/completions in 5.598000 seconds
04:25:53,62 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:53,63 openai._base_client INFO Retrying request to /chat/completions in 5.608000 seconds
04:25:53,92 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:53,92 openai._base_client INFO Retrying request to /chat/completions in 5.586000 seconds
04:25:53,98 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:53,99 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: args (i.e. difference between modules params and .cmdargs ).\n\nThe module .cmdargs is a special module that contains symbols defined via compiler command line options --define and --using . This technique allows specification of design parameters with default values that can be overwritten via compiler command line options.\n\n\nThe base module\n\nBy default, all files import the module named base . This can be disabled with the --no-implicit-base compiler argument. The Sandpiper standard library includes an implementation of the base module that provides commonly used functions and symbols.\n\nThe base re-exposes symbols from device-specific modules named hardware.* . Each device has separate implementations of these modules. The --target-device compiler argument determines which directory the compiler loads hardware.* modules from.\n\nIf the --no-implicit-base compiler argument is specified during compilation, then compilation errors will occur if the source code uses floating-point operators or device-specific functions.\n\n\nSpecial modules\n\nSpecial modules are not defined in a source file but instead are automatically generated by the compiler. Other than the source of their definition these modules can be used just like regular modules.\n\n\nThe .cmdargs module\n\nThe special module .cmdargs exposes symbols defined with --define and --using command line arguments. For example when compiling a program with the following options:\n\n--define Foo=10 --using Bar=uint32\n\nthe special module .cmdargs would be defined as following:\n\nmodule .cmdargs {module .cmdargs}\n\nconst auto Foo = 10;\nusing Bar = uint32;\n\nThe module .cmdargs is always imported implicitly, however like any other module it can also be imported explicitly. This is particularly useful when it is desired to qualify symbols imported from .cmdargs , either in order to avoid conflicts, or to distinguish externally defined symbols for code clarity:\n\nimport .cmdargs as params\n\nmemory<uint32, params::MemoryLength> mem;\n\nWhen using compiler command line options to specify design parameters, it is recommended to define a module with default values for each parameter, and expose a difference between that module and .cmdargs .\n\n\nThe .options module\n\nThe special module .options exposes constants corresponding to selected compiler options:\n\nThe module .options is not imported implicitly. Since future versions of the compiler may define constants for other options, it is recommended to always import the module qualified in order to avoid potential name conflicts:\n\nimport .options as opt\n\nvoid Run()\n{\n    static if (opt::backend == opt::Backend::Pb)\n    {\n        // ...\n    }\n}\n\nAn example use case of .options::max_threads_limit is sizing counters which count the number of concurrent threads in a function. An example use case of .options::max_threads_default is setting the number of threads used by pipelined_do .\n\n\nScope\n\n\nShadowing\n\nVariables in an inner scope can have the same name as variables in an outer scope. References always refer to the innermost variable.\n\nvoid F()\n{\n    uint32 x = 4;\n\n    {\n        uint32 x = 6;\n\n        println(x); // prints 6\n    }\n}\n\n\nConcurrency and parallelism\n\nConcurrency and parallelism are two distinct concepts. Concurrency refers to multiple tasks in progress at any one time whereas parallelism refers to multiple tasks executing at the same time.\n\nFor example, a process running on a single core CPU could be decomposed into multiple concurrent threads. At any one moment in time, one thread is executing on the CPU core, while the remaining are sitting in an OS scheduler queue waiting for a turn to execute. This situation has high concurrency, but no parallelism.\n\nIf that same program was run on a 4 core CPU, there would be same amount of concurrency (dictated by the number of threads). However there would be more parallelism, because up to 4 threads could be executing in parallel at any moment in time.\n\nIn traditional software languages, concurrency is expressed in the source code (with concepts like threads). Parallelism however is not specified in the source code; instead the OS and hardware cooperate to perform the computation in parallel.\n\nIn Sandpiper both concurrency and parallelism are explicitly expressed in the source code. This makes it easier to reason about performance but requires programmers to design for parallelism. Too little parallelism will result in poor performance, too much parallelism will result in circuits that consume too many resources.\n\n\nThreads\n\nConcurrency is expressed in Sandpiper via threads. The context of a thread consists of:\n\n- The next statement to be executed\n- A value for each local variable (see Variables ).\n\nThreads can be created in a few ways:\n\n- When an export function is called from outside of Sandpiper code\n- Through library functions see concurrency library functions .\n\nSandpiper threads are lightweight compared to software threads. The following table illustrates some relative costs:\n\nBecause threads are lightweight, they can be used in ways that software threads cannot efficiently be used in. It is reasonable to create hundreds or thousands of threads to perform a short-duration task. Idiomatic Sandpiper expresses loops with calls to functions like pipelined_for to create one thread per loop iteration. For example, it is normal practice to implement a memory copy operation by creating 1 thread per byte to be copied.\n\n\nConcurrency library functions\n\nThis section describes commonly used library functions for creating threads.\n\n\npipelined_for\n\npipelined_for creates N threads, each of which executes the provided function one time. A thread identifier is passed to each one.\n\nauto numIter = 4;\n\n// prints: 0, 1, 2, 3\npipelined_for(numIter, [](uint2 thread_id)\n{\n    println(thread_id);\n});\n\n\npipelined_do\n\npipelined_do creates 2^N threads, each of which execute the provided function as long as the provided function returns true.\n\n// 8 threads will execute the lambda body forever\npipelined_do([](uint3 thread_id)\n{\n    return true;\n######################\nOutput:', 'kwargs': {}}
04:25:53,99 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29658, Requested 3139. Please try again in 5.594s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:53,100 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'args (i.e. difference between modules params and .cmdargs ).\n\nThe module .cmdargs is a special module that contains symbols defined via compiler command line options --define and --using . This technique allows specification of design parameters with default values that can be overwritten via compiler command line options.\n\n\nThe base module\n\nBy default, all files import the module named base . This can be disabled with the --no-implicit-base compiler argument. The Sandpiper standard library includes an implementation of the base module that provides commonly used functions and symbols.\n\nThe base re-exposes symbols from device-specific modules named hardware.* . Each device has separate implementations of these modules. The --target-device compiler argument determines which directory the compiler loads hardware.* modules from.\n\nIf the --no-implicit-base compiler argument is specified during compilation, then compilation errors will occur if the source code uses floating-point operators or device-specific functions.\n\n\nSpecial modules\n\nSpecial modules are not defined in a source file but instead are automatically generated by the compiler. Other than the source of their definition these modules can be used just like regular modules.\n\n\nThe .cmdargs module\n\nThe special module .cmdargs exposes symbols defined with --define and --using command line arguments. For example when compiling a program with the following options:\n\n--define Foo=10 --using Bar=uint32\n\nthe special module .cmdargs would be defined as following:\n\nmodule .cmdargs {module .cmdargs}\n\nconst auto Foo = 10;\nusing Bar = uint32;\n\nThe module .cmdargs is always imported implicitly, however like any other module it can also be imported explicitly. This is particularly useful when it is desired to qualify symbols imported from .cmdargs , either in order to avoid conflicts, or to distinguish externally defined symbols for code clarity:\n\nimport .cmdargs as params\n\nmemory<uint32, params::MemoryLength> mem;\n\nWhen using compiler command line options to specify design parameters, it is recommended to define a module with default values for each parameter, and expose a difference between that module and .cmdargs .\n\n\nThe .options module\n\nThe special module .options exposes constants corresponding to selected compiler options:\n\nThe module .options is not imported implicitly. Since future versions of the compiler may define constants for other options, it is recommended to always import the module qualified in order to avoid potential name conflicts:\n\nimport .options as opt\n\nvoid Run()\n{\n    static if (opt::backend == opt::Backend::Pb)\n    {\n        // ...\n    }\n}\n\nAn example use case of .options::max_threads_limit is sizing counters which count the number of concurrent threads in a function. An example use case of .options::max_threads_default is setting the number of threads used by pipelined_do .\n\n\nScope\n\n\nShadowing\n\nVariables in an inner scope can have the same name as variables in an outer scope. References always refer to the innermost variable.\n\nvoid F()\n{\n    uint32 x = 4;\n\n    {\n        uint32 x = 6;\n\n        println(x); // prints 6\n    }\n}\n\n\nConcurrency and parallelism\n\nConcurrency and parallelism are two distinct concepts. Concurrency refers to multiple tasks in progress at any one time whereas parallelism refers to multiple tasks executing at the same time.\n\nFor example, a process running on a single core CPU could be decomposed into multiple concurrent threads. At any one moment in time, one thread is executing on the CPU core, while the remaining are sitting in an OS scheduler queue waiting for a turn to execute. This situation has high concurrency, but no parallelism.\n\nIf that same program was run on a 4 core CPU, there would be same amount of concurrency (dictated by the number of threads). However there would be more parallelism, because up to 4 threads could be executing in parallel at any moment in time.\n\nIn traditional software languages, concurrency is expressed in the source code (with concepts like threads). Parallelism however is not specified in the source code; instead the OS and hardware cooperate to perform the computation in parallel.\n\nIn Sandpiper both concurrency and parallelism are explicitly expressed in the source code. This makes it easier to reason about performance but requires programmers to design for parallelism. Too little parallelism will result in poor performance, too much parallelism will result in circuits that consume too many resources.\n\n\nThreads\n\nConcurrency is expressed in Sandpiper via threads. The context of a thread consists of:\n\n- The next statement to be executed\n- A value for each local variable (see Variables ).\n\nThreads can be created in a few ways:\n\n- When an export function is called from outside of Sandpiper code\n- Through library functions see concurrency library functions .\n\nSandpiper threads are lightweight compared to software threads. The following table illustrates some relative costs:\n\nBecause threads are lightweight, they can be used in ways that software threads cannot efficiently be used in. It is reasonable to create hundreds or thousands of threads to perform a short-duration task. Idiomatic Sandpiper expresses loops with calls to functions like pipelined_for to create one thread per loop iteration. For example, it is normal practice to implement a memory copy operation by creating 1 thread per byte to be copied.\n\n\nConcurrency library functions\n\nThis section describes commonly used library functions for creating threads.\n\n\npipelined_for\n\npipelined_for creates N threads, each of which executes the provided function one time. A thread identifier is passed to each one.\n\nauto numIter = 4;\n\n// prints: 0, 1, 2, 3\npipelined_for(numIter, [](uint2 thread_id)\n{\n    println(thread_id);\n});\n\n\npipelined_do\n\npipelined_do creates 2^N threads, each of which execute the provided function as long as the provided function returns true.\n\n// 8 threads will execute the lambda body forever\npipelined_do([](uint3 thread_id)\n{\n    return true;'}
04:25:53,205 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:53,205 openai._base_client INFO Retrying request to /chat/completions in 5.598000 seconds
04:25:53,377 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:53,378 openai._base_client INFO Retrying request to /chat/completions in 5.602000 seconds
04:25:53,378 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:53,379 openai._base_client INFO Retrying request to /chat/completions in 5.584000 seconds
04:25:53,979 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:53,979 openai._base_client INFO Retrying request to /chat/completions in 5.360000 seconds
04:25:54,828 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:54,927 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:54,928 openai._base_client INFO Retrying request to /chat/completions in 2.306000 seconds
04:25:58,338 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,339 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: function without interleaving with calls from another call site.\n\nIn the following example the accumulate function computes the sum of a series of integers and returns the current sum. Each call to accumulate adds one more integer to the running total. accumulate uses an static local variable to hold the current sum. This variable is reset when the is_last parameter is true . If accumulate is called from 2 call sites in parallel, then it will not operate as desired. The problem is that calls from the 2 call sites will interleave and thus the running total will not have the expected value.\n\nuint32 accumulate(uint32 value, bool is_last)\n{\n    uint32 result;\n\n    atomic\n    {\n        static uint32 _sum = 0;\n\n        result = _sum + value;\n\n        _sum = is_last ? 0 : result;\n    }\n\n    return result;\n}\n\n// assume function1 and function2 run in parallel\nvoid function1()\n{\n    pipelined_for(1000, [](uint32 i)\n    {\n        bool is_last = (i == 999);\n\n        uint32 result = accumulate(i, is_last);\n\n        if (is_last)\n        {\n            println("result from function1: ", result);\n        }\n    });\n}\n\nvoid function2()\n{\n    pipelined_for(500, [](uint32 i)\n    {\n        bool is_last = (i == 499);\n\n        uint32 result = accumulate(i, is_last);\n\n        if (is_last)\n        {\n            println("result from function2: ", result);\n        }\n    });\n}\n\nThis problem can be fixed by adding the last attribute to the is_last parameter:\n\nuint32 accumulate(uint32 value, [[last]] bool is_last)\n{\n    uint32 result;\n\n    atomic\n    {\n        static uint32 _sum = 0;\n\n        result = _sum + value;\n\n        _sum = is_last ? 0 : result;\n    }\n\n    return result;\n}\n\nlast causes the arbiter to pick one call site and stick with it (not allowing calls any other call sites through) until a call is made with the last parameter set to true.\n\nThe transaction_size attribute can be used at the call site to specify the maximum number of calls before is_last is true (note that this count includes the call with is_last set to true ). This attribute will cause calls to be buffered until an entire transaction is available before issuing any calls. The specified size is used to properly size the buffering FIFO to help prevent deadlock. The transaction size can be different for different call sites. If transaction_size is not specified for a call site, then calls will not be buffered until a full transaction and the default FIFO size will be used.\n\nuint32 accumulate(uint32 value, [[last]] bool is_last)\n{\n    uint32 result;\n\n    atomic\n    {\n        static uint32 _sum = 0;\n\n        result = _sum + value;\n\n        _sum = is_last ? 0 : result;\n    }\n\n    return result;\n}\n\n// assume function1 and function2 run in parallel\nvoid function1()\n{\n    pipelined_for(1000, [](uint32 i)\n    {\n        uint32 result = [[transaction_size(1000)]] accumulate(i, i == 999);\n    });\n}\n\nvoid function2()\n{\n    pipelined_for(500, [](uint32 i)\n    {\n        uint32 result = [[transaction_size(500)]] accumulate(i, i == 499);\n    });\n}\n\n\nMemory consistency model\n\nThe Sandpiper compiler can reorder reads of shared variables (including memories) past other reads. Writes are never reordered past other writes or reads. To read multiple variables atomically, ensure all of the read operations are contained within an atomic block.\n\n\nIntrinsic functions\n\n\nArithmetic\n\n\nclog2\n\nclog2 evaluates to the ceiling of the base 2 logarithm of the supplied unsigned integer. The operand must be known at compile time. clog2 is useful for determining how wide to size an integer to hold a given maximum value. In general use index_t or count_t rather than clog2 directly.\n\nconst auto x = 7;\nconst auto y = clog2(x); // 3\n\n\nType information\n\n\nStruct field offset\n\nbitoffsetof evaluates to the offset (measured in bits) from the start of a structure type to a specified field. byteoffsetof evaluates to the offset measured in bytes (and generates a compile error if the offset is not a multiple of 8 bits).\n\nstruct S\n{\n    uint64 x;\n    uint16 y;\n}\n\nconst auto t = bitoffsetof(S, x); // 0\nconst auto u = bitoffsetof(S, y); // 64\nconst auto v = byteoffsetof(S, y); // 8\n\n\nDebugging\n\n\ndebug_view\n\ndebug_view causes a DebugView module to be generated in the hardware circuit produced by Sandpiper. This module has no functional purpose, but it is useful for looking at variables in a waveform viewer. The first argument passed to debug_view must be a string that identifies the DebugView module in the generated hardware. Next comes an arbitrary number of (string, expression) pairs, each of which corresponds to a port on the generated DebugView module.\n\nThis Sandpiper code:\n\nuint32 x;\nuint32 y;\ndebug_view("after logging", "request id", x, "response id", y);\n\nGenerates the following SystemVerilog:\n\n`ifdef SIMULATION\nmodule PipeDreamCoreDebugView_after_logging\n(\n    input wire clk,\n    input PipeDreamConstants::uint32 _request_id,\n    input PipeDreamConstants::uint32 _response_id,\n    input wire valid\n);\n`ifdef PIPEDREAM_PRINT_DEBUG_VIEW\nalways_ff @(negedge clk) begin\n    if (valid) $display("after logging time: %0t request_id: %p response_id: %p\n######################\nOutput:', 'kwargs': {}}
04:25:58,339 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29447, Requested 2911. Please try again in 4.716s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:58,340 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'function without interleaving with calls from another call site.\n\nIn the following example the accumulate function computes the sum of a series of integers and returns the current sum. Each call to accumulate adds one more integer to the running total. accumulate uses an static local variable to hold the current sum. This variable is reset when the is_last parameter is true . If accumulate is called from 2 call sites in parallel, then it will not operate as desired. The problem is that calls from the 2 call sites will interleave and thus the running total will not have the expected value.\n\nuint32 accumulate(uint32 value, bool is_last)\n{\n    uint32 result;\n\n    atomic\n    {\n        static uint32 _sum = 0;\n\n        result = _sum + value;\n\n        _sum = is_last ? 0 : result;\n    }\n\n    return result;\n}\n\n// assume function1 and function2 run in parallel\nvoid function1()\n{\n    pipelined_for(1000, [](uint32 i)\n    {\n        bool is_last = (i == 999);\n\n        uint32 result = accumulate(i, is_last);\n\n        if (is_last)\n        {\n            println("result from function1: ", result);\n        }\n    });\n}\n\nvoid function2()\n{\n    pipelined_for(500, [](uint32 i)\n    {\n        bool is_last = (i == 499);\n\n        uint32 result = accumulate(i, is_last);\n\n        if (is_last)\n        {\n            println("result from function2: ", result);\n        }\n    });\n}\n\nThis problem can be fixed by adding the last attribute to the is_last parameter:\n\nuint32 accumulate(uint32 value, [[last]] bool is_last)\n{\n    uint32 result;\n\n    atomic\n    {\n        static uint32 _sum = 0;\n\n        result = _sum + value;\n\n        _sum = is_last ? 0 : result;\n    }\n\n    return result;\n}\n\nlast causes the arbiter to pick one call site and stick with it (not allowing calls any other call sites through) until a call is made with the last parameter set to true.\n\nThe transaction_size attribute can be used at the call site to specify the maximum number of calls before is_last is true (note that this count includes the call with is_last set to true ). This attribute will cause calls to be buffered until an entire transaction is available before issuing any calls. The specified size is used to properly size the buffering FIFO to help prevent deadlock. The transaction size can be different for different call sites. If transaction_size is not specified for a call site, then calls will not be buffered until a full transaction and the default FIFO size will be used.\n\nuint32 accumulate(uint32 value, [[last]] bool is_last)\n{\n    uint32 result;\n\n    atomic\n    {\n        static uint32 _sum = 0;\n\n        result = _sum + value;\n\n        _sum = is_last ? 0 : result;\n    }\n\n    return result;\n}\n\n// assume function1 and function2 run in parallel\nvoid function1()\n{\n    pipelined_for(1000, [](uint32 i)\n    {\n        uint32 result = [[transaction_size(1000)]] accumulate(i, i == 999);\n    });\n}\n\nvoid function2()\n{\n    pipelined_for(500, [](uint32 i)\n    {\n        uint32 result = [[transaction_size(500)]] accumulate(i, i == 499);\n    });\n}\n\n\nMemory consistency model\n\nThe Sandpiper compiler can reorder reads of shared variables (including memories) past other reads. Writes are never reordered past other writes or reads. To read multiple variables atomically, ensure all of the read operations are contained within an atomic block.\n\n\nIntrinsic functions\n\n\nArithmetic\n\n\nclog2\n\nclog2 evaluates to the ceiling of the base 2 logarithm of the supplied unsigned integer. The operand must be known at compile time. clog2 is useful for determining how wide to size an integer to hold a given maximum value. In general use index_t or count_t rather than clog2 directly.\n\nconst auto x = 7;\nconst auto y = clog2(x); // 3\n\n\nType information\n\n\nStruct field offset\n\nbitoffsetof evaluates to the offset (measured in bits) from the start of a structure type to a specified field. byteoffsetof evaluates to the offset measured in bytes (and generates a compile error if the offset is not a multiple of 8 bits).\n\nstruct S\n{\n    uint64 x;\n    uint16 y;\n}\n\nconst auto t = bitoffsetof(S, x); // 0\nconst auto u = bitoffsetof(S, y); // 64\nconst auto v = byteoffsetof(S, y); // 8\n\n\nDebugging\n\n\ndebug_view\n\ndebug_view causes a DebugView module to be generated in the hardware circuit produced by Sandpiper. This module has no functional purpose, but it is useful for looking at variables in a waveform viewer. The first argument passed to debug_view must be a string that identifies the DebugView module in the generated hardware. Next comes an arbitrary number of (string, expression) pairs, each of which corresponds to a port on the generated DebugView module.\n\nThis Sandpiper code:\n\nuint32 x;\nuint32 y;\ndebug_view("after logging", "request id", x, "response id", y);\n\nGenerates the following SystemVerilog:\n\n`ifdef SIMULATION\nmodule PipeDreamCoreDebugView_after_logging\n(\n    input wire clk,\n    input PipeDreamConstants::uint32 _request_id,\n    input PipeDreamConstants::uint32 _response_id,\n    input wire valid\n);\n`ifdef PIPEDREAM_PRINT_DEBUG_VIEW\nalways_ff @(negedge clk) begin\n    if (valid) $display("after logging time: %0t request_id: %p response_id: %p'}
04:25:58,375 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,376 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: the following SystemVerilog:\n\n`ifdef SIMULATION\nmodule PipeDreamCoreDebugView_after_logging\n(\n    input wire clk,\n    input PipeDreamConstants::uint32 _request_id,\n    input PipeDreamConstants::uint32 _response_id,\n    input wire valid\n);\n`ifdef PIPEDREAM_PRINT_DEBUG_VIEW\nalways_ff @(negedge clk) begin\n    if (valid) $display("after logging time: %0t request_id: %p response_id: %p",\n    $time, _request_id, _response_id);\nend\n`endif // PIPEDREAM_PRINT_DEBUG_VIEW\nendmodule\n`endif // SIMULATION\n\n// This module is instantiated in the generated code once:\nPipeDreamCoreDebugView_after_logging PipeDreamCoreDebugView_after_logging_instance\n\nIf the PIPEDREAM_PRINT_DEBUG_VIEW macro is defined when the SystemVerilog is simulated, expressions will be printed by a hardware simulator.\n\n\nprint and println\n\nprintln prints a line of text in the simulator (Sandpiper interpreter or hardware simulator). print is similar but doesn’t append a newline. println and print take an arbitrary number of arguments which can be expressions of any value type, including composite types like structs, or string.\n\nuint32 x = 4;\nprintln("The value of x", x);\n\nStrings passed as arguments to print or println can contain special character expressed using following escape sequences:\n\nnewline: \\n\ntab: \\t\nquote: \\"\nbackslash: \\\\\n\nprint("\\"quoted string\\"\\n");\n\nPlace multiple print statements in an atomic block to ensure output is not interleaved with output from other print statements.\n\nuint32 x;\nuint32 y;\natomic\n{\n    print(x);\n    if (x > y)\n    {\n        print(" ");\n        print(y);\n    }\n    print("\\n");\n}\n\n\nsim_assert\n\nsim_assert halts simulation (Sandpiper interpreter or hardware simulator) if the specified expression evaluates to false.\n\nuint32 x;\nuint32 y;\n\nsim_assert(x < y);\n\n\nstatic assertions\n\nstatic assert causes compilation to fail if the supplied expression evaluates to false at compile time. Compilation also fails if the value of the expression is not known at compile time.\n\nconst uint32 x = 4;\nconst uint32 y = 4;\nstatic assert(x == y);\n\n\ninspectable\n\nThe inspectable keyword causes debugging hardware to be generated that enables the value of a shared variable to be inspected at run time. The inspectable keyword requires 2 arguments:\n\n- The name of a shared variable\n- A human readable string describing the variable\n\nclass C\n{\nprivate:\n    uint32 _counter;\n\n    inspectable(_counter, "Value of the counter");\n}\n\nThe compiler generates a debug network and connects the shared variable to it. The compiler also generates a unique identifier for each inspectable variable and stores that identifier in a generated symbol file.\n\nMemories can be made inspectable. Non-static local variables cannot be.\n\n\ndebug module\n\nThe debug module implements higher level functionality based on the inspectable keyword.\n\n\nhw_assert\n\nThe hw_assert function creates an inspectiable variable that is initially set to 0. The value of this variable changes to a 1 if the first argument passed to hw_assert is ever false .\n\nimport debug.assert\n\nvoid F(uint32 x, uint32 y)\n{\n    hw_assert(x > y, "x must be greater than y");\n}\n\nThe assert function is a wrapper that both calls sim_assert and hw_assert .\n\n\ntrace_buffer\n\nThe trace_buffer class implements a ring buffer of events. This enables the N most recent events to be inspectable.\n\nimport debug.trace_buffer\n\nvoid F(uint32 x, uint32 y)\n{\n    struct Event\n    {\n        uint32 x;\n        uint32 y;\n        uint64 timestamp;\n    }\n\n    Event evt = { x, y, cycles() };\n\n    static trace_buffer<Event, 512, "Recent calls to F"> _tb;\n\n    _tb.write(evt);\n}\n\n\nBit manipulation\n\n\nconcat\n\nconcat returns an unsigned integer that is the concatenation of multiple expressions. Note that the arguments are specified in big-endian order (the most significant bit of first argument is placed in the most significant bit of the result).\n\nuint8 x = 0x45;\nuint16 y = 0x1267;\nuint48 z = concat(y, x); // 0x126745\n\nWhen using literals as arguments to concat it is a best practice to explicitly specify intended literal width .\n\nuint32 x = concat(32u16, 5433u16);\n\n\nmux\n\nmux uses the first argument (an unsigned integer) to select one of the remaining input arguments. The number of arguments required by mux is determined by the width of the first argument. If the first argument is N bits wide, then there must be 2^N additional arguments.\n\nThe remaining arguments must all have the same type must all be implicitly convertible to a common type.\n\nThe arguments are passed from least significant to most significant (if the index argument is 0, then argument 1 is selected).\n\nThis snippet:\n\nuint2 idx = 2;\nuint32 x = 54;\nuint32 y = 98;\n\nuint32 result = mux(idx, x, 3, 4, y);\n// result = 4\n\nIs equivalent to:\n\nuint2 idx = 2;\nuint32 x = 54;\nuint32 y = 98;\nuint32[4] choices = { x, 3, 4, y };\n\nuint32 result = choices[idx];\n// result = 4\n\n\nTime\n\n\ncycles\n\ncycles evaluates to a uint64 value that represents the number of clock cycles that have elapsed since the hardware circuit was last reset.\n\nuint64 timestamp = cycles();\nprintln("Event occurred at time: ", timestamp);\n\n\nScheduling\n\nThe following keywords are rarely used. They are escape hatches to influence the operation scheduling algorithm.\n\n\nbar\n######################\nOutput:', 'kwargs': {}}
04:25:58,376 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29429, Requested 2935. Please try again in 4.728s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:58,377 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'the following SystemVerilog:\n\n`ifdef SIMULATION\nmodule PipeDreamCoreDebugView_after_logging\n(\n    input wire clk,\n    input PipeDreamConstants::uint32 _request_id,\n    input PipeDreamConstants::uint32 _response_id,\n    input wire valid\n);\n`ifdef PIPEDREAM_PRINT_DEBUG_VIEW\nalways_ff @(negedge clk) begin\n    if (valid) $display("after logging time: %0t request_id: %p response_id: %p",\n    $time, _request_id, _response_id);\nend\n`endif // PIPEDREAM_PRINT_DEBUG_VIEW\nendmodule\n`endif // SIMULATION\n\n// This module is instantiated in the generated code once:\nPipeDreamCoreDebugView_after_logging PipeDreamCoreDebugView_after_logging_instance\n\nIf the PIPEDREAM_PRINT_DEBUG_VIEW macro is defined when the SystemVerilog is simulated, expressions will be printed by a hardware simulator.\n\n\nprint and println\n\nprintln prints a line of text in the simulator (Sandpiper interpreter or hardware simulator). print is similar but doesn’t append a newline. println and print take an arbitrary number of arguments which can be expressions of any value type, including composite types like structs, or string.\n\nuint32 x = 4;\nprintln("The value of x", x);\n\nStrings passed as arguments to print or println can contain special character expressed using following escape sequences:\n\nnewline: \\n\ntab: \\t\nquote: \\"\nbackslash: \\\\\n\nprint("\\"quoted string\\"\\n");\n\nPlace multiple print statements in an atomic block to ensure output is not interleaved with output from other print statements.\n\nuint32 x;\nuint32 y;\natomic\n{\n    print(x);\n    if (x > y)\n    {\n        print(" ");\n        print(y);\n    }\n    print("\\n");\n}\n\n\nsim_assert\n\nsim_assert halts simulation (Sandpiper interpreter or hardware simulator) if the specified expression evaluates to false.\n\nuint32 x;\nuint32 y;\n\nsim_assert(x < y);\n\n\nstatic assertions\n\nstatic assert causes compilation to fail if the supplied expression evaluates to false at compile time. Compilation also fails if the value of the expression is not known at compile time.\n\nconst uint32 x = 4;\nconst uint32 y = 4;\nstatic assert(x == y);\n\n\ninspectable\n\nThe inspectable keyword causes debugging hardware to be generated that enables the value of a shared variable to be inspected at run time. The inspectable keyword requires 2 arguments:\n\n- The name of a shared variable\n- A human readable string describing the variable\n\nclass C\n{\nprivate:\n    uint32 _counter;\n\n    inspectable(_counter, "Value of the counter");\n}\n\nThe compiler generates a debug network and connects the shared variable to it. The compiler also generates a unique identifier for each inspectable variable and stores that identifier in a generated symbol file.\n\nMemories can be made inspectable. Non-static local variables cannot be.\n\n\ndebug module\n\nThe debug module implements higher level functionality based on the inspectable keyword.\n\n\nhw_assert\n\nThe hw_assert function creates an inspectiable variable that is initially set to 0. The value of this variable changes to a 1 if the first argument passed to hw_assert is ever false .\n\nimport debug.assert\n\nvoid F(uint32 x, uint32 y)\n{\n    hw_assert(x > y, "x must be greater than y");\n}\n\nThe assert function is a wrapper that both calls sim_assert and hw_assert .\n\n\ntrace_buffer\n\nThe trace_buffer class implements a ring buffer of events. This enables the N most recent events to be inspectable.\n\nimport debug.trace_buffer\n\nvoid F(uint32 x, uint32 y)\n{\n    struct Event\n    {\n        uint32 x;\n        uint32 y;\n        uint64 timestamp;\n    }\n\n    Event evt = { x, y, cycles() };\n\n    static trace_buffer<Event, 512, "Recent calls to F"> _tb;\n\n    _tb.write(evt);\n}\n\n\nBit manipulation\n\n\nconcat\n\nconcat returns an unsigned integer that is the concatenation of multiple expressions. Note that the arguments are specified in big-endian order (the most significant bit of first argument is placed in the most significant bit of the result).\n\nuint8 x = 0x45;\nuint16 y = 0x1267;\nuint48 z = concat(y, x); // 0x126745\n\nWhen using literals as arguments to concat it is a best practice to explicitly specify intended literal width .\n\nuint32 x = concat(32u16, 5433u16);\n\n\nmux\n\nmux uses the first argument (an unsigned integer) to select one of the remaining input arguments. The number of arguments required by mux is determined by the width of the first argument. If the first argument is N bits wide, then there must be 2^N additional arguments.\n\nThe remaining arguments must all have the same type must all be implicitly convertible to a common type.\n\nThe arguments are passed from least significant to most significant (if the index argument is 0, then argument 1 is selected).\n\nThis snippet:\n\nuint2 idx = 2;\nuint32 x = 54;\nuint32 y = 98;\n\nuint32 result = mux(idx, x, 3, 4, y);\n// result = 4\n\nIs equivalent to:\n\nuint2 idx = 2;\nuint32 x = 54;\nuint32 y = 98;\nuint32[4] choices = { x, 3, 4, y };\n\nuint32 result = choices[idx];\n// result = 4\n\n\nTime\n\n\ncycles\n\ncycles evaluates to a uint64 value that represents the number of clock cycles that have elapsed since the hardware circuit was last reset.\n\nuint64 timestamp = cycles();\nprintln("Event occurred at time: ", timestamp);\n\n\nScheduling\n\nThe following keywords are rarely used. They are escape hatches to influence the operation scheduling algorithm.\n\n\nbar'}
04:25:58,454 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,455 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: to return true, no other thread has a chance to evaluate the loop.\n\nA common pattern is to use atomic do with an inline function. This is a safe way to update shared state within a atomic do :\n\n// A shared variable\nbool _locked = false;\n\ninline bool test_and_set()\n{\n    // The read-modify-write of _locked is atomic\n    // because test_and_set is called within atomic do\n    bool result = false;\n\n    if (!_locked)\n    {\n        _locked = true;\n        result = true;\n    }\n\n    return result;\n}\n\nvoid F()\n{\n    atomic do {} while (!test_and_set());\n}\n\nThe atomic do loop body and condition are executed atomically and are subject to the same restrictions as an atomic block plus an extra restriction that memories cannot be accessed. Since the loop body and condition are executed atomically, the following is equivalent to the above example:\n\n// A shared variable\nbool _locked = false;\n\ninline bool test_and_set()\n{\n    // The read-modify-write of _locked is atomic\n    // because test_and_set is called within atomic do\n    bool result = false;\n\n    if (!_locked)\n    {\n        _locked = true;\n        result = true;\n    }\n\n    return result;\n}\n\nvoid F()\n{\n    bool done;\n    atomic do\n    {\n        done = test_and_set();\n    } while (!done);\n}\n\n\nData races\n\nIn Sandpiper, a data race occurs in the following situations\n\n- More than one thread writes to the same shared variable at the same time\n- More than one thread reads from the same non-replicated memory ( memory_norep ) at the same time\n\nWhen a data race occurs, one thread is arbitrarily chosen as the winner. Writes from other threads are dropped, reads from a non-replicated memory will return undefined results.\n\nWhen writing to an array, a data race only occurs if the parallel writes use the same array index. When writing to a structure, a data race only occurs if the parallel writes write to the same member.\n\nWhen writing to a memory, a data race occurs even if the threads involved use distinct addresses. When reading from a non-replicated memory, a data race occurs even if the threads involved use distinct addresses.\n\n\nRead replication and memory_norep\n\nIn order to support parallel reads of a single memory object, the Sandpiper compiler transforms programs such that each memory is only read from one location. This transformation instantiates a memory replica corresponding to each memory read expression in the program. The following two code snippets illustrate this transformation.\n\nOriginal:\n\nmemory<uint32, 4> mem;\n\nuint32 F(uint2 idx)\n{\n    return mem[idx] + 1;\n}\n\nuint32 G(uint2 idx)\n{\n    return mem[idx] / 2;\n}\n\nvoid Write(uint2 idx, uint32 val)\n{\n    mem[idx] = val;\n}\n\nTransformed:\n\nmemory<uint32, 4> mem_replica1;\nmemory<uint32, 4> mem_replica2;\n\nuint32 F(uint2 idx)\n{\n    return mem_replica1[idx] + 1;\n}\n\nuint32 G(uint2 idx)\n{\n    return mem_replica2[idx] / 2;\n}\n\nvoid Write(uint2 idx, uint32 val)\n{\n    mem_replica1[idx] = val;\n    mem_replica2[idx] = val;\n}\n\nFor cases where the programmer knows that two memory reads will not occur at the same time, memory_norep can be used. Using memory_norep ensures that resources will not be spent on memory replicas, however it is up to the programmer to ensure there will not be parallel reads. If there are parallel reads to the same memory (even with different addresses), then read results are undefined.\n\nmemory_norep<uint32, 4> mem;\n\n// Programmer ensures that F and G cannot run at the same time\nuint32 F(uint2 idx)\n{\n    return mem[idx] + 1;\n}\n\nuint32 G(uint2 idx)\n{\n    return mem[idx] / 2;\n}\n\nvoid Write(uint2 idx, uint32 val)\n{\n    mem[idx] = val;\n}\n\n\nIncoherent memory read-write\n\nAn incoherent memory read-write describes the following situation: * Thread A writes to memory M at address E * Thread B reads from memory M at address E * The read and write occur at the same time * The read and write are not contained under a mutual [[schedule(N)]]/atomic block\n\nIn this case, thread B will read either the previous memory content or the data written by thread A. This behavior is hardware dependent. In general, this situation should be avoided in Sandpiper code. The interpreter prints the following warning in this situtation: “Concurrent read/write (outside of [[schedule()]]/atomic ) hardware may produce different results”.\n\n\nFunction arbitration\n\nIf multiple threads can call a non-inline function from multiple call sites in parallel then the generated hardware will contain an arbiter that determines the order in which the calls enter the shared function. By default the arbiter fairly chooses among call sites to ensure no starvation. This section describes language constructs to control arbitration policy.\n\n\n[[last]] attribute\n\nThe last attribute can be applied to bool function parameters. last enables a series of threads to call a function from a common call site with assurance that those threads will enter the function without interleaving with calls from another call site.\n\nIn the following example the accumulate function computes the sum of a series of integers and returns the current sum. Each call to accumulate adds one more integer to the running total. accumulate uses an static local variable to hold the current sum. This variable is reset when the is_last parameter is true . If accumulate is called from 2 call sites in parallel, then it will not operate as desired. The problem is that calls from the 2 call sites\n######################\nOutput:', 'kwargs': {}}
04:25:58,455 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29388, Requested 2978. Please try again in 4.732s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:25:58,456 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'to return true, no other thread has a chance to evaluate the loop.\n\nA common pattern is to use atomic do with an inline function. This is a safe way to update shared state within a atomic do :\n\n// A shared variable\nbool _locked = false;\n\ninline bool test_and_set()\n{\n    // The read-modify-write of _locked is atomic\n    // because test_and_set is called within atomic do\n    bool result = false;\n\n    if (!_locked)\n    {\n        _locked = true;\n        result = true;\n    }\n\n    return result;\n}\n\nvoid F()\n{\n    atomic do {} while (!test_and_set());\n}\n\nThe atomic do loop body and condition are executed atomically and are subject to the same restrictions as an atomic block plus an extra restriction that memories cannot be accessed. Since the loop body and condition are executed atomically, the following is equivalent to the above example:\n\n// A shared variable\nbool _locked = false;\n\ninline bool test_and_set()\n{\n    // The read-modify-write of _locked is atomic\n    // because test_and_set is called within atomic do\n    bool result = false;\n\n    if (!_locked)\n    {\n        _locked = true;\n        result = true;\n    }\n\n    return result;\n}\n\nvoid F()\n{\n    bool done;\n    atomic do\n    {\n        done = test_and_set();\n    } while (!done);\n}\n\n\nData races\n\nIn Sandpiper, a data race occurs in the following situations\n\n- More than one thread writes to the same shared variable at the same time\n- More than one thread reads from the same non-replicated memory ( memory_norep ) at the same time\n\nWhen a data race occurs, one thread is arbitrarily chosen as the winner. Writes from other threads are dropped, reads from a non-replicated memory will return undefined results.\n\nWhen writing to an array, a data race only occurs if the parallel writes use the same array index. When writing to a structure, a data race only occurs if the parallel writes write to the same member.\n\nWhen writing to a memory, a data race occurs even if the threads involved use distinct addresses. When reading from a non-replicated memory, a data race occurs even if the threads involved use distinct addresses.\n\n\nRead replication and memory_norep\n\nIn order to support parallel reads of a single memory object, the Sandpiper compiler transforms programs such that each memory is only read from one location. This transformation instantiates a memory replica corresponding to each memory read expression in the program. The following two code snippets illustrate this transformation.\n\nOriginal:\n\nmemory<uint32, 4> mem;\n\nuint32 F(uint2 idx)\n{\n    return mem[idx] + 1;\n}\n\nuint32 G(uint2 idx)\n{\n    return mem[idx] / 2;\n}\n\nvoid Write(uint2 idx, uint32 val)\n{\n    mem[idx] = val;\n}\n\nTransformed:\n\nmemory<uint32, 4> mem_replica1;\nmemory<uint32, 4> mem_replica2;\n\nuint32 F(uint2 idx)\n{\n    return mem_replica1[idx] + 1;\n}\n\nuint32 G(uint2 idx)\n{\n    return mem_replica2[idx] / 2;\n}\n\nvoid Write(uint2 idx, uint32 val)\n{\n    mem_replica1[idx] = val;\n    mem_replica2[idx] = val;\n}\n\nFor cases where the programmer knows that two memory reads will not occur at the same time, memory_norep can be used. Using memory_norep ensures that resources will not be spent on memory replicas, however it is up to the programmer to ensure there will not be parallel reads. If there are parallel reads to the same memory (even with different addresses), then read results are undefined.\n\nmemory_norep<uint32, 4> mem;\n\n// Programmer ensures that F and G cannot run at the same time\nuint32 F(uint2 idx)\n{\n    return mem[idx] + 1;\n}\n\nuint32 G(uint2 idx)\n{\n    return mem[idx] / 2;\n}\n\nvoid Write(uint2 idx, uint32 val)\n{\n    mem[idx] = val;\n}\n\n\nIncoherent memory read-write\n\nAn incoherent memory read-write describes the following situation: * Thread A writes to memory M at address E * Thread B reads from memory M at address E * The read and write occur at the same time * The read and write are not contained under a mutual [[schedule(N)]]/atomic block\n\nIn this case, thread B will read either the previous memory content or the data written by thread A. This behavior is hardware dependent. In general, this situation should be avoided in Sandpiper code. The interpreter prints the following warning in this situtation: “Concurrent read/write (outside of [[schedule()]]/atomic ) hardware may produce different results”.\n\n\nFunction arbitration\n\nIf multiple threads can call a non-inline function from multiple call sites in parallel then the generated hardware will contain an arbiter that determines the order in which the calls enter the shared function. By default the arbiter fairly chooses among call sites to ensure no starvation. This section describes language constructs to control arbitration policy.\n\n\n[[last]] attribute\n\nThe last attribute can be applied to bool function parameters. last enables a series of threads to call a function from a common call site with assurance that those threads will enter the function without interleaving with calls from another call site.\n\nIn the following example the accumulate function computes the sum of a series of integers and returns the current sum. Each call to accumulate adds one more integer to the running total. accumulate uses an static local variable to hold the current sum. This variable is reset when the is_last parameter is true . If accumulate is called from 2 call sites in parallel, then it will not operate as desired. The problem is that calls from the 2 call sites'}
04:25:58,511 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:25:58,524 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,525 openai._base_client INFO Retrying request to /chat/completions in 5.438000 seconds
04:25:58,595 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,596 openai._base_client INFO Retrying request to /chat/completions in 5.444000 seconds
04:25:58,612 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,613 openai._base_client INFO Retrying request to /chat/completions in 5.448000 seconds
04:25:58,709 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,710 openai._base_client INFO Retrying request to /chat/completions in 5.442000 seconds
04:25:58,767 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,768 openai._base_client INFO Retrying request to /chat/completions in 5.448000 seconds
04:25:58,778 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,779 openai._base_client INFO Retrying request to /chat/completions in 5.436000 seconds
04:25:58,900 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:58,900 openai._base_client INFO Retrying request to /chat/completions in 5.444000 seconds
04:25:59,58 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:59,58 openai._base_client INFO Retrying request to /chat/completions in 5.428000 seconds
04:25:59,65 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:59,65 openai._base_client INFO Retrying request to /chat/completions in 5.448000 seconds
04:25:59,437 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:25:59,437 openai._base_client INFO Retrying request to /chat/completions in 5.436000 seconds
04:26:04,135 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:04,135 openai._base_client INFO Retrying request to /chat/completions in 5.910000 seconds
04:26:04,188 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:04,189 openai._base_client INFO Retrying request to /chat/completions in 5.882000 seconds
04:26:04,255 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:04,256 openai._base_client INFO Retrying request to /chat/completions in 5.902000 seconds
04:26:04,310 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:04,310 openai._base_client INFO Retrying request to /chat/completions in 5.912000 seconds
04:26:04,339 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:04,340 openai._base_client INFO Retrying request to /chat/completions in 5.882000 seconds
04:26:04,451 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:04,452 openai._base_client INFO Retrying request to /chat/completions in 5.906000 seconds
04:26:04,572 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:04,573 openai._base_client INFO Retrying request to /chat/completions in 5.922000 seconds
04:26:04,743 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:26:04,872 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:04,873 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: the most-significant bit(s) being dropped (including the sign bit for int<N> ) and can result in a loss of information.\n\nIn all other cases, provided that bitsizeof Input == bitsizeof Output , behave as reinterpret_cast , e.g.:\n\nbool[32] foo;\nauto bar = cast<uint1[8][4]>(foo);\n\nreinterpret_cast<T>(e) can be used to explicitly cast between types of different widths. If the source type is wider than the result type, then the least significant bits of the source type are returned. If the source type is narrower than the result type, then the upper bits of the result are zero.\n\nstruct S\n{\n    uint32 x;\n    int8 y;\n}\n\nS s = {43, -2};\n\nuint4 z = reinterpret_cast<uint4>(s);\n\n\nType inference\n\nIn Sandpiper auto is a type placeholder that tells the compiler to deduce a type based on available context.\n\nType inference is useful for avoiding intermediate narrowing in computations with integers:\n\nint7 x;\nint9 y;\nauto z = x + y; // the type of z is inferred to be int10\nauto w = z + 1; // the type of w is inferred to be int11\n\nconst auto N = 129; // The type of N is uint8\n\n\nExpressions evaluated at compile-time\n\nWhen an expression can be evaluated at compile-time, and the types of operands are not explicitly specified, the type of the expression is inferred after evaluation:\n\nconst auto x = 2 * 2; // the value of x is evaluated to 4 and the type inferred to uint3\nuint3 y = x + 3; // no narrowing conversion warning since expression evaluates to 7\n\nExpressions evaluated at compile-time but with at least one operand that has an explicitly specified type follow the regular type inference rules based on the operator and operand types:\n\nconst uint2 two = 2;\nconst auto z = two * two; // the value of x is evaluated to 4 and the type inferred to uint4\n\n\nMiscellaneous operators\n\n\nSizeof operators\n\nbitsizeof evaluates to the width in bits of an expression or type. bytesizeof x evaluates to (bitsizeof x) / 8 . bytesizeof generates a compile error if the width is not a multiple of 8 bits. Parenthesis are optional.\n\nuint32 x;\nconst auto y = bitsizeof(x);        // 32\nconst auto z = bitsizeof uint32;    // 32\nconst auto w = bytesizeof x;        // 4\n\n\nTernary operator\n\na ? b : c evaluates to b if a is false, evaluates to c otherwise. a must be of bool type. The types of b and c must be the same type, or both must be implicitly convertible to a common type.\n\nbool cond;\nuint32 x;\nuint32 y;\n\nuint32 z = cond ? x : y;\n\n\nVariables\n\nVariables can be declared globally, within a class, or locally within a function.\n\n// Global variable\nuint32 x;\n\nclass C\n{\nprivate:\n    // Member variable\n    uint32 x;\n}\n\nvoid F()\n{\n    // Local variable\n    uint32 x;\n\n    // Static local variable\n    static uint32 y;\n}\n\nVariables are categorized by their interaction with threads. Some variables are local to each thread, while others are shared among threads.\n\nA declaration can also initialize a variable to a given value:\n\nuint32 a = 3;\n\nShared variables are initialized when the hardware is reset. If no initial value is provided for a shared variable, then the initial value of that variable is undefined. For FPGA targets, memories are initialized only when the FPGA is programmed.\n\nLocal variables are initialized before the first use of the variable by the corresponding thread. If no initial value is provided for a local variable, all bits are initialized to zero.\n\n\nInitializer lists\n\nVariables can be initialized with initializer lists:\n\nuint32 a = {}; // initialized to 0\n\nstruct Flag\n{\n    bool b;\n}\n\nstruct S\n{\n    uint8 x;\n    int16 y;\n    Flag f;\n}\n\nS s1 = {3, 4, {true}}; // x = 3, y = 4, t.f.b = true\nS s2 = {3};            // x = 3, y = 0, t.f.b = false\n\nS Foo()\n{\n    // returns an S with x = 6, y = 7, t.f.b = true\n    return { 6, 7, {true} };\n}\n\nWhen an array or memory is initialized with an initializer list, the number of elements in the initializer list must be less than or equal to the number of elements in the the array or memory. If the initializer list contains fewer elements than the array or memory, then the remaining elements are initialized to 0.\n\n// This is the same as:\n// memory<uint32, 8> mem = { 3, 2, 5, 0, 0, 0, 0, 0 };\nmemory<uint32, 8> mem = { 3, 2, 5 };\n\nUnions can be initialized with an empty initializer list, or an initializer list with one element. If the initializer list contains one element, then the first field of the union is initialized to the specified value. Designated initializers (#designated-initializers) are recommended when initializing a union, because the name of the initialized field is explicitly specified in the source.\n\nunion U\n{\n    uint32 a;\n    uint16 b;\n}\n\nU u = { 0x12345678 }; // sets u.a = 0x12345678\n\n\nDesignated initializers\n\nDesignated initializers allow initializing instances of classes, structs, and unions. Each designator\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>SANDPIPER<|>ORGANIZATION<|>Sandpiper is a context where type inference and compile-time expression evaluation are discussed, indicating a programming language or environment)\n##\n("entity"<|>UINT32<|>ORGANIZATION<|>Uint32 is mentioned as a data type used in programming, indicating its role in variable declaration and operations)\n##\n("entity"<|>INT8<|>ORGANIZATION<|>Int8 is a data type that represents an 8-bit signed integer in programming)\n##\n("entity"<|>UINT4<|>ORGANIZATION<|>Uint4 is a data type representing a 4-bit unsigned integer, used in an example of type casting)\n##\n("entity"<|>INT7<|>ORGANIZATION<|>Int7 is a data type representing a 7-bit integer, involved in computations and type inference examples)\n##\n("entity"<|>INT9<|>ORGANIZATION<|>Int9 is a data type representing a 9-bit integer, used in examples illustrating type inference)\n##\n("entity"<|>INT10<|>ORGANIZATION<|>Int10 is inferred as a data type in an example, representing a 10-bit integer resulting from an operation)\n##\n("entity"<|>INT11<|>ORGANIZATION<|>Int11 is inferred as a data type, representing an 11-bit integer in a computation example)\n##\n("entity"<|>UINT8<|>ORGANIZATION<|>Uint8 is a data type representing an 8-bit unsigned integer, used in variable declaration and type inference)\n##\n("entity"<|>UINT3<|>ORGANIZATION<|>Uint3 is a data type representing a 3-bit unsigned integer, mentioned in the context of compile-time expression evaluation)\n##\n("entity"<|>UINT2<|>ORGANIZATION<|>Uint2 is a data type representing a 2-bit unsigned integer, used in an example of compile-time expression evaluation)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:26:04,873 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29842, Requested 3282. Please try again in 6.248s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:26:04,874 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'the most-significant bit(s) being dropped (including the sign bit for int<N> ) and can result in a loss of information.\n\nIn all other cases, provided that bitsizeof Input == bitsizeof Output , behave as reinterpret_cast , e.g.:\n\nbool[32] foo;\nauto bar = cast<uint1[8][4]>(foo);\n\nreinterpret_cast<T>(e) can be used to explicitly cast between types of different widths. If the source type is wider than the result type, then the least significant bits of the source type are returned. If the source type is narrower than the result type, then the upper bits of the result are zero.\n\nstruct S\n{\n    uint32 x;\n    int8 y;\n}\n\nS s = {43, -2};\n\nuint4 z = reinterpret_cast<uint4>(s);\n\n\nType inference\n\nIn Sandpiper auto is a type placeholder that tells the compiler to deduce a type based on available context.\n\nType inference is useful for avoiding intermediate narrowing in computations with integers:\n\nint7 x;\nint9 y;\nauto z = x + y; // the type of z is inferred to be int10\nauto w = z + 1; // the type of w is inferred to be int11\n\nconst auto N = 129; // The type of N is uint8\n\n\nExpressions evaluated at compile-time\n\nWhen an expression can be evaluated at compile-time, and the types of operands are not explicitly specified, the type of the expression is inferred after evaluation:\n\nconst auto x = 2 * 2; // the value of x is evaluated to 4 and the type inferred to uint3\nuint3 y = x + 3; // no narrowing conversion warning since expression evaluates to 7\n\nExpressions evaluated at compile-time but with at least one operand that has an explicitly specified type follow the regular type inference rules based on the operator and operand types:\n\nconst uint2 two = 2;\nconst auto z = two * two; // the value of x is evaluated to 4 and the type inferred to uint4\n\n\nMiscellaneous operators\n\n\nSizeof operators\n\nbitsizeof evaluates to the width in bits of an expression or type. bytesizeof x evaluates to (bitsizeof x) / 8 . bytesizeof generates a compile error if the width is not a multiple of 8 bits. Parenthesis are optional.\n\nuint32 x;\nconst auto y = bitsizeof(x);        // 32\nconst auto z = bitsizeof uint32;    // 32\nconst auto w = bytesizeof x;        // 4\n\n\nTernary operator\n\na ? b : c evaluates to b if a is false, evaluates to c otherwise. a must be of bool type. The types of b and c must be the same type, or both must be implicitly convertible to a common type.\n\nbool cond;\nuint32 x;\nuint32 y;\n\nuint32 z = cond ? x : y;\n\n\nVariables\n\nVariables can be declared globally, within a class, or locally within a function.\n\n// Global variable\nuint32 x;\n\nclass C\n{\nprivate:\n    // Member variable\n    uint32 x;\n}\n\nvoid F()\n{\n    // Local variable\n    uint32 x;\n\n    // Static local variable\n    static uint32 y;\n}\n\nVariables are categorized by their interaction with threads. Some variables are local to each thread, while others are shared among threads.\n\nA declaration can also initialize a variable to a given value:\n\nuint32 a = 3;\n\nShared variables are initialized when the hardware is reset. If no initial value is provided for a shared variable, then the initial value of that variable is undefined. For FPGA targets, memories are initialized only when the FPGA is programmed.\n\nLocal variables are initialized before the first use of the variable by the corresponding thread. If no initial value is provided for a local variable, all bits are initialized to zero.\n\n\nInitializer lists\n\nVariables can be initialized with initializer lists:\n\nuint32 a = {}; // initialized to 0\n\nstruct Flag\n{\n    bool b;\n}\n\nstruct S\n{\n    uint8 x;\n    int16 y;\n    Flag f;\n}\n\nS s1 = {3, 4, {true}}; // x = 3, y = 4, t.f.b = true\nS s2 = {3};            // x = 3, y = 0, t.f.b = false\n\nS Foo()\n{\n    // returns an S with x = 6, y = 7, t.f.b = true\n    return { 6, 7, {true} };\n}\n\nWhen an array or memory is initialized with an initializer list, the number of elements in the initializer list must be less than or equal to the number of elements in the the array or memory. If the initializer list contains fewer elements than the array or memory, then the remaining elements are initialized to 0.\n\n// This is the same as:\n// memory<uint32, 8> mem = { 3, 2, 5, 0, 0, 0, 0, 0 };\nmemory<uint32, 8> mem = { 3, 2, 5 };\n\nUnions can be initialized with an empty initializer list, or an initializer list with one element. If the initializer list contains one element, then the first field of the union is initialized to the specified value. Designated initializers (#designated-initializers) are recommended when initializing a union, because the name of the initialized field is explicitly specified in the source.\n\nunion U\n{\n    uint32 a;\n    uint16 b;\n}\n\nU u = { 0x12345678 }; // sets u.a = 0x12345678\n\n\nDesignated initializers\n\nDesignated initializers allow initializing instances of classes, structs, and unions. Each designator'}
04:26:04,985 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:04,985 openai._base_client INFO Retrying request to /chat/completions in 6.486000 seconds
04:26:10,166 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,167 openai._base_client INFO Retrying request to /chat/completions in 0.476000 seconds
04:26:10,169 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,170 openai._base_client INFO Retrying request to /chat/completions in 0.486000 seconds
04:26:10,271 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,272 openai._base_client INFO Retrying request to /chat/completions in 0.482000 seconds
04:26:10,333 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,334 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: in approximately numIter * 4 clock cycles. The key insight is that any particular thread must execute the operators corresponding to x += tid four times.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32 x = tid & 5;\n\n    for (const auto i : 4)\n    {\n        x += tid;\n    }\n\n    println(x);\n});\n\nThe following code snippet has nested concurrency. It will execute in approximately numIter * 4 clock cycles. Any particular outer thread will create 4 inner threads, each of which executes the operators corresponding to inner_tid + 4 one time.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 outer_tid)\n{\n    pipelined_for(4, [](uint32 inner_tid)\n    {\n        uint32 j = inner_tid + 4;\n\n        println(j);\n    });\n});\n\nThe previous two examples execute in the same amount of time. The first example introduces new threads with the outer pipelined_for call, and uses those threads to loop 4 times. The second example introduces new threads in two different places: the outer and inner pipelined_for calls. The second example is usually the better choice, as it exposes more concurrency (more threads) to the compiler. The complexity of the body of the inner loop determines how many threads are required to achieve peak performance. The second example can achieve peak performance with more complex code because there are more threads that execute the body of the loop. The first example should be used in cases where there are complex dependencies between iterations of the inner loop that are hard to express as communication between threads.\n\nThe next example will execute in approximately numIter * 2 clock cycles. Half of the outer threads will create four inner threads, the other half will create zero threads. Thus the average outer thread will create two inner threads.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 outer_tid)\n{\n    if (1 == (outer_tid & 1))\n    {\n        pipelined_for(4, [](uint32 inner_tid)\n        {\n            uint32 j = inner_tid + 4;\n\n            println(j);\n        });\n    }\n});\n\nThe next example will execute in approximately numIter * 2 clock cycles. Note how Helper is not marked inline . Helper corresponds to one piece of hardware that is shared by both call sites. Each thread executes through this hardware twice.\n\nuint32 Helper(uint32 x)\n{\n    return x + 1;\n}\n\nvoid Execute(uint32 numIter)\n{\n    pipelined_for(numIter, [](uint32 tid)\n    {\n       uint32 x = Helper(tid);\n\n       uint32 y = Helper(tid);\n\n       println(x + y);\n    });\n}\n\nIf Helper is marked inline, then the code snippet will execute in numIter clock cycles. This occurs because each call site to Helper will have unique hardware corresponding to the expression: x + 1 .\n\ninline uint32 Helper(uint32 x)\n{\n    return x + 1;\n}\n\nvoid Execute(uint32 numIter)\n{\n    pipelined_for(numIter, [](uint32 tid)\n    {\n       uint32 x = Helper(tid);\n\n       uint32 y = Helper(tid);\n\n       println(x + y);\n    });\n}\n\n\nIncreasing parallelism\n\nThis section describes the constructs in Sandpiper that enable peak parallelism to be increased. These techniques are useful when the parallelism of a given Sandpiper program is insufficient to meet performance goals. Increasing peak parallelism increases the amount of resources consumed by the generated hardware.\n\nstatic for replicates the body of the loop, causing operators to be replicated.\n\nuint32 numIter;\n\n// Throughput: one addition per clock cycle\n// Execution Time: numIter*4 clock cycles\n// Resources: One set of operators that implement the loop body\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32[4] src;\n    uint32[4] dst;\n\n    for (const auto i : 4)\n    {\n        dst[i] = src[i] + 1;\n    }\n});\n\n// Throughput: four additions per clock cycle\n// Execution Time: numIter clock cycles\n// Resources: Four sets of operators that implement the loop body\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32[4] src;\n    uint32[4] dst;\n\n    static for (const auto i : 4)\n    {\n        dst[i] = src[i] + 1;\n    }\n});\n\n// Throughput: two additions per clock cycle\n// Execution Time: numIter * 2 clock cycles\n// Resources: Two sets of operators that implement the loop body\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32[4] src;\n    uint32[4] dst;\n\n    for (const auto i : 2)\n    {\n        static for (const auto j : 2)\n        {\n            uint2 idx = (i * 2) + j;\n\n            dst[idx] = src[idx] + 1;\n        }\n    }\n});\n\ninline functions replicate the body of a function once per call site, causing operators to be replicated once per call site.\n\nuint32 numIter;\n\nuint32 AddOne(uint32 x)\n{\n    return x + 1;\n}\n\n// Throughput: one addition per clock cycle\n// Execution Time: numIter*4 clock cycles\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32[4] src;\n    uint32[4] dst;\n\n    static for (const auto i : 4)\n    {\n        dst[i] = AddOne(src[i]);\n    }\n});\n\ninline uint32 AddOneInline(uint32 x)\n{\n    return x + 1;\n}\n\n// Throughput: four additions per clock cycle\n// Execution Time: numIter\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>SANDPIPER<|>ORGANIZATION<|>Sandpiper is a programming model or tool that enables increased parallelism and efficiency in hardware execution through various programming constructs)\n##\n("entity"<|>NUMITER<|>PERSON<|>NumIter is a variable representing the number of iterations in a loop within Sandpiper code examples)\n##\n("entity"<|>HELPER<|>PERSON<|>Helper is a function within the Sandpiper code that modifies input data, affecting execution time and parallelism based on its inline status)\n##\n("relationship"<|>NUMITER<|>SANDPIPER<|>NumIter is used within Sandpiper code examples to control loop iterations and demonstrate parallelism techniques<|>8)\n##\n("relationship"<|>HELPER<|>SANDPIPER<|>Helper function is part of Sandpiper\'s code examples to illustrate differences in execution time and resource usage<|>7)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:26:10,335 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 27108, Requested 3130. Please try again in 476ms. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:26:10,336 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'in approximately numIter * 4 clock cycles. The key insight is that any particular thread must execute the operators corresponding to x += tid four times.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32 x = tid & 5;\n\n    for (const auto i : 4)\n    {\n        x += tid;\n    }\n\n    println(x);\n});\n\nThe following code snippet has nested concurrency. It will execute in approximately numIter * 4 clock cycles. Any particular outer thread will create 4 inner threads, each of which executes the operators corresponding to inner_tid + 4 one time.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 outer_tid)\n{\n    pipelined_for(4, [](uint32 inner_tid)\n    {\n        uint32 j = inner_tid + 4;\n\n        println(j);\n    });\n});\n\nThe previous two examples execute in the same amount of time. The first example introduces new threads with the outer pipelined_for call, and uses those threads to loop 4 times. The second example introduces new threads in two different places: the outer and inner pipelined_for calls. The second example is usually the better choice, as it exposes more concurrency (more threads) to the compiler. The complexity of the body of the inner loop determines how many threads are required to achieve peak performance. The second example can achieve peak performance with more complex code because there are more threads that execute the body of the loop. The first example should be used in cases where there are complex dependencies between iterations of the inner loop that are hard to express as communication between threads.\n\nThe next example will execute in approximately numIter * 2 clock cycles. Half of the outer threads will create four inner threads, the other half will create zero threads. Thus the average outer thread will create two inner threads.\n\nuint32 numIter;\n\npipelined_for(numIter, [](uint32 outer_tid)\n{\n    if (1 == (outer_tid & 1))\n    {\n        pipelined_for(4, [](uint32 inner_tid)\n        {\n            uint32 j = inner_tid + 4;\n\n            println(j);\n        });\n    }\n});\n\nThe next example will execute in approximately numIter * 2 clock cycles. Note how Helper is not marked inline . Helper corresponds to one piece of hardware that is shared by both call sites. Each thread executes through this hardware twice.\n\nuint32 Helper(uint32 x)\n{\n    return x + 1;\n}\n\nvoid Execute(uint32 numIter)\n{\n    pipelined_for(numIter, [](uint32 tid)\n    {\n       uint32 x = Helper(tid);\n\n       uint32 y = Helper(tid);\n\n       println(x + y);\n    });\n}\n\nIf Helper is marked inline, then the code snippet will execute in numIter clock cycles. This occurs because each call site to Helper will have unique hardware corresponding to the expression: x + 1 .\n\ninline uint32 Helper(uint32 x)\n{\n    return x + 1;\n}\n\nvoid Execute(uint32 numIter)\n{\n    pipelined_for(numIter, [](uint32 tid)\n    {\n       uint32 x = Helper(tid);\n\n       uint32 y = Helper(tid);\n\n       println(x + y);\n    });\n}\n\n\nIncreasing parallelism\n\nThis section describes the constructs in Sandpiper that enable peak parallelism to be increased. These techniques are useful when the parallelism of a given Sandpiper program is insufficient to meet performance goals. Increasing peak parallelism increases the amount of resources consumed by the generated hardware.\n\nstatic for replicates the body of the loop, causing operators to be replicated.\n\nuint32 numIter;\n\n// Throughput: one addition per clock cycle\n// Execution Time: numIter*4 clock cycles\n// Resources: One set of operators that implement the loop body\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32[4] src;\n    uint32[4] dst;\n\n    for (const auto i : 4)\n    {\n        dst[i] = src[i] + 1;\n    }\n});\n\n// Throughput: four additions per clock cycle\n// Execution Time: numIter clock cycles\n// Resources: Four sets of operators that implement the loop body\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32[4] src;\n    uint32[4] dst;\n\n    static for (const auto i : 4)\n    {\n        dst[i] = src[i] + 1;\n    }\n});\n\n// Throughput: two additions per clock cycle\n// Execution Time: numIter * 2 clock cycles\n// Resources: Two sets of operators that implement the loop body\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32[4] src;\n    uint32[4] dst;\n\n    for (const auto i : 2)\n    {\n        static for (const auto j : 2)\n        {\n            uint2 idx = (i * 2) + j;\n\n            dst[idx] = src[idx] + 1;\n        }\n    }\n});\n\ninline functions replicate the body of a function once per call site, causing operators to be replicated once per call site.\n\nuint32 numIter;\n\nuint32 AddOne(uint32 x)\n{\n    return x + 1;\n}\n\n// Throughput: one addition per clock cycle\n// Execution Time: numIter*4 clock cycles\npipelined_for(numIter, [](uint32 tid)\n{\n    uint32[4] src;\n    uint32[4] dst;\n\n    static for (const auto i : 4)\n    {\n        dst[i] = AddOne(src[i]);\n    }\n});\n\ninline uint32 AddOneInline(uint32 x)\n{\n    return x + 1;\n}\n\n// Throughput: four additions per clock cycle\n// Execution Time: numIter'}
04:26:10,365 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,366 openai._base_client INFO Retrying request to /chat/completions in 0.482000 seconds
04:26:10,439 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,441 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: Mapping To Hardware\n\n- Control Flow Overview Threads static for Conditions Call Site Multiple Call Sites async_exec pipelined_for pipelined_map pipelined_last atomic do Sequential Loops reorder Composition\n- Data Local Variables Arrays Memory Read Ports Write Ports Examples 2R2W memory 2R2W non-replicated memory\n- Reset Asynchronous Reset Synchronous Reset\n\n- Overview\n- Threads\n- static for\n- Conditions\n- Call Site\n- Multiple Call Sites\n- async_exec\n- pipelined_for\n- pipelined_map\n- pipelined_last\n- atomic do\n- Sequential Loops\n- reorder\n- Composition\n\n- Local Variables\n- Arrays\n- Memory Read Ports Write Ports Examples 2R2W memory 2R2W non-replicated memory\n\n- Read Ports\n- Write Ports\n- Examples 2R2W memory 2R2W non-replicated memory\n\n- 2R2W memory\n- 2R2W non-replicated memory\n\n- Asynchronous Reset\n- Synchronous Reset\n\nThis document describes how constructs in the source language map to circuits in the generated hardware. Understanding this material is not required for using Sandpiper, but can be helpful to those with a hardware background.\n\n\nControl Flow\n\n\nOverview\n\nLike most compilers for imperative languages, the Sandpiper compiler decomposes source code into basic blocks and branches. A basic block is a sequence of statements with the property that if a particular thread executes the first statement in a block, that thread will execute all statements in the block. A branch is a link between basic blocks. Each basic block corresponds to a pipeline in the generated hardware. Each branch corresponds to a FIFO in the generated hardware.\n\nThe function below corresponds to a single basic block. FIFOs hold the function arguments and the return value.\n\nuint32 F(uint32 x)\n{\n    uint32 y = x + 2;\n\n    uint32 z = y * 10;\n\n    return z / 4;\n}\n\n\nThreads\n\nThreads in Sandpiper are runtime constructs. The source does not specify the number of threads that will be created. A thread is defined by:\n\n- Context: A value for each local variable\n- Location: The next statement that the thread will execute\n\nIn the generated hardware, thread context is stored in pipeline registers or FIFOs. Thread locations change as the thread moves through generated pipelines. At any particular moment in time, a specific thread exists in either a specific pipeline stage or in a particular slot in a FIFO.\n\nThreads physically progress through the generated hardware in a way that is analogous to how threads logically progress through the statements in the source code. The following diagram illustrates how a set of threads progress through a function over time.\n\n\nstatic for\n\nstatic for replicates the body of the static for loop. If there are no data dependencies between loop iterations static for translates to a wide pipeline.\n\nuint32[4] x;\nuint32[4] y;\n\nstatic for (const auto i : 4)\n{\n    y[i] = (x[i] + 2) * 3;\n}\n\nThe depth of the generated pipeline can increase if there are data dependencies between loop iterations.\n\nuint32[4] x;\nuint32[4] y;\n\n// This variable is read and written by each loop iteration\nuint32 z = 3;\n\nstatic for (const auto i : 4)\n{\n    y[i] = (x[i] + 2) * z;\n\n    z = z + x[i];\n}\n\n\nConditions\n\nif/else and switch statements are implemented with multiplexers.\n\nuint32 x;\nuint32 y;\nuint32 z;\n\nif (x > 3)\n{\n    y = z;\n}\nelse\n{\n    y = 9;\n}\n\nMultiplexers are only inserted when needed to ensure correctness. For example, the following code:\n\nuint32 x;\nuint32 y;\nuint32 result = 19;\n\nif (x == 4)\n{\n    uint32 z = y + 4;\n    uint32 w = x * 6;\n\n    result = z - w;\n}\n\nproduces the same hardware as:\n\nuint32 x;\nuint32 y;\nuint32 result = 19;\nbool b = (x == 4);\n\n{\n    // Note how the variable \'b\' is not used to compute z nor w\n    uint32 z = y + 4;\n    uint32 w = x * 6;\n\n    result = b ? z - w : result;\n}\n\n\nCall Site\n\nFunction call sites require a FIFO that saves a per-thread context at the call site. In the example below, the local variables that are saved in the context are a and b . This FIFO is only required for function calls that are not inlined by the compiler.\n\nuint32 G(uint32 x)\n{\n    return x + 1;\n}\n\nuint32 F(uint32 a)\n{\n    uint32 b = a + 2;\n\n    uint32 c = G(a + 4);\n\n    return b + c;\n}\n\n\nMultiple Call Sites\n\nCalls to a non-inlined function from multiple call sites are implemented by adding a FIFO at each call site. An arbiter selects between these FIFOs and routes values into the entry FIFO for the called function. This arbiter uses a round-robin arbitration scheme for each call, except in the case where the called function has a boolean parameter with the end_transaction attribute.\n\nuint32 F(uint32 a)\n{\n    return G(a + 1);\n}\n\nuint32 H(uint32 b)\n{\n    return G(b + 2);\n}\n\nuint32 G(uint32 x)\n{\n    return 2*x;\n}\n\n\nasync_exec\n\nA call to async_exec is implemented with a single FIFO. For the common case of passing a lambda to async_exec , the FIFO holds the value of each variable captured by the lambda.\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>SANDPIPER<|>ORGANIZATION<|>Sandpiper is a compiler that maps source language constructs to circuits in generated hardware, facilitating understanding for those with a hardware background)\n##\n("entity"<|>FIFO<|>ORGANIZATION<|>FIFO (First In, First Out) is a hardware structure used by Sandpiper to hold function arguments, return values, and to implement function call sites and thread progression)\n##\n("entity"<|>MULTIPLEXER<|>ORGANIZATION<|>Multiplexer is a hardware component used by Sandpiper to implement if/else and switch statements, inserting them as needed for correctness)\n##\n("entity"<|>PIPELINE<|>ORGANIZATION<|>Pipeline is a hardware structure corresponding to basic blocks in source code, used by Sandpiper to store thread context and manage thread progression through hardware)\n##\n("relationship"<|>SANDPIPER<|>FIFO<|>Sandpiper uses FIFOs to manage data flow and function calls within the generated hardware<|>9)\n##\n("relationship"<|>SANDPIPER<|>MULTIPLEXER<|>Sandpiper uses multiplexers to implement conditional logic in the generated hardware<|>9)\n##\n("relationship"<|>SANDPIPER<|>PIPELINE<|>Sandpiper maps basic blocks of source code to pipelines in the generated hardware<|>9)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:26:10,441 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 27056, Requested 3196. Please try again in 503ms. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:26:10,442 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': "Mapping To Hardware\n\n- Control Flow Overview Threads static for Conditions Call Site Multiple Call Sites async_exec pipelined_for pipelined_map pipelined_last atomic do Sequential Loops reorder Composition\n- Data Local Variables Arrays Memory Read Ports Write Ports Examples 2R2W memory 2R2W non-replicated memory\n- Reset Asynchronous Reset Synchronous Reset\n\n- Overview\n- Threads\n- static for\n- Conditions\n- Call Site\n- Multiple Call Sites\n- async_exec\n- pipelined_for\n- pipelined_map\n- pipelined_last\n- atomic do\n- Sequential Loops\n- reorder\n- Composition\n\n- Local Variables\n- Arrays\n- Memory Read Ports Write Ports Examples 2R2W memory 2R2W non-replicated memory\n\n- Read Ports\n- Write Ports\n- Examples 2R2W memory 2R2W non-replicated memory\n\n- 2R2W memory\n- 2R2W non-replicated memory\n\n- Asynchronous Reset\n- Synchronous Reset\n\nThis document describes how constructs in the source language map to circuits in the generated hardware. Understanding this material is not required for using Sandpiper, but can be helpful to those with a hardware background.\n\n\nControl Flow\n\n\nOverview\n\nLike most compilers for imperative languages, the Sandpiper compiler decomposes source code into basic blocks and branches. A basic block is a sequence of statements with the property that if a particular thread executes the first statement in a block, that thread will execute all statements in the block. A branch is a link between basic blocks. Each basic block corresponds to a pipeline in the generated hardware. Each branch corresponds to a FIFO in the generated hardware.\n\nThe function below corresponds to a single basic block. FIFOs hold the function arguments and the return value.\n\nuint32 F(uint32 x)\n{\n    uint32 y = x + 2;\n\n    uint32 z = y * 10;\n\n    return z / 4;\n}\n\n\nThreads\n\nThreads in Sandpiper are runtime constructs. The source does not specify the number of threads that will be created. A thread is defined by:\n\n- Context: A value for each local variable\n- Location: The next statement that the thread will execute\n\nIn the generated hardware, thread context is stored in pipeline registers or FIFOs. Thread locations change as the thread moves through generated pipelines. At any particular moment in time, a specific thread exists in either a specific pipeline stage or in a particular slot in a FIFO.\n\nThreads physically progress through the generated hardware in a way that is analogous to how threads logically progress through the statements in the source code. The following diagram illustrates how a set of threads progress through a function over time.\n\n\nstatic for\n\nstatic for replicates the body of the static for loop. If there are no data dependencies between loop iterations static for translates to a wide pipeline.\n\nuint32[4] x;\nuint32[4] y;\n\nstatic for (const auto i : 4)\n{\n    y[i] = (x[i] + 2) * 3;\n}\n\nThe depth of the generated pipeline can increase if there are data dependencies between loop iterations.\n\nuint32[4] x;\nuint32[4] y;\n\n// This variable is read and written by each loop iteration\nuint32 z = 3;\n\nstatic for (const auto i : 4)\n{\n    y[i] = (x[i] + 2) * z;\n\n    z = z + x[i];\n}\n\n\nConditions\n\nif/else and switch statements are implemented with multiplexers.\n\nuint32 x;\nuint32 y;\nuint32 z;\n\nif (x > 3)\n{\n    y = z;\n}\nelse\n{\n    y = 9;\n}\n\nMultiplexers are only inserted when needed to ensure correctness. For example, the following code:\n\nuint32 x;\nuint32 y;\nuint32 result = 19;\n\nif (x == 4)\n{\n    uint32 z = y + 4;\n    uint32 w = x * 6;\n\n    result = z - w;\n}\n\nproduces the same hardware as:\n\nuint32 x;\nuint32 y;\nuint32 result = 19;\nbool b = (x == 4);\n\n{\n    // Note how the variable 'b' is not used to compute z nor w\n    uint32 z = y + 4;\n    uint32 w = x * 6;\n\n    result = b ? z - w : result;\n}\n\n\nCall Site\n\nFunction call sites require a FIFO that saves a per-thread context at the call site. In the example below, the local variables that are saved in the context are a and b . This FIFO is only required for function calls that are not inlined by the compiler.\n\nuint32 G(uint32 x)\n{\n    return x + 1;\n}\n\nuint32 F(uint32 a)\n{\n    uint32 b = a + 2;\n\n    uint32 c = G(a + 4);\n\n    return b + c;\n}\n\n\nMultiple Call Sites\n\nCalls to a non-inlined function from multiple call sites are implemented by adding a FIFO at each call site. An arbiter selects between these FIFOs and routes values into the entry FIFO for the called function. This arbiter uses a round-robin arbitration scheme for each call, except in the case where the called function has a boolean parameter with the end_transaction attribute.\n\nuint32 F(uint32 a)\n{\n    return G(a + 1);\n}\n\nuint32 H(uint32 b)\n{\n    return G(b + 2);\n}\n\nuint32 G(uint32 x)\n{\n    return 2*x;\n}\n\n\nasync_exec\n\nA call to async_exec is implemented with a single FIFO. For the common case of passing a lambda to async_exec , the FIFO holds the value of each variable captured by the lambda."}
04:26:10,590 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,590 openai._base_client INFO Retrying request to /chat/completions in 0.500000 seconds
04:26:10,782 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,782 openai._base_client INFO Retrying request to /chat/completions in 5.970000 seconds
04:26:10,862 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,862 openai._base_client INFO Retrying request to /chat/completions in 5.998000 seconds
04:26:10,961 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:10,961 openai._base_client INFO Retrying request to /chat/completions in 5.962000 seconds
04:26:11,189 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:11,189 openai._base_client INFO Retrying request to /chat/completions in 6.008000 seconds
04:26:11,612 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:11,613 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': 'MANY entities and relationships were missed in the last extraction. Remember to ONLY emit entities that match any of the previously extracted types. Add them below using the same format:\n', 'kwargs': {'history': [{'content': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: union is initialized to the specified value. Designated initializers (#designated-initializers) are recommended when initializing a union, because the name of the initialized field is explicitly specified in the source.\n\nunion U\n{\n    uint32 a;\n    uint16 b;\n}\n\nU u = { 0x12345678 }; // sets u.a = 0x12345678\n\n\nDesignated initializers\n\nDesignated initializers allow initializing instances of classes, structs, and unions. Each designator must name a direct data member of the type to be initialized. Designators do not have to appear in the same order as the data members in the type declaration.\n\nstruct Foo\n{\n    uint4 size;\n    bool valid;\n}\n\nFoo foo = {.valid = false, .size = 10};\n\nData members that are not named by any of the designators are implicitly initialized to {}, e.g.:\n\nstruct Foo\n{\n    uint4 size;\n    bool valid;\n}\n\nFoo foo = {.size = 10};\n\nis equivalent to:\n\nstruct Foo\n{\n    uint4 size;\n    bool valid;\n}\n\nFoo foo = {.size = 10, .valid = {}};\n\nThe implicit initialization doesn’t apply to members of a function type.\n\nImplicit narrowing conversions of initialization values in a designated initializer list are prohibited:\n\nstruct Foo\n{\n    uint4 size;\n    bool valid;\n}\n\nFoo foo = {.size = 100}; // error: Invalid conversion\n\nDesignated initializer used to initialize a union must specify at most one designator:\n\nunion Foo\n{\n    uint4 integer;\n    bool boolean;\n}\n\nFoo foo1 = {.integer = 10};\nFoo foo2 = {.boolean = true};\n\nSpecifying more than one designator in union initializer is an error:\n\nunion Foo\n{\n    uint4 integer;\n    bool boolean;\n}\n\nFoo foo3 = {.integer = 10, .boolean = true}; // error: Excess elements in union initializer\n\nDesignator can only name a direct data member of a type. Initialization of subaggregates is achieved using nested initialization lists, e.g.:\n\nstruct Foo\n{\n    bool valid;\n    uint4 index;\n}\n\nstruct Bar\n{\n    Foo[4] foos;\n}\n\nBar bar = { .foos =\n    { { .valid = false\n      , .index = 0\n      }\n    , { .valid = true\n      , .index = 1\n      }\n    }\n};\n\n\nObject initialization\n\nObjects may be initialized at instantiation point using the designated initializers:\n\nType name = {.member1 = value,\n             .member2 = value, ...};\n\nwhere the members are callbacks or nested objects. A callback can be initialized with a free function:\n\nuint2 go(uint32 x)\n{\n    return x;\n}\n\nclass Foo\n{\nprivate:\n    (uint32 x) -> uint2 callback;\n}\n\nvoid Run()\n{\n    // Initialize foo\'s callback to free function `go`\n    static Foo foo = {\n        .callback = go\n    };\n}\n\nor with a method of an object:\n\nclass Bux\n{\npublic:\n    uint2 go(uint32 x)\n    {\n        return x;\n    }\n}\n\nclass Foo\n{\nprivate:\n    (uint32)->uint2 callback;\n}\n\nclass Bar\n{\nprivate:\n    uint2 go(uint32 x)\n    {\n        return x;\n    }\n\n    // Initialize Foo\'s callback to a method of the\n    // current object\n    Foo foo1 = {\n        .callback = go\n    };\n\n    Bux bux;\n\n    // Initialize Foo\'s callback to a method of a\n    // nested object bux\n    Foo foo2 = {\n        .callback = bux.go\n    };\n}\n\nThe function used to initialize a callback must be compatible with the declared callback type.\n\nObject arrays are initialized using initialization list syntax:\n\nclass Foo\n{\nprivate:\n    (uint32)->uint32 callback;\n}\n\nuint32 go1(uint32 x)\n{\n    return x + 1;\n}\n\nuint32 go2(uint32 x)\n{\n    return x + 2;\n}\n\nvoid Run()\n{\n    static Foo[2] foo = {\n        { .callback = go1 },\n        { .callback = go2 }\n    };\n}\n\nCallbacks in nested objects can be initialized with nested initializers:\n\nuint32 AddOne(uint32 x)\n{\n    return x + 1;\n}\n\nclass Inner\n{\nprivate:\n    (uint32)->uint32 cb;\n}\n\nclass Outer\n{\nprivate:\n    Inner inner;\n}\n\nvoid Foo()\n{\n    static Outer _outer = { .inner = {.cb = AddOne} };\n}\n\nCallbacks of nested arrays of objects are initialized with an initializer list containing designated initializers:\n\nuint32 AddOne(uint32 x)\n{\n    return x + 1;\n}\n\nuint32 AddTwo(uint32 x)\n{\n    return x + 2;\n}\n\nclass Inner\n{\nprivate:\n    (uint32)->uint32 cb;\n}\n\nclass Outer\n{\nprivate:\n    Inner[2] inners;\n}\n\nvoid Foo()\n{\n    static Outer _outer = { .inners = { {.cb = AddOne}, {.cb = AddTwo} } };\n}\n\n\nConstant values\n\nVariables can be declared constant:\n\nconst auto x = 4;\nconst uint32 y = 5;\n\nA compile time error occurs if a statement attempts to modify a const variable.\n\nObjects cannot be declared const .\n\n\nStatic local variable instances\n\nA given static local variable may have many instances in the generated hardware. The following table describes how many instances are created for a static local variable.\n\n\nControl flow\n\n\nif/else\n\nuint32 c;\n\nif (c > 75)\n{\n    c += 75;\n}\nelse\n{\n    c = 0;\n}\n\nif/else ladders are supported:\n\nuint32 c;\n\nif (c > 75)\n{\n    c += 75;\n}\nelse if\n######################\nOutput:', 'role': 'user'}, {'role': 'assistant', 'content': '("entity"<|>U<|>ORGANIZATION<|>U is a union type in programming that allows storing different data types in the same memory location. It is initialized with a value that sets its member \'a\' to 0x12345678)\n##\n("entity"<|>FOO<|>ORGANIZATION<|>Foo is a struct type with members \'size\' and \'valid\'. It demonstrates the use of designated initializers for initializing instances of classes, structs, and unions)\n##\n("entity"<|>BAR<|>ORGANIZATION<|>Bar is a struct that contains an array of \'Foo\' structs, showcasing nested initialization lists for object initialization)\n##\n("entity"<|>GO<|>PERSON<|>Go is a free function used to initialize a callback in the example, demonstrating how objects can be initialized with functions or methods)\n##\n("entity"<|>BUX<|>ORGANIZATION<|>Bux is a class with a method \'go\', used to initialize a callback in another class \'Foo\', illustrating object-oriented programming and initialization of callbacks with methods)\n##\n("entity"<|>OUTER<|>ORGANIZATION<|>Outer is a class containing an \'Inner\' class instance, which has a callback \'cb\'. It shows how callbacks in nested objects can be initialized)\n##\n("entity"<|>INNER<|>ORGANIZATION<|>Inner is a class with a callback \'cb\', used within \'Outer\' to demonstrate nested object initialization)\n##\n("entity"<|>ADDONE<|>PERSON<|>AddOne is a function that increments its input by 1, used to initialize callbacks in the examples of nested object initialization)\n##\n("entity"<|>ADDTWO<|>PERSON<|>AddTwo is a function that increments its input by 2, used in the context of initializing callbacks in arrays of objects)\n##\n("relationship"<|>GO<|>U<|>The function \'go\' is used to demonstrate initialization of a callback in the context of union and struct examples<|>3)\n##\n("relationship"<|>BUX<|>FOO<|>Bux\'s method \'go\' is used to initialize a callback in class \'Foo\', showing the relationship between class methods and object initialization<|>4)\n##\n("relationship"<|>OUTER<|>INNER<|>Outer contains an instance of Inner, illustrating the use of nested objects and their initialization<|>5)\n##\n("relationship"<|>ADDONE<|>INNER<|>AddOne function is used to initialize the callback \'cb\' in Inner class, showing the function\'s role in object initialization<|>4)\n##\n("relationship"<|>ADDTWO<|>OUTER<|>AddTwo function is used in the context of initializing callbacks in an array within Outer class, indicating its use in complex object initialization<|>3)\n<|COMPLETE|>'}], 'name': 'extract-continuation-0'}}
04:26:11,613 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 158, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 84, in achat
    response = await self.model(prompt, history=history, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29525, Requested 3459. Please try again in 5.968s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:26:11,614 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': "union is initialized to the specified value. Designated initializers (#designated-initializers) are recommended when initializing a union, because the name of the initialized field is explicitly specified in the source.\n\nunion U\n{\n    uint32 a;\n    uint16 b;\n}\n\nU u = { 0x12345678 }; // sets u.a = 0x12345678\n\n\nDesignated initializers\n\nDesignated initializers allow initializing instances of classes, structs, and unions. Each designator must name a direct data member of the type to be initialized. Designators do not have to appear in the same order as the data members in the type declaration.\n\nstruct Foo\n{\n    uint4 size;\n    bool valid;\n}\n\nFoo foo = {.valid = false, .size = 10};\n\nData members that are not named by any of the designators are implicitly initialized to {}, e.g.:\n\nstruct Foo\n{\n    uint4 size;\n    bool valid;\n}\n\nFoo foo = {.size = 10};\n\nis equivalent to:\n\nstruct Foo\n{\n    uint4 size;\n    bool valid;\n}\n\nFoo foo = {.size = 10, .valid = {}};\n\nThe implicit initialization doesn’t apply to members of a function type.\n\nImplicit narrowing conversions of initialization values in a designated initializer list are prohibited:\n\nstruct Foo\n{\n    uint4 size;\n    bool valid;\n}\n\nFoo foo = {.size = 100}; // error: Invalid conversion\n\nDesignated initializer used to initialize a union must specify at most one designator:\n\nunion Foo\n{\n    uint4 integer;\n    bool boolean;\n}\n\nFoo foo1 = {.integer = 10};\nFoo foo2 = {.boolean = true};\n\nSpecifying more than one designator in union initializer is an error:\n\nunion Foo\n{\n    uint4 integer;\n    bool boolean;\n}\n\nFoo foo3 = {.integer = 10, .boolean = true}; // error: Excess elements in union initializer\n\nDesignator can only name a direct data member of a type. Initialization of subaggregates is achieved using nested initialization lists, e.g.:\n\nstruct Foo\n{\n    bool valid;\n    uint4 index;\n}\n\nstruct Bar\n{\n    Foo[4] foos;\n}\n\nBar bar = { .foos =\n    { { .valid = false\n      , .index = 0\n      }\n    , { .valid = true\n      , .index = 1\n      }\n    }\n};\n\n\nObject initialization\n\nObjects may be initialized at instantiation point using the designated initializers:\n\nType name = {.member1 = value,\n             .member2 = value, ...};\n\nwhere the members are callbacks or nested objects. A callback can be initialized with a free function:\n\nuint2 go(uint32 x)\n{\n    return x;\n}\n\nclass Foo\n{\nprivate:\n    (uint32 x) -> uint2 callback;\n}\n\nvoid Run()\n{\n    // Initialize foo's callback to free function `go`\n    static Foo foo = {\n        .callback = go\n    };\n}\n\nor with a method of an object:\n\nclass Bux\n{\npublic:\n    uint2 go(uint32 x)\n    {\n        return x;\n    }\n}\n\nclass Foo\n{\nprivate:\n    (uint32)->uint2 callback;\n}\n\nclass Bar\n{\nprivate:\n    uint2 go(uint32 x)\n    {\n        return x;\n    }\n\n    // Initialize Foo's callback to a method of the\n    // current object\n    Foo foo1 = {\n        .callback = go\n    };\n\n    Bux bux;\n\n    // Initialize Foo's callback to a method of a\n    // nested object bux\n    Foo foo2 = {\n        .callback = bux.go\n    };\n}\n\nThe function used to initialize a callback must be compatible with the declared callback type.\n\nObject arrays are initialized using initialization list syntax:\n\nclass Foo\n{\nprivate:\n    (uint32)->uint32 callback;\n}\n\nuint32 go1(uint32 x)\n{\n    return x + 1;\n}\n\nuint32 go2(uint32 x)\n{\n    return x + 2;\n}\n\nvoid Run()\n{\n    static Foo[2] foo = {\n        { .callback = go1 },\n        { .callback = go2 }\n    };\n}\n\nCallbacks in nested objects can be initialized with nested initializers:\n\nuint32 AddOne(uint32 x)\n{\n    return x + 1;\n}\n\nclass Inner\n{\nprivate:\n    (uint32)->uint32 cb;\n}\n\nclass Outer\n{\nprivate:\n    Inner inner;\n}\n\nvoid Foo()\n{\n    static Outer _outer = { .inner = {.cb = AddOne} };\n}\n\nCallbacks of nested arrays of objects are initialized with an initializer list containing designated initializers:\n\nuint32 AddOne(uint32 x)\n{\n    return x + 1;\n}\n\nuint32 AddTwo(uint32 x)\n{\n    return x + 2;\n}\n\nclass Inner\n{\nprivate:\n    (uint32)->uint32 cb;\n}\n\nclass Outer\n{\nprivate:\n    Inner[2] inners;\n}\n\nvoid Foo()\n{\n    static Outer _outer = { .inners = { {.cb = AddOne}, {.cb = AddTwo} } };\n}\n\n\nConstant values\n\nVariables can be declared constant:\n\nconst auto x = 4;\nconst uint32 y = 5;\n\nA compile time error occurs if a statement attempts to modify a const variable.\n\nObjects cannot be declared const .\n\n\nStatic local variable instances\n\nA given static local variable may have many instances in the generated hardware. The following table describes how many instances are created for a static local variable.\n\n\nControl flow\n\n\nif/else\n\nuint32 c;\n\nif (c > 75)\n{\n    c += 75;\n}\nelse\n{\n    c = 0;\n}\n\nif/else ladders are supported:\n\nuint32 c;\n\nif (c > 75)\n{\n    c += 75;\n}\nelse if"}
04:26:16,961 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:16,963 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: Verification\n\n- RTL Verification Hierarchical references\n- Coverage Parser Coverage Types Branch Coverage Basic Block Coverage Block Coverage Lower Bound Condition Coverage References Expression Coverage\n- RTL Coverage RTL Map RTL Map Contents basic_blocks nets debug_signals constant_signals unused_signals Global debug_signals Global constant_signals global_variables nets top_level_signals fifos nets top_level_signals named_ranges loop_generators nets top_level_signals\n- Basic Block Profiler Run-time changes Parser Profile Report By State Bit By State Bit (% of samples) By State Value Statistics Example\n- Collecting and parsing inspectables data Examples\n- ECC Error Injection\n- Interpreter options\n- Tracing options for the interpreter Creating VCD files Viewing VCD files Keyboard shortcuts with signal names pane selected Keyboard shortcuts with waveform pane selected Mouse actions with waveform pane selected\n\n- Hierarchical references\n\n- Parser\n- Coverage Types Branch Coverage Basic Block Coverage Block Coverage Lower Bound Condition Coverage References Expression Coverage\n\n- Branch Coverage\n- Basic Block Coverage Block Coverage Lower Bound\n- Condition Coverage References\n- Expression Coverage\n\n- Block Coverage Lower Bound\n\n- References\n\n- RTL Map RTL Map Contents basic_blocks nets debug_signals constant_signals unused_signals Global debug_signals Global constant_signals global_variables nets top_level_signals fifos nets top_level_signals named_ranges loop_generators nets top_level_signals\n\n- RTL Map Contents basic_blocks nets debug_signals constant_signals unused_signals Global debug_signals Global constant_signals global_variables nets top_level_signals fifos nets top_level_signals named_ranges loop_generators nets top_level_signals\n\n- basic_blocks nets debug_signals constant_signals unused_signals\n- Global debug_signals\n- Global constant_signals\n- global_variables nets top_level_signals\n- fifos nets top_level_signals named_ranges\n- loop_generators nets top_level_signals\n\n- nets\n- debug_signals\n- constant_signals\n- unused_signals\n\n- nets\n- top_level_signals\n\n- nets\n- top_level_signals\n- named_ranges\n\n- nets\n- top_level_signals\n\n- Run-time changes\n- Parser\n- Profile Report By State Bit By State Bit (% of samples) By State Value Statistics\n- Example\n\n- By State Bit\n- By State Bit (% of samples)\n- By State Value\n- Statistics\n\n- Examples\n\n- Creating VCD files\n- Viewing VCD files Keyboard shortcuts with signal names pane selected Keyboard shortcuts with waveform pane selected Mouse actions with waveform pane selected\n\n- Keyboard shortcuts with signal names pane selected\n- Keyboard shortcuts with waveform pane selected\n- Mouse actions with waveform pane selected\n\n\nRTL Verification\n\n\nHierarchical references\n\nShared variables (including memories) map to modules instances in the generated RTL. The mapping is stable across compilations and preserves names. It is possible to determine the name of a module instance corresponding to a shared variable in the source code. An RTL testbench can use a hierarchical reference to read the value of a shared variable directly. The mapping of source variables to module instance names is implementation dependent and may change with each version of the compiler.\n\n\nCoverage\n\nCode coverage can be enabled with the --code-coverage flag. This will automatically generate hardware to calculate code coverage. By default, these values are exposed as inspectable variables.\n\nInstead of exposing code coverage as inspectable variables, the --code-coverage-coverpoint will add the code coverage variables as coverpoints in the generated SystemVerilog. With the --code-coverage-coverpoint flag, code coverage is not generated for the interpreter.\n\n\nParser\n\nThe InspectablesParser tool can be used to process collected coverage data, provide summary percentages, and produce a pdrpt file that can be viewed using the Sandpiper VSCode Extension:\n\nInspectablesParser --coverage-report --inspectables CodeCoverage.csv --symbols PipeDreamGeneratedSymbols.csv --output coverage_report.pdrpt\n\nCodeCoverage.csv is created using the ReadInspectables API and PipeDreamGeneratedSymbols.csv is created when the Sandpiper compiler is run. See here for an example of using the ReadInspectables API.\n\nThe InspectablesParser tool can also be used to combine individual coverage files.\n\nInspectablesParser --combine-inspectables --output CombinedCoverage.csv --inspectables CodeCoverage0.csv --other-inspectables CodeCoverage1.csv\n\nYou can also exclude source files from the coverage analysis:\n\nInspectablesParser --coverage-report --inspectables CodeCoverage.csv --exclude fifo.pd --exclude chl/semaphore.pd --symbols PipeDreamGeneratedSymbols.csv --output coverage_report.pdrpt\n\nIn determining whether there is a match, the InspectablesParser tool attempts to match the right-most portion of the source file for the inspectable against the value supplied to the --exclude option.\n\n\nCoverage Types\n\n\nBranch Coverage\n\nCoverage of an if or if/else statement is: (T + F) / 2 . T is 1 if the condition expression ever evaluated to true (0 otherwise). F is 1 if the condition expression ever evaluated to false (0 otherwise).\n\nuint32 a;\nuint32 b;\n\n// The condition is: a < b\nif (a < b)\n{\n\n}\n\nCoverage of a loop is: (T + F) / 2 . T is 1 if the loop condition expression ever evaluated to true (0 otherwise). F is 1 if the loop condition expression ever evaluated to false (0 otherwise).\n\nuint32 a;\nuint32 b;\n\n// The loop condition is: i < a\nfor (const auto i : a)\n{\n\n}\n\nCoverage of a switch statement is: (C[0] + C[1] + ... + C[N-1]) / N . N is the number of cases in the switch statement (3 in the example below). C[i] is 1 if case i was ever executed (0 otherwise).\n\nuint32 a;\n\n// N = 3\nswitch (a)\n{\ncase 0:\n    break;\n\ncase 1:\n    break;\n\ndefault:\n    break;\n}\n\nCoverage of a mux or ternary (e.g., condition ? a : b ) statement\n######################\nOutput:', 'kwargs': {}}
04:26:16,963 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 29891, Requested 3099. Please try again in 5.98s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:26:16,964 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'Verification\n\n- RTL Verification Hierarchical references\n- Coverage Parser Coverage Types Branch Coverage Basic Block Coverage Block Coverage Lower Bound Condition Coverage References Expression Coverage\n- RTL Coverage RTL Map RTL Map Contents basic_blocks nets debug_signals constant_signals unused_signals Global debug_signals Global constant_signals global_variables nets top_level_signals fifos nets top_level_signals named_ranges loop_generators nets top_level_signals\n- Basic Block Profiler Run-time changes Parser Profile Report By State Bit By State Bit (% of samples) By State Value Statistics Example\n- Collecting and parsing inspectables data Examples\n- ECC Error Injection\n- Interpreter options\n- Tracing options for the interpreter Creating VCD files Viewing VCD files Keyboard shortcuts with signal names pane selected Keyboard shortcuts with waveform pane selected Mouse actions with waveform pane selected\n\n- Hierarchical references\n\n- Parser\n- Coverage Types Branch Coverage Basic Block Coverage Block Coverage Lower Bound Condition Coverage References Expression Coverage\n\n- Branch Coverage\n- Basic Block Coverage Block Coverage Lower Bound\n- Condition Coverage References\n- Expression Coverage\n\n- Block Coverage Lower Bound\n\n- References\n\n- RTL Map RTL Map Contents basic_blocks nets debug_signals constant_signals unused_signals Global debug_signals Global constant_signals global_variables nets top_level_signals fifos nets top_level_signals named_ranges loop_generators nets top_level_signals\n\n- RTL Map Contents basic_blocks nets debug_signals constant_signals unused_signals Global debug_signals Global constant_signals global_variables nets top_level_signals fifos nets top_level_signals named_ranges loop_generators nets top_level_signals\n\n- basic_blocks nets debug_signals constant_signals unused_signals\n- Global debug_signals\n- Global constant_signals\n- global_variables nets top_level_signals\n- fifos nets top_level_signals named_ranges\n- loop_generators nets top_level_signals\n\n- nets\n- debug_signals\n- constant_signals\n- unused_signals\n\n- nets\n- top_level_signals\n\n- nets\n- top_level_signals\n- named_ranges\n\n- nets\n- top_level_signals\n\n- Run-time changes\n- Parser\n- Profile Report By State Bit By State Bit (% of samples) By State Value Statistics\n- Example\n\n- By State Bit\n- By State Bit (% of samples)\n- By State Value\n- Statistics\n\n- Examples\n\n- Creating VCD files\n- Viewing VCD files Keyboard shortcuts with signal names pane selected Keyboard shortcuts with waveform pane selected Mouse actions with waveform pane selected\n\n- Keyboard shortcuts with signal names pane selected\n- Keyboard shortcuts with waveform pane selected\n- Mouse actions with waveform pane selected\n\n\nRTL Verification\n\n\nHierarchical references\n\nShared variables (including memories) map to modules instances in the generated RTL. The mapping is stable across compilations and preserves names. It is possible to determine the name of a module instance corresponding to a shared variable in the source code. An RTL testbench can use a hierarchical reference to read the value of a shared variable directly. The mapping of source variables to module instance names is implementation dependent and may change with each version of the compiler.\n\n\nCoverage\n\nCode coverage can be enabled with the --code-coverage flag. This will automatically generate hardware to calculate code coverage. By default, these values are exposed as inspectable variables.\n\nInstead of exposing code coverage as inspectable variables, the --code-coverage-coverpoint will add the code coverage variables as coverpoints in the generated SystemVerilog. With the --code-coverage-coverpoint flag, code coverage is not generated for the interpreter.\n\n\nParser\n\nThe InspectablesParser tool can be used to process collected coverage data, provide summary percentages, and produce a pdrpt file that can be viewed using the Sandpiper VSCode Extension:\n\nInspectablesParser --coverage-report --inspectables CodeCoverage.csv --symbols PipeDreamGeneratedSymbols.csv --output coverage_report.pdrpt\n\nCodeCoverage.csv is created using the ReadInspectables API and PipeDreamGeneratedSymbols.csv is created when the Sandpiper compiler is run. See here for an example of using the ReadInspectables API.\n\nThe InspectablesParser tool can also be used to combine individual coverage files.\n\nInspectablesParser --combine-inspectables --output CombinedCoverage.csv --inspectables CodeCoverage0.csv --other-inspectables CodeCoverage1.csv\n\nYou can also exclude source files from the coverage analysis:\n\nInspectablesParser --coverage-report --inspectables CodeCoverage.csv --exclude fifo.pd --exclude chl/semaphore.pd --symbols PipeDreamGeneratedSymbols.csv --output coverage_report.pdrpt\n\nIn determining whether there is a match, the InspectablesParser tool attempts to match the right-most portion of the source file for the inspectable against the value supplied to the --exclude option.\n\n\nCoverage Types\n\n\nBranch Coverage\n\nCoverage of an if or if/else statement is: (T + F) / 2 . T is 1 if the condition expression ever evaluated to true (0 otherwise). F is 1 if the condition expression ever evaluated to false (0 otherwise).\n\nuint32 a;\nuint32 b;\n\n// The condition is: a < b\nif (a < b)\n{\n\n}\n\nCoverage of a loop is: (T + F) / 2 . T is 1 if the loop condition expression ever evaluated to true (0 otherwise). F is 1 if the loop condition expression ever evaluated to false (0 otherwise).\n\nuint32 a;\nuint32 b;\n\n// The loop condition is: i < a\nfor (const auto i : a)\n{\n\n}\n\nCoverage of a switch statement is: (C[0] + C[1] + ... + C[N-1]) / N . N is the number of cases in the switch statement (3 in the example below). C[i] is 1 if case i was ever executed (0 otherwise).\n\nuint32 a;\n\n// N = 3\nswitch (a)\n{\ncase 0:\n    break;\n\ncase 1:\n    break;\n\ndefault:\n    break;\n}\n\nCoverage of a mux or ternary (e.g., condition ? a : b ) statement'}
04:26:17,47 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:17,48 openai._base_client INFO Retrying request to /chat/completions in 5.964000 seconds
04:26:17,303 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:17,304 openai._base_client INFO Retrying request to /chat/completions in 5.974000 seconds
04:26:17,863 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:26:17,959 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:17,960 openai._base_client INFO Retrying request to /chat/completions in 6.974000 seconds
04:26:18,191 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:26:18,296 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:18,297 openai._base_client INFO Retrying request to /chat/completions in 6.720000 seconds
04:26:23,113 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:23,114 graphrag.callbacks.file_workflow_callbacks INFO Error Invoking LLM details={'prompt': '\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity\'s attributes and activities\nFormat each entity as ("entity"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as ("relationship"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis\'s Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n("entity"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n("entity"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n("entity"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis\'s money supply)\n##\n("relationship"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal\'s (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation\'s debut on the public markets isn\'t indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n("entity"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n("entity"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n("relationship"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad\'s capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia\'s capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia\'s Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n("entity"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n("entity"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n("entity"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n("entity"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n("entity"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n("entity"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n("entity"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia\'s Alhamia Prison)\n##\n("entity"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n("entity"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n("entity"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n("relationship"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n("relationship"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n("relationship"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n("relationship"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: contains one entry for each register or wire declared in the global variable. Each entry comprises and identifier name and a width (in bits).\n\n\ntop_level_signals\n\nThe per-global-variable top_level_signals array contains one entry for each signal declared in top-level and connected to this global variable. Each entry comprises and identifier name and a width(in bits).\n\n\nfifos\n\nThe fifos array contains 1 object per FIFO instance in the generated RTL. Each FIFO contains the identifiers for the corresponding module and instance. FIFOs also contain the following members, each of which is a JSON array.\n\n\nnets\n\nThe nets array contains one entry for each register or wire declared inside the FIFO including its sub-instances. Each entry comprises and identifier name and a width (in bits).\n\n\ntop_level_signals\n\nThe per-FIFO top_level_signals array contains one entry for each signal declared in top-level and connected to this FIFO. Each entry comprises and identifier name and a width(in bits).\n\n\nnamed_ranges\n\nEach element of the named_ranges array associates a name with a contiguous set of bits in the FIFO. This can be used to generate exclusions for a subset of bits in a FIFO.\n\n\nloop_generators\n\nThe loop_generators array contains 1 object per loop generator instance in the generated RTL. Each loop generator contains the identifiers for the corresponding module and instance. loop generators also contain the following members, each of which is a JSON array.\n\n\nnets\n\nThe nets array contains one entry for each register or wire declared in the loop generator. Each entry comprises and identifier name and a width (in bits).\n\n\ntop_level_signals\n\nThe per-loop-generator top_level_signals array contains one entry for each signal declared in top-level and connected to this loop generator. Each entry comprises and identifier name and a width(in bits).\n\n\nBasic Block Profiler\n\nThe basic block profiler is intended to help identify performance bottlenecks in Sandpiper programs. It is a host-side facility that collects data during the execution of a program, either in hardware or in the interpreter, and a tool to analyze the data and create a visualizable report.\n\nProfiling works by periodically recording the status of all basic blocks, using the inspectables mechanism. Some status bits are indicative of poor performance, for instance being blocked on an output FIFO full condition. The visualized report make those conditions apparent to the user.\n\nThe profiler is based on statistical sampling and cannot guarantee that all exceptional conditions will be caught. The assumption is that poor performance is caused by sub-optimal conditions that are frequently occurring.\n\n\nRun-time changes\n\nA host program uses the profiler via the C++ class PipeDream::Profiler defined in the header file PipeDreamProfiler.h. The profiler communicates with the PipeDream::Proxy in order to access the inspectables. The profiler can be Started/Stopped and restarted as appropriate to analyze the relevant execution stages. Profile data is written by the object’s destructor into a CSV-formatted text file.\n\n\nParser\n\nThe InspectablesParser tool processes code coverage and profile data, using the program’s symbol files to create a JSON-formatted report. The tool takes the following arguments specific to profiling.\n\nprofiler-report Required. Selects the profiling facility.\n\nsymbols filename Required. Selects the symbols for the Sandpiper program, for instance PipeDreamGeneratedSymbols.csv.\n\nprofile filename Required. Selects the profile data generated by the PipeDream::Profiler.\n\noutput filename Required. Name of the report file to be generated, for instance test.pdrpt.\n\nsources path Optional. Location of the program’s sources. Sandpiper symbol files only contain filenames, no filesystem paths. The report visualizer in the VSCode extension instead requires full paths. The tool uses the path argument to resolve all filenames in the symbol file. It searches down from path and selects the first match. User will want to be specific in case they have duplicate filenames in their source repositories.\n\n\nProfile Report\n\nThe report is best visualized using the Sandpiper extension for Visual Studio Code. The user selects the report file, for instance test.pdrpt, in the explorer pane. The Sandpiper extension opens the file and reformats the data into a tabular shape.\n\nThere are four selectable views (projections) in the report: By State Bit , By State Bit (% of samples) , By State Value , and Statistics . Each view creates a table that can be re-sorted by clicking on a column. The following columns are common to all views.\n\nName The basic block name, in the form functionName_BasicBlock_number\n\nLocation Source filename and line number. Clicking on a location opens an editor pane at the given line number.\n\n\nBy State Bit\n\nIn the By State Bit view each column corresponds to a state bit, as follows. Values are the times the profiler found the bit set in the given basic block. The last two columns indicate error conditions.\n\nInputEmpty The input FIFO was empty\n\nWaitNotMet The atomic do loop condition did not evaluate to false\n\nOutputFull The output FIFO was full\n\nSemaphoreFull The semaphore count limit was reached\n\nInputUndfl The input FIFO underflowed\n\nOutputOvfl The output FIFO overflowed\n\n\nBy State Bit (% of samples)\n\nThis view is similar to By State Bit , but the values are expressed as percentages relative to the number of samples collected.\n\n\nBy State Value\n\nIn the By State Value view each column corresponds to a combination of state bits. In the monikers S-number the number part is the decimal value of the bit combo, interpreted as follows.\n\nS0_9 Block active(0) or WaitNotMet(9)\n\nS9 InputEmpty and WaitNotMet\n\nS3 InputEmpty and OutputFull\n\nS10 OutputFull and WaitNotMet\n\nS11 InputEmpty and OutputFull and WaitNotMet\n\nS5 InputEmpty and SemaphoreFull\n\nS6 OutputFull and SemaphoreFull\n\nS7 InputEmpty and OutputFull and SemaphoreFull\n\nS12 SemaphoreFull and WaitNotMet\n\nS13 Input\n######################\nOutput:', 'kwargs': {}}
04:26:23,114 graphrag.index.operations.extract_graph.graph_extractor ERROR error extracting graph
Traceback (most recent call last):
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 118, in __call__
    result = await self._process_document(text, prompt_variables)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/index/operations/extract_graph/graph_extractor.py", line 146, in _process_document
    response = await self._model.achat(
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/graphrag/language_model/providers/fnllm/models.py", line 82, in achat
    response = await self.model(prompt, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_chat_llm.py", line 94, in __call__
    return await self._text_chat_llm(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/services/openai_tools_parsing.py", line 130, in __call__
    return await self._delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 144, in __call__
    return await self._decorated_target(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/json.py", line 78, in invoke
    return await delegate(prompt, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/cached.py", line 115, in invoke
    result = await delegate(prompt, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/services/rate_limiter.py", line 75, in invoke
    result = await delegate(prompt, **args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/base/base_llm.py", line 126, in _decorator_target
    output = await self._execute_llm(prompt, kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/fnllm/openai/llm/openai_text_chat_llm.py", line 157, in _execute_llm
    completion = await self._client.chat.completions.create(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/resources/chat/completions/completions.py", line 2028, in create
    return await self._post(
           ^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1742, in post
    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/sbarke/.local/lib/python3.11/site-packages/openai/_base_client.py", line 1549, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4-turbo-preview in organization org-RkohyA8dc9m9CMRc0tpGjZOs on tokens per min (TPM): Limit 30000, Used 27538, Requested 3131. Please try again in 1.338s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}
04:26:23,115 graphrag.callbacks.file_workflow_callbacks INFO Entity Extraction Error details={'doc_index': 0, 'text': 'contains one entry for each register or wire declared in the global variable. Each entry comprises and identifier name and a width (in bits).\n\n\ntop_level_signals\n\nThe per-global-variable top_level_signals array contains one entry for each signal declared in top-level and connected to this global variable. Each entry comprises and identifier name and a width(in bits).\n\n\nfifos\n\nThe fifos array contains 1 object per FIFO instance in the generated RTL. Each FIFO contains the identifiers for the corresponding module and instance. FIFOs also contain the following members, each of which is a JSON array.\n\n\nnets\n\nThe nets array contains one entry for each register or wire declared inside the FIFO including its sub-instances. Each entry comprises and identifier name and a width (in bits).\n\n\ntop_level_signals\n\nThe per-FIFO top_level_signals array contains one entry for each signal declared in top-level and connected to this FIFO. Each entry comprises and identifier name and a width(in bits).\n\n\nnamed_ranges\n\nEach element of the named_ranges array associates a name with a contiguous set of bits in the FIFO. This can be used to generate exclusions for a subset of bits in a FIFO.\n\n\nloop_generators\n\nThe loop_generators array contains 1 object per loop generator instance in the generated RTL. Each loop generator contains the identifiers for the corresponding module and instance. loop generators also contain the following members, each of which is a JSON array.\n\n\nnets\n\nThe nets array contains one entry for each register or wire declared in the loop generator. Each entry comprises and identifier name and a width (in bits).\n\n\ntop_level_signals\n\nThe per-loop-generator top_level_signals array contains one entry for each signal declared in top-level and connected to this loop generator. Each entry comprises and identifier name and a width(in bits).\n\n\nBasic Block Profiler\n\nThe basic block profiler is intended to help identify performance bottlenecks in Sandpiper programs. It is a host-side facility that collects data during the execution of a program, either in hardware or in the interpreter, and a tool to analyze the data and create a visualizable report.\n\nProfiling works by periodically recording the status of all basic blocks, using the inspectables mechanism. Some status bits are indicative of poor performance, for instance being blocked on an output FIFO full condition. The visualized report make those conditions apparent to the user.\n\nThe profiler is based on statistical sampling and cannot guarantee that all exceptional conditions will be caught. The assumption is that poor performance is caused by sub-optimal conditions that are frequently occurring.\n\n\nRun-time changes\n\nA host program uses the profiler via the C++ class PipeDream::Profiler defined in the header file PipeDreamProfiler.h. The profiler communicates with the PipeDream::Proxy in order to access the inspectables. The profiler can be Started/Stopped and restarted as appropriate to analyze the relevant execution stages. Profile data is written by the object’s destructor into a CSV-formatted text file.\n\n\nParser\n\nThe InspectablesParser tool processes code coverage and profile data, using the program’s symbol files to create a JSON-formatted report. The tool takes the following arguments specific to profiling.\n\nprofiler-report Required. Selects the profiling facility.\n\nsymbols filename Required. Selects the symbols for the Sandpiper program, for instance PipeDreamGeneratedSymbols.csv.\n\nprofile filename Required. Selects the profile data generated by the PipeDream::Profiler.\n\noutput filename Required. Name of the report file to be generated, for instance test.pdrpt.\n\nsources path Optional. Location of the program’s sources. Sandpiper symbol files only contain filenames, no filesystem paths. The report visualizer in the VSCode extension instead requires full paths. The tool uses the path argument to resolve all filenames in the symbol file. It searches down from path and selects the first match. User will want to be specific in case they have duplicate filenames in their source repositories.\n\n\nProfile Report\n\nThe report is best visualized using the Sandpiper extension for Visual Studio Code. The user selects the report file, for instance test.pdrpt, in the explorer pane. The Sandpiper extension opens the file and reformats the data into a tabular shape.\n\nThere are four selectable views (projections) in the report: By State Bit , By State Bit (% of samples) , By State Value , and Statistics . Each view creates a table that can be re-sorted by clicking on a column. The following columns are common to all views.\n\nName The basic block name, in the form functionName_BasicBlock_number\n\nLocation Source filename and line number. Clicking on a location opens an editor pane at the given line number.\n\n\nBy State Bit\n\nIn the By State Bit view each column corresponds to a state bit, as follows. Values are the times the profiler found the bit set in the given basic block. The last two columns indicate error conditions.\n\nInputEmpty The input FIFO was empty\n\nWaitNotMet The atomic do loop condition did not evaluate to false\n\nOutputFull The output FIFO was full\n\nSemaphoreFull The semaphore count limit was reached\n\nInputUndfl The input FIFO underflowed\n\nOutputOvfl The output FIFO overflowed\n\n\nBy State Bit (% of samples)\n\nThis view is similar to By State Bit , but the values are expressed as percentages relative to the number of samples collected.\n\n\nBy State Value\n\nIn the By State Value view each column corresponds to a combination of state bits. In the monikers S-number the number part is the decimal value of the bit combo, interpreted as follows.\n\nS0_9 Block active(0) or WaitNotMet(9)\n\nS9 InputEmpty and WaitNotMet\n\nS3 InputEmpty and OutputFull\n\nS10 OutputFull and WaitNotMet\n\nS11 InputEmpty and OutputFull and WaitNotMet\n\nS5 InputEmpty and SemaphoreFull\n\nS6 OutputFull and SemaphoreFull\n\nS7 InputEmpty and OutputFull and SemaphoreFull\n\nS12 SemaphoreFull and WaitNotMet\n\nS13 Input'}
04:26:23,374 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:23,374 openai._base_client INFO Retrying request to /chat/completions in 1.352000 seconds
04:26:25,50 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:25,50 openai._base_client INFO Retrying request to /chat/completions in 6.774000 seconds
04:26:25,124 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:25,124 openai._base_client INFO Retrying request to /chat/completions in 6.420000 seconds
04:26:27,670 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:26:27,767 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:27,767 openai._base_client INFO Retrying request to /chat/completions in 4.556000 seconds
04:26:31,634 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:31,635 openai._base_client INFO Retrying request to /chat/completions in 0.560000 seconds
04:26:31,935 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:31,935 openai._base_client INFO Retrying request to /chat/completions in 0.536000 seconds
04:26:32,442 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:32,443 openai._base_client INFO Retrying request to /chat/completions in 6.706000 seconds
04:26:32,573 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:32,573 openai._base_client INFO Retrying request to /chat/completions in 6.718000 seconds
04:26:36,265 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:26:37,642 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:26:39,244 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:39,244 openai._base_client INFO Retrying request to /chat/completions in 0.900000 seconds
04:26:39,381 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:39,382 openai._base_client INFO Retrying request to /chat/completions in 0.902000 seconds
04:26:40,372 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:26:40,372 openai._base_client INFO Retrying request to /chat/completions in 6.862000 seconds
04:26:44,348 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:26:58,975 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:06,785 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:08,474 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:09,220 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:09,296 graphrag.utils.storage INFO reading table from storage: entities.parquet
04:27:09,299 graphrag.utils.storage INFO reading table from storage: relationships.parquet
04:27:09,371 graphrag.utils.storage INFO reading table from storage: entities.parquet
04:27:09,376 graphrag.utils.storage INFO reading table from storage: relationships.parquet
04:27:09,434 graphrag.utils.storage INFO reading table from storage: text_units.parquet
04:27:09,438 graphrag.utils.storage INFO reading table from storage: entities.parquet
04:27:09,442 graphrag.utils.storage INFO reading table from storage: relationships.parquet
04:27:09,513 graphrag.utils.storage INFO reading table from storage: relationships.parquet
04:27:09,517 graphrag.utils.storage INFO reading table from storage: entities.parquet
04:27:09,521 graphrag.utils.storage INFO reading table from storage: communities.parquet
04:27:09,531 graphrag.index.operations.summarize_communities.graph_context.context_builder INFO Number of nodes at level=0 => 29
04:27:09,747 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:27:09,748 openai._base_client INFO Retrying request to /chat/completions in 3.210000 seconds
04:27:09,754 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:27:09,755 openai._base_client INFO Retrying request to /chat/completions in 1.368000 seconds
04:27:09,801 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:27:09,802 openai._base_client INFO Retrying request to /chat/completions in 1.290000 seconds
04:27:11,211 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:27:11,211 openai._base_client INFO Retrying request to /chat/completions in 4.550000 seconds
04:27:13,56 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:27:13,57 openai._base_client INFO Retrying request to /chat/completions in 4.548000 seconds
04:27:17,708 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
04:27:17,708 openai._base_client INFO Retrying request to /chat/completions in 4.562000 seconds
04:27:22,461 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:28,333 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:28,960 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:32,300 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:34,674 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:44,957 httpx INFO HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
04:27:45,20 graphrag.utils.storage INFO reading table from storage: documents.parquet
04:27:45,25 graphrag.utils.storage INFO reading table from storage: relationships.parquet
04:27:45,30 graphrag.utils.storage INFO reading table from storage: text_units.parquet
04:27:45,34 graphrag.utils.storage INFO reading table from storage: entities.parquet
04:27:45,38 graphrag.utils.storage INFO reading table from storage: community_reports.parquet
04:27:45,44 graphrag.index.workflows.generate_text_embeddings INFO Creating embeddings
04:27:45,44 graphrag.index.operations.embed_text.embed_text INFO using vector store lancedb with container_name default for embedding community.full_content: default-community-full_content
04:27:45,85 graphrag.index.operations.embed_text.strategies.openai INFO embedding 6 inputs via 6 snippets using 1 batches. max_batch_size=16, batch_max_tokens=8191
04:27:45,328 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:45,514 graphrag.index.operations.embed_text.embed_text INFO using vector store lancedb with container_name default for embedding entity.description: default-entity-description
04:27:45,518 graphrag.index.operations.embed_text.strategies.openai INFO embedding 56 inputs via 56 snippets using 4 batches. max_batch_size=16, batch_max_tokens=8191
04:27:46,208 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:46,312 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:46,355 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:46,423 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:46,597 graphrag.index.operations.embed_text.embed_text INFO using vector store lancedb with container_name default for embedding text_unit.text: default-text_unit-text
04:27:46,643 graphrag.index.operations.embed_text.strategies.openai INFO embedding 50 inputs via 50 snippets using 8 batches. max_batch_size=16, batch_max_tokens=8191
04:27:46,953 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:47,126 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:47,271 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:47,284 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:47,286 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:47,332 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:47,385 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:47,444 httpx INFO HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
04:27:47,655 graphrag.cli.index INFO All workflows completed successfully.
