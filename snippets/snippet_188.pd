inline float32 sin(float32 x)
{
    const auto structValue = cast<float32PackedFormat>(x);
    float32PackedFormat result;

    const specialCaseFlags flags = getSpecialCases<Denorm::On>(structValue);

    // x pass to result directly when input <= 2^-12
    const bool isSmallValue = structValue.exponent <= 115;

    const auto Fbit = 54;
    const auto valueInPiOver2 = to_piOver2<Fbit, false>(structValue);

    // table lookup
    const auto isInternalSmallValue = valueInPiOver2.second.first;
    const auto sineValue = isInternalSmallValue ? valueInPiOver2.second.second : sin_lookup<Fbit>(valueInPiOver2.second.second);

    // output
    result.sign = valueInPiOver2.first ^ structValue.sign;

    const auto leadingOne = highest_one<uint<1 + 27>>(sineValue >> (Fbit - 27));
    int8 exponent = leadingOne.value - 27;

    sim_assert(Fbit + exponent >= 24);
    const auto truncatedSineValue = sineValue >> (Fbit + exponent - 24);
    const auto roundedSineValue = (truncatedSineValue >> 1) + (truncatedSineValue & 1);
    exponent = exponent + (roundedSineValue >> 24);

    result.exponent = (flags.nan || flags.inf) ? 0xFF : (exponent + 127);
    result.mantissa = (flags.nan || flags.inf) ? 0x1 : cast<decltype(result.mantissa)>(roundedSineValue);

    return isSmallValue ? x : cast<float32>(result);
}