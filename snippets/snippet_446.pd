import data.array
import data.bits
import data.memory
import data.optional
import type.coerce
import type.stdtype

//| Memory supporting reads/writes of up to `WordSize` elements per cycle at
// aligned or unaligned address. The class internally instantiates `WordSize`
// logical memories that are `bitsizeof T` wide and `TotalSize / WordSize` deep.
template
    < typename T                                            //< Type of the memory element
    , auto WordSize                                         //< Number of elements per word
    , auto TotalSize                                        //< Total number of elements in memory
    , template <typename, auto> typename Memory = memory    //< Memory implementation
    >
class unaligned_read_unaligned_write_memory
{
private:
    using element_index_t = index_t<WordSize>;

public:
    using addr_t = index_t<TotalSize>;
    using element_count_t = count_t<WordSize>;
    using word_t = T[WordSize];

inline read_word_t read(addr_t addr)
    {
        T[NumHorizontalBanks][NumVerticalBanks][BankWordSize] per_bank_value;

        static for(const auto h : NumHorizontalBanks)
        {
            const auto hoffset = (NumHorizontalBanks - h - 1) * WordSize;

            auto bank_addr = (addr + hoffset) / (NumHorizontalBanks * BankWordSize);

            // read per-bank data into local array
            static for(const auto v : NumVerticalBanks)
            {
                const auto voffset = (NumVerticalBanks - v) - 1;

                per_bank_value[h][v] = mem[h][v][(bank_addr + voffset) / NumVerticalBanks];
            }
        }

        // rotate
        const auto AllBanksWordSize = NumHorizontalBanks * WordSize;
        read_word_t value;
        if (AllBanksWordSize > 1)
        {
            auto per_bank_value_flattened = cast<T[AllBanksWordSize]>(per_bank_value);
            index_t<AllBanksWordSize> rotate_amount = addr;
            value = rotate_array_right<ReadWordSize>(per_bank_value_flattened, rotate_amount);
        }
        else
        {
            value = reinterpret_cast<read_word_t>(per_bank_value);
        }
        return value;
    }
}
