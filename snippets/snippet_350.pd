import data.bits
import data.optional
import numeric.fixed.internal as internal
import numeric.int.operator as intop

//| Fixed-point representation.
template<auto I /*< Integer bit-width.*/, auto F /*< Fractional bit-width.*/>
struct fixed
{
    int<I + F> value;
}

template<auto I, auto F>
inline optional<fixed<I, F>> log2(fixed<I, F> x)
{
    return make_optional(x.value > 0, log2_calc(x));
}
