import data.array
import data.bits
import data.memory
import data.optional
import type.coerce
import type.stdtype

//| Memory supporting reads/writes of up to `WordSize` elements per cycle at
// aligned or unaligned address. The class internally instantiates `WordSize`
// logical memories that are `bitsizeof T` wide and `TotalSize / WordSize` deep.
template
    < typename T                                            //< Type of the memory element
    , auto WordSize                                         //< Number of elements per word
    , auto TotalSize                                        //< Total number of elements in memory
    , template <typename, auto> typename Memory = memory    //< Memory implementation
    >
class unaligned_read_unaligned_write_memory
{
private:
    using element_index_t = index_t<WordSize>;

public:
    using addr_t = index_t<TotalSize>;
    using element_count_t = count_t<WordSize>;
    using word_t = T[WordSize];

template <auto N = 1>
    inline word_t read(addr_t addr)
    {
        static assert((N & (N - 1)) == 0);
        static assert((WordSize / N) * N == WordSize);
        sim_assert((addr & (N - 1)) == 0);

        word_t per_bank_value;

        // read per-channel data into local array
        static for(const auto i : WordSize)
        {
            const auto offset = checked_cast<element_index_t>((WordSize - i) - 1);

            per_bank_value[i] = mem[i][(addr + offset) / WordSize];
        }

        // rotate
        const auto rotate_amount = cast<index_t<WordSize / N>>(addr / N);
        return cast<word_t>(rotate_array_right<WordSize / N>(cast<T[WordSize / N][N]>(per_bank_value), rotate_amount));
    }
}
