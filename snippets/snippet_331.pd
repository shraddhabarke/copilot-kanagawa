//| If `a * b` cannot be represented exactly return invalid.

template<auto Width>
inline uint<Width> fieldsToDecimal(auto integer, auto exponent, uint1 sign)
{
    return toDecimal<Width>(
    {
        .integer = cast<decimal<Width>::parsed_integer_t>(integer),
        .exponent = cast<decimal<Width>::parsed_exponent_t>(integer),
        .sign = sign
    });
}

template<auto Width, auto Max, auto Bias>
inline optional<uint<Width>> mul_exactly_internal(decimalParsedValue<Width> a, decimalParsedValue<Width> b)
{
    const auto sign = (a.sign == b.sign) ? 0 : 1;
    const auto mul = a.integer * b.integer;
    const auto exponent = a.exponent + b.exponent - Bias;
    const auto isNormal = exponent >= 0;
    return {(mul <= Max) && isNormal, toDecimal<Width>({mul, exponent, sign})};
}
