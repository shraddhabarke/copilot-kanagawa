import data.array
import data.memory.bank.schedule
import data.optional
import numeric.int.operator
import sync.atomic as sync

//| A memory that is physically accessed over multiple clock cycles.
template
    < typename T //< The type of data stored in the memory.
    , auto Depth //< Total number of elements stored in the memory.
    , auto Banks //< Number physical memories that the logical memory comprises.
    , template <typename, auto> typename Memory = memory //< Type of underlying memory to use.
    >
 
inline T read
    ( addr_t addr //< Address of the element to read.
    )
{
    T result;
    auto decomposed_addr = decompose_address(addr);
    static for (const auto i : Banks)
    {
        if (i == decomposed_addr.first)
        {
            result = _memories[i][decomposed_addr.second];
        }
    }
    return result;
}
