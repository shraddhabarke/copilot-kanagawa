inline void print_instr( Instruction instr //< Disassembled instruction mnemonic, usually returned by `disasm`){switch (instr)
    {
        case Instruction::LUI:       print("lui"); break;
        case Instruction::AUIPC:     print("auipc"); break;
        case Instruction::JAL:       print("jal"); break;
        case Instruction::JALR:      print("jalr"); break;
        case Instruction::BEQ:       print("beq"); break;
        case Instruction::BNE:       print("bne"); break;
        case Instruction::BLT:       print("blt"); break;
        case Instruction::BGE:       print("bge"); break;
        case Instruction::BLTU:      print("bltu"); break;
        case Instruction::BGEU:      print("bgeu"); break;
        case Instruction::LB:        print("lb"); break;
        case Instruction::LH:        print("lh"); break;
        case Instruction::LW:        print("lw"); break;
        case Instruction::LBU:       print("lbu"); break;
        case Instruction::LHU:       print("lhu"); break;
        case Instruction::SB:        print("sb"); break;
        case Instruction::SH:        print("sh"); break;
        case Instruction::SW:        print("sw"); break;
        case Instruction::ADDI:      print("addi"); break;
        case Instruction::SLTI:      print("slti"); break;
        case Instruction::SLTIU:     print("sltiu"); break;
        case Instruction::XORI:      print("xori"); break;
        case Instruction::ORI:       print("ori"); break;
        case Instruction::ANDI:      print("andi"); break;
        case Instruction::SLLI:      print("slli"); break;
        case Instruction::SRLI:      print("srli"); break;
        case Instruction::SRAI:      print("srai"); break;
        case Instruction::ADD:       print("add"); break;
        case Instruction::SUB:       print("sub"); break;
        case Instruction::SLL:       print("sll"); break;
        case Instruction::SLT:       print("slt"); break;
        case Instruction::SLTU:      print("sltu"); break;
        case Instruction::XOR:       print("xor"); break;
        case Instruction::SRL:       print("srl"); break;
        case Instruction::SRA:       print("sra"); break;
        case Instruction::OR:        print("or"); break;
        case Instruction::AND:       print("and"); break;
        case Instruction::FENCE:     print("fence"); break;
        case Instruction::ECALL:     print("ecall"); break;
        case Instruction::EBREAK:    print("ebreak"); break;
        case Instruction::MUL:       print("mul"); break;
        case Instruction::MULH:      print("mulh"); break;
        case Instruction::MULHSU:    print("mulhsu"); break;
        case Instruction::MULHU:     print("mulhu"); break;
        case Instruction::CSRR:      print("csrr"); break;
        case Instruction::RDCYCLE:   print("rdcycle"); break;
        case Instruction::RDCYCLEH:  print("rdcycleh"); break;
        case Instruction::RDTIME:    print("rdtime"); break;
        case Instruction::RDTIMEH:   print("rdtimeh"); break;
        case Instruction::RDINSTRET: print("rdinstret"); break;
        case Instruction::RET:       print("ret"); break;
        case Instruction::J:         print("j"); break;
        case Instruction::JR:        print("jr"); break;
        case Instruction::LI:        print("li"); break;
        case Instruction::NOP:       print("nop"); break;
        case Instruction::MV:        print("mv"); break;
        case Instruction::UNKNOWN:   print("unknown"); break;
    }