import hardware.config
import data.array

using transaction_size_t=uint64;

class DRAM
{
public:
    uint512 read(uint64 addr, transaction_size_t size, [[last]] bool is_last);
    void write(uint64 addr, transaction_size_t size, uint512 data, uint64 byte_enable, [[last]] bool is_last);
}

extern DRAM;

//| A wrapper over the external Verilog interface to FPGA on-board DRAM.
// It provides methods to read and write DRAM.
class DramChannel
{
private:
    DRAM _dram;

public:
inline void Write
    ( uint64 addr             //< Byte address of the DRAM word to write.
                              // This address must be 64B aligned (lower 6 bits zero).
    , transaction_size_t size //< Size of the write, in bytes.
    , uint512 data
    , bool is_last            //< Set to true on the last write of the transaction, false otherwise.
                              // This parameter guarantees that data written from two different DRAM
                              // transactions are not inadvertently interleaved.
    )
{AssertAlignment(addr, size);
        AssertIsLast(size, is_last);

        bool[64] byte_enable = replicate<64>(true);

        _dram.write(addr, size, data, cast<uint64>(byte_enable), is_last);
    }
}
