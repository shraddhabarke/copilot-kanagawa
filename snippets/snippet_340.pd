import data.array
import data.optional
import data.tuple
import data.vector as vec
import numeric.int.operator

// Validate all bank indices are less than Banks.
// In the case where Banks=1, index_t<Banks> is uint<1> and could have the value 1.

template <auto Banks, typename Address, auto Addresses>
inline bool validate_bank_indices
    ( optional<Address>[Addresses] addresses
    , (Address) -> index_t<Banks> address_to_bank_index
    ) {
    return all
        ( [address_to_bank_index](optional<Address> address)
          {
              return !address.is_valid || address_to_bank_index(address.value) < Banks;
          }
        , addresses
        );
}
