//| For each iteration, calculate the pair:
//
//  1. The optional address indices for each bank.
//  2. The optional bank index for each address.
template
    < auto Banks
    , typename Address
    , auto Addresses   //< Number of addresses processed per call.
    >
inline pair<optional<index_t<Addresses>>[Banks], optional<index_t<Banks>>[Addresses]> schedule_read_requests
    ( Address[Addresses] addresses                      //< Input addresses, duplicates allowed.
    , (Address) -> index_t<Banks> address_to_bank_index //< Map `Address` to bank index.
    , index_t<Addresses> iteration                      //< Index of bank requests to retrieve from schedule.
    )
{
    // Example:
    // 3 Banks, 5 addresses per call.
    // unique_addresses =  {0, x, 3, 2, 1}
    // bank_indices     =  {0, 0, 2, 1, 1}
    // -----------------------------------
    // table = { {true,  0, 0}
    //         , {false, 0, 1}
    //         , {true,  2, 2}
    //         , {true,  1, 3}
    //         , {true,  1, 4}
    //         }
    // ----------------------------------
    // masked_table bank 0 = { {true,  0}
    //                       , {false, 1}
    //                       , {false, 2}
    //                       , {false, 3}
    //                       , {false, 4}
    //                       }
    // masked_table bank 1 = { {false, 0}
    //                       , {false, 1}
    //                       , {false, 2}
    //                       , {true,  3}
    //                       , {true,  4}
    //                       }
    // masked_table bank 2 = { {false, 0}
    //                       , {false, 1}
    //                       , {true,  2}
    //                       , {false, 3}
    //                       , {false, 4}
    //                       }
    // ------------------------------------
    // gathered_table bank 0 = { {true,  0}
    //                         , {false, 1}
    //                         , {false, 2}
    //                         , {false, 3}
    //                         , {false, 4}
    //                         }
    // gathered_table bank 1 = { {true,  3}
    //                         , {true,  4}
    //                         , {false, 0}
    //                         , {false, 1}
    //                         , {false, 2}
    //                         }
    // gathered_table bank 2 = { {true,  2}
    //                         , {false, 0}
    //                         , {false, 1}
    //                         , {false, 3}
    //                         , {false, 4}
    //                         }
    // ------------------------------------
    // iteration 0:
    // iteration_address_indices = {0, 3, 2}
    // iteration_bank_indices    = {0, x, 2, 1, x}
    //
    // iteration 1:
    // iteration_address_indices = {x, 4, x}
    // iteration_bank_indices    = {x, x, x, x, 1}

    optional<Address>[Addresses] unique_addresses = unique(addresses);
    auto iai = schedule_requests(unique_addresses, address_to_bank_index, iteration);

    // Calculate iteration_bank_indices.
    // For each address a:
    // Return true if any element a' of iteration_address_indices is valid
    // and addresses[a'.value] == a.
    // Finally, zip the valids together with the bank_indices into an optional.
    bool[Addresses] valid_addresses = map
        ( [iai, addresses](Address address)
          {
              return any
                  ( [addresses, address](optional<index_t<Addresses>> iteration_address_index)
                    {
                        return iteration_address_index.is_valid && addresses[iteration_address_index.value] == address;
                    }
                  , iai
                  );
          }
        , addresses
        );
    auto bank_indices = map(address_to_bank_index, addresses);
    auto iteration_bank_indices = zip_with(make_optional<index_t<Banks>>, valid_addresses, bank_indices);
    return make_pair(iai, iteration_bank_indices);
}
