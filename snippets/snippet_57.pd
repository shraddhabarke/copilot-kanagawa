import data.array
const auto Depth = 512;
memory<uint32, Depth> _input_data;
uint32 _result;

// An integer wide enough to represent an index into _input_data
using element_index_t = index_t<Depth>;

uint32 sum_pipelined_for()
{
    _result = 0;
    pipelined_for(Depth, [](element_index_t i)
    {
        const uint32 input = _input_data[i];
        atomic
        {
            _result += input;
        }
    });
    return _result;
}
