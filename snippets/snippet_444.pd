import data.array
import data.bits
import data.memory
import data.optional
import type.coerce
import type.stdtype

//| Memory supporting reads/writes of up to `WordSize` elements per cycle at
// aligned or unaligned address. The class internally instantiates `WordSize`
// logical memories that are `bitsizeof T` wide and `TotalSize / WordSize` deep.
template
    < typename T                                            //< Type of the memory element
    , auto WordSize                                         //< Number of elements per word
    , auto TotalSize                                        //< Total number of elements in memory
    , template <typename, auto> typename Memory = memory    //< Memory implementation
    >
class unaligned_read_unaligned_write_memory
{
private:
    using element_index_t = index_t<WordSize>;

public:
    using addr_t = index_t<TotalSize>;
    using element_count_t = count_t<WordSize>;
    using word_t = T[WordSize];

template <auto N = 1>
    inline void write(addr_t addr, word_t value, element_count_t size)
    {
        static assert((N & (N - 1)) == 0);
        static assert((WordSize / N)*N == WordSize);
        sim_assert((addr & (N - 1)) == 0);
        sim_assert((size & (N - 1)) == 0);

        // Attach write mask to data elements
        auto mask = mask_less_than<WordSize / N>(size / N);
        auto data_with_mask = zip_with(make_optional<T[N]>, mask, cast<T[WordSize / N][N]>(value));

        // Rotate both mask and data
        const auto rotate_amount = cast<index_t<WordSize / N>>(addr / N);
        const auto per_bank_data_with_mask = rotate_array_left<WordSize / N>(data_with_mask, rotate_amount);

        static for(const auto i : WordSize / N)
        {
            if (per_bank_data_with_mask[i].is_valid)
            {
                const auto offset = checked_cast<element_index_t>((WordSize - i * N) - 1);

                static for(const auto j : N)
                {
                    mem[i * N + j][(addr + offset) / WordSize] = per_bank_data_with_mask[i].value[j];
                }
            }
        }
    }
}
