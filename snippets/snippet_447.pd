import data.array
import data.bits
import data.memory
import data.optional
import type.coerce
import type.stdtype

//| Memory supporting reads/writes of up to `WordSize` elements per cycle at
// aligned or unaligned address. The class internally instantiates `WordSize`
// logical memories that are `bitsizeof T` wide and `TotalSize / WordSize` deep.
template
    < typename T                                            //< Type of the memory element
    , auto WordSize                                         //< Number of elements per word
    , auto TotalSize                                        //< Total number of elements in memory
    , template <typename, auto> typename Memory = memory    //< Memory implementation
    >
class unaligned_read_unaligned_write_memory
{
private:
    using element_index_t = index_t<WordSize>;

public:
    using addr_t = index_t<TotalSize>;
    using element_count_t = count_t<WordSize>;
    using word_t = T[WordSize];

inline void write_aligned(addr_t addr, word_t value)
    {
        sim_assert((addr & (WordSize - 1)) == 0);

        auto per_bank_value = cast<T[NumVerticalBanks][BankWordSize]>(value);

        auto word_addr = addr / WordSize;
        auto mask = reinterpret_cast<bool[NumHorizontalBanks]>(1 << cast<index_t<NumHorizontalBanks>>(word_addr));

        static for(const auto h : NumHorizontalBanks)
        {
            if (NumHorizontalBanks == 1 || mask[h])
            {
                static for(const auto v : NumVerticalBanks)
                {
                    mem[h][v][word_addr / NumHorizontalBanks] = per_bank_value[v];
                }
            }
        }
    }
}
