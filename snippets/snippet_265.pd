import data.array
import data.counter
import data.fifo

template
    < typename T          //< Type returned by lambda argument to `async`.
    , auto ReturnDepth    //< Depth of return value FIFO (maximum number of `fork<i>` results that can
                          //  be buffered ahead of a corresponding `async` call). A recommended value
                          //  would be 32 allowing it to be implemented in LUTRAM.
    , auto WaitForDepth   //< Depth of the wait-for FIFO (maximum number of threads that can queue
                          //  inside `await`). A conservative value would be 32 allowing it to be
                          //  implemented in LUTRAM, however, for lambdas that typically take more
                          //  than 32 cycles to return, this should be increased.
    >
class async_await
{
    FIFO<T, ReturnDepth, true /* EnqueueBlocking */, false /* DequeueBlocking */> _returnFifo;
    // Use a separate counter so that it can be atomically check-and-decremented independently
    // of the FIFO dequeue operation.
    // This counter cannot overflow since it is only incremented after a successful blocking
    // _returnFifo.enqueue() call
    counter<ReturnDepth, 0> _returnCount;
public:
    //| Spawn a new thread that calls the provided lambda.
    // Out-of-order behaviour can occur if multiple calls (causing multiple
    // inlines) to the same method on the same instance exists and is thus
    // not recommended.
    inline void async(() -> T task)
    {
        async_then<T>(task,
            [](T value)
            {
                _returnFifo.enqueue(value);
                _returnCount.increment();
            }
        );
    }
    //| Check to see if the async function has returned.
    // It is exposed as a public function to provide the option for a consumer
    // to wait on multiple `async_await` instances simultaneously (e.g. `fork_join`).
    inline bool check()
    {
        auto count = _returnCount.count();
        return count != 0;
    }
    //| Decrement the return counter if argument is true.
    inline void decrement(bool value)
    {
        sim_assert(!value || _returnCount.count() != 0);
        _returnCount.subtract(cast<uint1>(value));
    }
    //| Wait for task started by `async` to complete and return its result.
    T await()
    {
        inline bool check_and_decrement()
        {
            auto result = check();
            decrement(result);
            return result;
        }
        [[fifo_depth(WaitForDepth)]] wait_for(check_and_decrement());
        return dequeue();
    }
    //| Pop the value returned by the lambda function to `async`.
    // This function is called by `await`.
    // It is exposed as a public function since `check`, which would typically
    // be called from a `wait_for`, is unable to return anything but the check
    // result. The intention is to allow the consumer to `wait_for(check_and_decrement())`
    // and then `dequeue`.
    inline T dequeue()
    {
        return _returnFifo.dequeue();
    }
};
