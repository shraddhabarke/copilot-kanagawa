import control.fsm
import data.array
import data.array as A
import data.bits
import data.optional
import data.optional as O
import data.representation
import data.vector
import data.vector as V
import sync.atomic

//| Class which can evaluate the set of possible states that an input string
// can reach in a non-deterministic finite automata.
template
    < auto InputWidth                        //< Number of inputs per cycle.
    , auto StateCount                        //< Number of states in the NFA.
    , typename T = uint8                     //< Input element type.
    , auto TableDepth = (1 << bitsizeof(T))  //< Number of elements in the table which describes the NFA.
    , auto MaxOutDegree = StateCount         //< Maximum out-degree of any node in the NFA graph.
    , auto MaxBackwardJump = StateCount      //< The maximum value of `N` for any state transition
                                             // from state `I` to state `I-N`.
    , auto MaxForwardJump = StateCount       //< The maximum value of `N` for any state transition
                                             // from state `I` to state `I+N`.
    >
class nfa
{
public:
    //| Bit vector representation of a state.
    // Multiple bits can be set, which represents the case where the input seen so far
    // could result in the NFA ending in multiple states.
    using state_t = bool[StateCount];

    //| Describes a single vertex in the NFA graph.
    using vertex_t = index_t<StateCount>;

    //| Describes the edges leaving a particular vertex in the NFA graph.
    using out_edges_t = vector<vertex_t, MaxOutDegree>;

    //| One element of the table describing the NFA.
    // There is one table element for each possible input.
    // Element `i` of a `table_element_t` describes the
    // outgoing edges of the NFA to execute
    // if state `i` is enabled.
    using table_element_t = out_edges_t[StateCount];


state_t[StateCount] updates = speculate_updates([input, table_elements](index_t<StateCount> vertex_id)
        {
            // Determine how the inputs will affect state
            // if the NFA state before processing those inputs
            // has `vertex_id` enabled.
           state_t curr_state = binary_to_one_hot<StateCount>(vertex_id);
           static for (const auto input_element_index : InputWidth)
           {
               if (input_element_index < input.size) {
                state_t updated_state = {};
                table_element_t table_element = table_elements[input_element_index];
                static for (const auto src_vertex : StateCount)
                {
                    if (curr_state[src_vertex]) 
                    { 
                        out_edges_t out_edges = table_element[src_vertex];
                        static for (const auto dst_vertex : StateCount)
                        {
                            // Reduce resource consumption by only checking 
                            // updates which are deemed possible by the MaxBackwardJump and MaxForwardJump parameters 
                            if (static((dst_vertex == src_vertex) || 
                                       ((dst_vertex < src_vertex) && ((src_vertex - dst_vertex) <= (MaxBackwardJump * (input_element_index + 1)))) || 
                                       ((dst_vertex > src_vertex) && ((dst_vertex - src_vertex) <= (MaxForwardJump * (input_element_index + 1)))))) 
                            { 
                                static for (const auto out_edge_index : MaxOutDegree) 
                                { 
                                    if (out_edge_index < out_edges.size) 
                                    { 
                                        vertex_t out_vertex = out_edges.data[out_edge_index];
                                        if (out_vertex == dst_vertex) {
                                            updated_state[dst_vertex] = true;  
                                        } } } } } } }  
                curr_state = updated_state; } }
        return curr_state;    },
    {});
}
