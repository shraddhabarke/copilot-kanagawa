import numeric.float.internal
import data.bits

const auto _mantissa_width = 23;
const auto _exponent_width = 8;
const auto _exponent_bias = 127;

using float32PackedFormat = floatPackedFormat<23, 8>;

struct float32ExpandedFormat
{
    uint24 mantissa;
    int9 exponent;
    uint1 sign;
}

struct float32StickyFormat
{
    uint1 sticky;
    uint26 mantissaGuardRound;
    int10 exponent;
    uint1 sign;
}

struct productFormat
{
    uint24 sticky;
    uint1 round;
    uint1 guard;
    uint24 product;
}

template<Denorm denorm_mode>
inline float32ExpandedFormat unpackFloat32(float32PackedFormat a)
{
    float32ExpandedFormat a_PostUnpack;
    a_PostUnpack.sign = a.sign;

    if (denorm_mode == Denorm::Off)
    {
        a_PostUnpack.exponent = cast<int9>(a.exponent) - 127;
        a_PostUnpack.mantissa = a.mantissa | 1 << 23;
    }
    else
    {
        a_PostUnpack.exponent = (a.exponent == 0) ? -126 : cast<int9>(a.exponent) - 127;
        a_PostUnpack.mantissa = (a.exponent == 0) ? a.mantissa : a.mantissa | (1 << 23);
    }

    return a_PostUnpack;
}
