inline auto add(A a, B b)
{
    static assert(!limits<A>::is_signed);
    static assert(!limits<B>::is_signed);

    // Inputs must be less than M
    sim_assert(a < M);
    sim_assert(b < M);

    static if (((M & (M - 1)) == 0))
    {
        // M is a power of 2, simply throw away upper bits
        return cast<index_t<M>>(a + b);
    }
    else
    {
        auto result = a + b;

        // Check if the addition overflowed, substract the modulus value if it did.
        // This is done with a subtraction (expensive operation) followed by checking the sign bit (cheap operation)
        // rather than comparison (expensive) followed by subtraction (expensive)
        auto diff = result - M;

        if (!sign_bit(diff))
        {
            // A subtraction of M is sufficient to restore result to [0, M)
            // because both inputs are < M
            result = cast<decltype(result)>(diff);
        }

        sim_assert(result < M);

        return cast<index_t<M>>(result);
    }
}