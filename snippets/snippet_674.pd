memory_norep<codeLengthFreq_t, MaxCodeLength + 1> _codeLengthFreq;
memory<codeBits_t, MaxCodeLength + 1> _nextCode;
[[pipelined]] void compute_next_code_and_assign(index_t<MaxCodeLength + NumSymbols> tid, codeLength_t maxCodeLength) {
    auto nextCodeLength = tid + 1;
    auto nextCodeLengthFreq = _codeLengthFreq[tid];
    auto tid_minus_maxCodeLength = tid - maxCodeLength;
    symbol_t assignCodeSym = tid_minus_maxCodeLength;
    auto assignCode = code(assignCodeSym);
    if (tid == 0) {
        sim_assert(nextCodeLengthFreq == 0);
        _nextCode[0] = 0; }
    atomic {
        auto readAddr = (tid_minus_maxCodeLength < 0) ? tid : assignCode.length;
        auto snappedNextCode = _nextCode[readAddr];
        index_t<MaxCodeLength + 1> writeAddr;
        codeBits_t writeValue;
        if (tid_minus_maxCodeLength < 0) {
            // ADAPTED FROM https://www.ietf.org/rfc/rfc1951.txt
            // 2)  Find the numerical value of the smallest code for each
            //     code length.
            writeAddr = nextCodeLength;
            writeValue = (snappedNextCode + nextCodeLengthFreq) << 1; }
        else if (assignCode.length != 0) {
            // ADAPTED FROM https://www.ietf.org/rfc/rfc1951.txt
            // 3)  Assign numerical values to all codes, using consecutive
            //     values for all codes of the same length with the base
            //     values determined at step 2. Codes that are never used
            //     (which have a bit length of zero) must not be assigned a
            //     value.
             assignCode.code = snappedNextCode;
            writeAddr = assignCode.length;
             writeValue = snappedNextCode + 1;
         }
         _nextCode[writeAddr] = writeValue;
     }
     if (tid_minus_maxCodeLength >= 0 && assignCode.length != 0)
         _codebook[assignCodeSym] = assignCode;
 }