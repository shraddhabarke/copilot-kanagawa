import data.counter
import data.memory.unaligned
import numeric.int.operator.unsigned as unsigned

//| A cyclic buffer with the following functionality:
//
// - One data word can be written at a time until the buffer is full
// - Words can be freed to create new write space in a FIFO manner
// - Any valid element (written and not freed) can be read, even if not aligned to a
//   word boundary
template
    < typename T        //< Type of each element of the buffer.
    , auto WordSize     //< Number of elements per data word.
    , auto ReadWordSize //< Number of elements to be returned per read.
                        // Must be <= to WordSize.
    , auto TotalSize    //< Total size of memory in elements.
    , typename AddrType = uint64
                        //< Type to accumulate number of written and freed words.
                        // __Ensure this will not overflow between calls to reset__.
                        // Additionally, used to access and free buffer elements.
    >
class unaligned_cyclic_buffer
{
private:
    using unaligned_memory_t = unaligned_read_aligned_write_memory<T, WordSize, ReadWordSize, TotalSize>;
    unaligned_memory_t _cyclicBufferMem;
    const auto Depth = TotalSize / WordSize;
public:
    using addr_t = AddrType;
private:
    // Next entry address (in words) that will be written into cyclic buffer.
    addr_t _writeAddr = 0;
    // Next entry address (in words) to free/remove from cyclic buffer.
    addr_t _freeAddr = 0;

    // Number of free words available for writing
    counter<Depth, Depth> _freeCounter;

public:
    using word_t = unaligned_memory_t::word_t;
    using read_word_t = unaligned_memory_t::read_word_t;

    //| Reset cyclic buffer. This is not thread-safe and should not be called
    // while any other functions are running.

void reset()
    {
        // Free any entries in the buffer
        atomic
        {
            auto freeCount = _freeCounter.count();
            _freeCounter.add(Depth - freeCount);
            // Ensure _freeCounter is full after reset
            sim_assert(_freeCounter.count() == Depth);
        }

        _writeAddr = 0;
        _freeAddr = 0;
    }
}
