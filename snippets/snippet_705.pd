//| Implement a pseudo-random number generator by hashing a counter with
// a Toeplitz hash implementation. This implementation is more expensive
// than LFSR, but gives a result that is more analogous to the `std::random`
// algorithms in C++.
//
// A reasonable key for 256-bit or smaller widths is:
// `0x6D5A1BA6540E36AE7384C94779710E89BAB5778362E9B302C3A2CF202B5615A9`
template
    < auto Width          //< The width of the output in bits, as well as the width of the internal counter.
    , auto KeyWidth       //< The width of the Toeplitz hash key in bits.
    , uint<KeyWidth> Key  //< Toeplitz hash key. The width of the key must be greater than or equal to the output `Width`.
    , auto PipelineCycles //< Pipeline cycles to use for the hash calculation. A value of 1 gives maximum throughput
                          // but consumes maximum area. Values larger than one reduce throughput and consume less area.
    >
class toeplitz_random
{
private:
    toeplitz<PipelineCycles, Width, Width, KeyWidth, Key> _hash;
    uint<Width> _counter = 1;

public:

toeplitz<PipelineCycles, Width, Width, KeyWidth, Key> _hash;
uint<Width> _counter = 1;
uint<Width> next
        ( bool set_seed    //< If true, the random number will be seeded with the specified seed.
        , uint<Width> seed //< The number to seed the random number generator. Ignored if `set_seed` is false.
        )
    {
        uint<Width> counter;

        atomic
        {
            counter = set_seed ? seed : _counter;

            _counter = modular::increment(counter);
        }

        return _hash.calc_hash(counter);
    }
}
