class RISC_V
{
    using core_t = Core<
        HARTS,
        IMEM_LENGTH,
        DMEM_LENGTH,
        MMIO_LENGTH,
        IMEM_ORIGIN,
        DMEM_ORIGIN,
        MMIO_ORIGIN,
        IMEM_TCM_SIZE,
        Memory,
        EXTENSIONS,
        CONFIG,
        ISA,
        BTB_SIZE>;

public:
    using system_trap_t    = core_t::system_trap_t;
    using trace_t          = core_t::trace_t;
    using mmio_access_t    = core_t::mmio_access_t;
    using mmio_load_t      = core_t::mmio_load_t;
    using mmio_store_t     = core_t::mmio_store_t;
    using external_fetch_t = core_t::external_fetch_t;
    using custom_decode_t  = core_t::custom_decode_t;
    using custom_execute_t = core_t::custom_execute_t;

    using imem_addr_t      = core_t::imem_addr_t;
    using dmem_addr_t      = core_t::dmem_addr_t;
    using register_index_t = core_t::register_index_t;
    using int_t            = core_t::int_t;
    using uint_t           = core_t::uint_t;
    using hart_index_t     = core_t::hart_index_t;


inline void init_stack_pointers
     ( uint_t stack_start //< Start address of the stack. Must be 16 byte aligned.
                          // Since the stack grows down, the starting address usually
                           // is set to `DMEM_ORIGIN + DMEM_LENGTH - 0x10`
      , uint_t stack_size  //< Size of the stack for each hart.
       ) {
     sim_assert(running == false);
      static for(const auto hid : HARTS) {
          // By ABI calling convention stack pointer should be 16 bytes aligned.
          sim_assert((stack_start & 0xf) == 0);
          // Don't generate invalid stack pointers
          sim_assert(stack_start - stack_size >= DMEM_ORIGIN && stack_start < DMEM_ORIGIN + DMEM_LENGTH ||
                     stack_start - stack_size >= MMIO_ORIGIN && stack_start < MMIO_ORIGIN + MMIO_LENGTH);
           core.register_set(hid, ABI::sp, cast<int_t>(stack_start));
           static if ((CONFIG & Option::HartsShareDMEM) == Option::HartsShareDMEM)
           {
               // Set a different stack pointer for each hart.
               stack_start -= stack_size;
           }
       }
    }
}
