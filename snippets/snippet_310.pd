//| Returns `(a - b) mod M`.
// `a` and `b` must be less than `M`.
template
    < typename A                    //< Type of the first operand.  Must be unsigned.
    , typename B                    //< Type of the second operand.  Must be unsigned.
    , auto M = (1 << bitsizeof(T))  //< Modulus value.
    >

inline auto sub(A a, B b)
{
    static assert(!limits<A>::is_signed);
    static assert(!limits<B>::is_signed);

    // Inputs must be less than M
    sim_assert(a < M);
    sim_assert(b < M);

    static if (((M & (M - 1)) == 0))
    {
        // M is a power of 2, simply throw away upper bits
        return cast<index_t<M>>(a - b);
    }
    else
    {
        auto result = a - b;

        // Check if the subtraction underflowed.  Add the modulus value if it did.
        // Check for underflow is implemented by checking the sign bit.
        if (sign_bit(result))
        {
            // A single addition of M is sufficient to restore result to [0, M)
            // because both inputs are < M
            result = result + M;

            sim_assert(result >= 0);
        }

        sim_assert(result < M);

        return cast<index_t<M>>(result);
    }
}
