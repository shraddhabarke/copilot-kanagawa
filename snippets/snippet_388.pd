inline optional<bid64_t> sub_exactly(bid64_t in1, bid64_t in2)
{
    const auto a = parseDecimalValue<_width>(in1);
    const auto b = parseDecimalValue<_width>(in2);
    const auto a_flags = getSpecialCases_internal<_width>(in1);
    const auto b_flags = getSpecialCases_internal<_width>(in2);

    optional<bid64_t> result;
    if (a_flags.nan || b_flags.nan)
    {
        result.is_valid = true;
        result.value = decimal64_constants::DEFAULT_NAN;
    }
    else if (a_flags.inf || b_flags.inf)
    {
        result.is_valid = true;
        if(a_flags.inf && b_flags.inf)
        {
            result.value = (a.sign == b.sign) ? decimal64_constants::DEFAULT_NAN :
                     (a.sign == 0) ? decimal64_constants::POS_INFINITY : decimal64_constants::NEG_INFINITY;
        }
        else
        {
            result.value = ((a.sign == 1 && !b_flags.inf) || (b.sign == 0 && !a_flags.inf)) ?
                decimal64_constants::NEG_INFINITY : decimal64_constants::POS_INFINITY;
        }
    }
    else if(a_flags.zero)
    {
        result.is_valid = true;
        result.value = neg(in2);
    }
    else if(b_flags.zero)
    {
        result.is_valid = true;
        result.value = in1;
    }
    else
    {
        result = add_exactly_internal<_width, _max_integer>(a, {b.integer, b.exponent, ~b.sign});
    }
    return result;
}