import numeric.decimal.internal

const auto _width = 64;
const auto _bias = 398;
const auto _max_integer = 9999999999999999;

using bid64_t = uint<_width>;
using decimal64PackedFormat_t = decimalPackedFormat<_width>;

enum decimal64_constants: uint64
{
    POS_MAX       = 0x77FB86F26FC0FFFF,
    NEG_MAX       = 0xF7FB86F26FC0FFFF,
    POS_ZERO      = 0x31C0000000000000,
    NEG_ZERO      = 0xB1C0000000000000,
    POS_ONE       = 0x31C0000000000001,
    NEG_ONE       = 0xB1C0000000000001,
    POS_INFINITY  = 0x7800000000000000,
    NEG_INFINITY  = 0xF800000000000000,
    DEFAULT_NAN   = 0x7C00000000000000
}

// Function: getSpecialCases
//
// Check if nan, zero, inf, or finite
inline specialCaseFlags getSpecialCases(bid64_t a)
{
    return getSpecialCases_internal<_width>(a);
}


//| Negate input.
inline bid64_t neg(bid64_t x)
{
    auto binary = cast<decimal64PackedFormat_t>(x);
    binary.sign = ~binary.sign;
    return cast<bid64_t>(binary);
}

inline optional<bid64_t> sub_exactly(bid64_t in1, bid64_t in2)
{
    const auto a = parseDecimalValue<_width>(in1);
    const auto b = parseDecimalValue<_width>(in2);
    const auto a_flags = getSpecialCases_internal<_width>(in1);
    const auto b_flags = getSpecialCases_internal<_width>(in2);

    optional<bid64_t> result;
    if (a_flags.nan || b_flags.nan)
    {
        result.is_valid = true;
        result.value = decimal64_constants::DEFAULT_NAN;
    }
    else if (a_flags.inf || b_flags.inf)
    {
        result.is_valid = true;
        if(a_flags.inf && b_flags.inf)
        {
            result.value = (a.sign == b.sign) ? decimal64_constants::DEFAULT_NAN :
                     (a.sign == 0) ? decimal64_constants::POS_INFINITY : decimal64_constants::NEG_INFINITY;
        }
        else
        {
            result.value = ((a.sign == 1 && !b_flags.inf) || (b.sign == 0 && !a_flags.inf)) ?
                decimal64_constants::NEG_INFINITY : decimal64_constants::POS_INFINITY;
        }
    }
    else if(a_flags.zero)
    {
        result.is_valid = true;
        result.value = neg(in2);
    }
    else if(b_flags.zero)
    {
        result.is_valid = true;
        result.value = in1;
    }
    else
    {
        result = add_exactly_internal<_width, _max_integer>(a, {b.integer, b.exponent, ~b.sign});
    }
    return result;
}
