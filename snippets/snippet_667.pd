import data.fifo
    

//| An array of FIFOs.  
template
    < typename T                                             //< Datatype stored in each FIFO.
    , auto Depth                                             //< Number of elements stored in each FIFO.
    , auto ArraySize                                         //< The number of FIFOs.
    , template <typename, auto> typename FifoType = FIFO     //< Type of FIFO to use.
    >
class fifo_array
{
public:
    //| Index that identifies one FIFO.
    using fifo_index_t = index_t<ArraySize>;

private:
    FifoType<T, Depth>[ArraySize] _fifos;

public:

optional<T>[ArraySize] dequeue_many
        ( bool[ArraySize] mask //< An array of boolean values, one per FIFO.
                               // If `mask[i] == true`, then an element will be dequeued from FIFO `i`
                               // and stored in the result array at index `i`.
                               // If `mask[i] == false`, then element `i` in the result is undefined.
        )
    {
        optional<T>[ArraySize] result = {};

        static for (const auto i : ArraySize)
        {
            if (mask[i])
            {
                result[i] = make_optional(true, _fifos[i].dequeue());
            }
        }

        return result;
    }
}
