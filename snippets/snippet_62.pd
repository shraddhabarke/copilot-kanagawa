import data.array
import numeric.int.operator

template
    < auto Size                                             //< Number of bits in the bit vector.
    , auto WordWidth                                        //< Number of bits in each word.
    , template <typename, auto> typename Memory = memory    //< Memory implementation.
    >

class bitarray
{
private:
    //| Size must be a multiple of word width
    static_assert(0 == (Size % WordWidth));

    const auto WordCount = Size / WordWidth;

public:
    //| Represents the address of a single bit.
    using bit_addr_t = index_t<Size>;

    //| Represents the address of a single word.
    using word_addr_t = index_t<WordCount>;

    //| A single word which can be read or written.
    using word_t = uint<WordWidth>;

    inline word_t read_word(word_addr_t addr) {
	sim_assert(addr < WordCount);
	return _mem[addr];
    }
}
