import data.bits
import data.optional
import data.tuple
import numeric.fixed.internal as fixed_internal
import numeric.float32.internal
import numeric.float32.internal.operator
import numeric.float.internal

template <Denorm denorm_mode>
inline bool lt(float32 in1, float32 in2)
{
    // Unpack input
    float32PackedFormat a;
    float32PackedFormat b;
    a = cast<float32PackedFormat>(in1);
    b = cast<float32PackedFormat>(in2);

    // Get zero, nan, or inf
    specialCaseFlags a_flags = getSpecialCases<denorm_mode>(a);
    specialCaseFlags b_flags = getSpecialCases<denorm_mode>(b);

    bool result;
    // Check equal
    if (eq<denorm_mode>(in1, in2))
    {
        result = false;
    }
    // NaN
    else if (a_flags.nan || b_flags.nan)
    {
        result = false;
    }
    // a negative, b positive or zero
    else if (a.sign == 1 && (b_flags.zero || b.sign == 0))
    {
        result = true;
    }
    // b negative, a positive or zero
    else if (b.sign == 1 && (a_flags.zero || a.sign == 0))
    {
        result = false;
    }
    // same sign
    else
    {
        result = concat(a.exponent, a.mantissa) < concat(b.exponent, b.mantissa);
        // Reverse if negative
        if (a.sign == 1)
        {
            result = !result;
        }
    }
    return result;
}
