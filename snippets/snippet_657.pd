template
    < auto M               //< Maximum semaphore value.
    , auto I               //< Initial value for the semaphore count. Must be less than or equal to `M`.
    , auto Blocking = true //< When true, this parameter causes the semaphore to block when wait is called.
                           // Setting to false should only be used when the caller can ensure that the
                           // semaphore count is greater than 0 when wait is called otherwise a `sim_assert`
                           // is raised.
    >
class semaphore
{
public:
    using sem_ctr_t = count_t<M>;

    static assert(I <= M);

private:

    counter<M, I> _counter;

public:

void wait_multiple(sem_ctr_t val)
    {
        if (Blocking)
        {
            wait_for(test_and_decrement(val));
        }
        else
        {
            bool result;
            atomic
            {
                result = test_and_decrement(val);
            }
            // Check for underflow
            sim_assert(result);
        }
    }
}
