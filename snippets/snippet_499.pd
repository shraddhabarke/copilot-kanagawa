inline uint<Width> compute
        ( count_t<ThreadCount> identifier   //< Which of the `ThreadCount` CRCs to update.
        , uint8[MaxBytes] input             //< Input data.
        , count_t<MaxBytes> input_bytes     //< Number of valid bytes in the input data.
        , bool reset                        //< Indicates if CRC value should be reset before processing `input`.  Should be set to `true` on the first call associated with a particular input stream.
        )
    {
        const auto table = generate();

        // Because the CRC calculator operates on a reversed polynomial
        // input bits are reversed in order to produce the same output
        // as a normal (not reversed) polynomial.
        // If ReflectInput is true, then input bits are not reversed
        // which produces the same output as a CRC operating on a normal polynomial
        // and reversed inputs.
        if(!ReflectInput)
        {
            static for(const auto i : MaxBytes)
            {
                input[i] = reverse<uint8>(input[i]);
            }
        }

        // The initial value is given in big-endian.
        const auto initial = reverse<uint<Width>>(Init);
        const auto input_bits = input_bytes * 8;
        const auto off_bits = max_bits - input_bits;

        // crc(r1, d) = crc(r1, 0) + crc(0, d). crc(0, d) depends on the width of input
        const auto off_input = cast<uint<max_bits>>(cast<uint<max_bits>>(input) << off_bits);
        const uint<Width> reduced_crc = crc_lookup(table, off_input);

        uint<Width> crc_local;
        atomic
        {
            // crc(r1, 0) depends on the width of remainer
            uint<Width> crc_keep = reset ? initial : _crc_results[identifier];
            uint<Width> updated_crc = crc_map(table, crc_keep, checked_cast<count_t<data_segments>>(off_bits / 4));

            // combine crc(0,d) and crc(r,0)
            crc_local = updated_crc ^ reduced_crc ^ (crc_keep >> input_bits);
            _crc_results[identifier] = crc_local;
        }

        // Similar to the handling of ReflectInput, only reverse output bits
        // when ReflectOutput is false (because the CRC operates on a reversed polynomial)
        return (ReflectOutput ? crc_local : reverse<uint<Width>>(crc_local)) ^ XorOut;
    }