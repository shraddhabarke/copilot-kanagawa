import sync.lock.multi
import numeric.int.operator.modular as modular

//| This class implements a set of FIFOs that use a single, statically partitioned block of memory.
// Note that when using the blocking version, a call for one of the FIFO instances that blocks will also
// block subsequent calls for other FIFO instances, even if those calls would otherwise not block.
// In other words, there is head of line blocking across FIFOs.
template
    < typename T                  //< Type of each entry in the FIFO.
    , auto Size                   //< Maximum number of entries that can be stored in each FIFO.
    , auto N                      //< Number of FIFOs.
    , bool EnqueueBlocking = true //< Block on enqueue if the FIFO is full until an entry
                                  // frees up. By default this is true. Otherwise,
                                  // the caller must ensure that the FIFO is not full.
    , bool DequeueBlocking = true //< Block on dequeue if the FIFO is empty until an entry
                                  // arrives. By default, this is true. Otherwise,
                                  // the caller must ensure that the FIFO is not empty.
    >
class multi_fifo
{
public:
    using pointer_t = index_t<Size>;
    using fifo_idx_t = index_t<N>;

private:
    pointer_t[N] _producerIndex = {};
    pointer_t[N] _consumerIndex = {};

    // Memory that holds the raw data
    memory<T, N*Size> _dataMem;

    // Used to block reads while fifo is empty
    multi_semaphore<N, Size, 0, DequeueBlocking> _readSemaphore;

    // Used to block writes while the fifo is full
    multi_semaphore<N, Size, Size, EnqueueBlocking> _writeSemaphore;

public:
void enqueue(fifo_idx_t which, T value)
    {
        // Block until the FIFO is no longer full
        _writeSemaphore.wait(which, true);

        // Get the value of the write pointer, and increment the write pointer
        pointer_t snappedProducerIndex;

        atomic
        {
            snappedProducerIndex = _producerIndex[which];
            _producerIndex[which] = modular::increment(snappedProducerIndex);
        }

        // Store the value into the memory
        _dataMem[Size * which + snappedProducerIndex] = value;

        // Allow 1 more thread to get a value out
        _readSemaphore.post(which);
    }
}
