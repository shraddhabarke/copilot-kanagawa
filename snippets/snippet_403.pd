inline optional<bid32_t> mul_exactly(bid32_t in1, bid32_t in2)
{
    const auto a = parseDecimalValue<_width>(in1);
    const auto b = parseDecimalValue<_width>(in2);
    const auto a_flags = getSpecialCases_internal<_width>(in1);
    const auto b_flags = getSpecialCases_internal<_width>(in2);

    optional<bid32_t> result;
    if (a_flags.nan || b_flags.nan)
    {
        result.is_valid = true;
        result.value = decimal32_constants::DEFAULT_NAN;
    }
    else if (a_flags.inf || b_flags.inf)
    {
        result.is_valid = true;
        result.value = (a_flags.zero || b_flags.zero) ? decimal32_constants::DEFAULT_NAN :
                       (a.sign != b.sign) ? decimal32_constants::NEG_INFINITY : decimal32_constants::POS_INFINITY;
    }
    else if(a_flags.zero || b_flags.zero)
    {
        result.is_valid = true;
        result.value = 0;
    }
    else
    {
        result = mul_exactly_internal<_width, _max_integer, _bias>(a, b);
    }
    return result;
}