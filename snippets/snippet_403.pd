import numeric.decimal.internal

const auto _width = 32;
const auto _bias = 101;
const auto _max_integer = 9999999;

using bid32_t = uint<_width>;
using decimal32PackedFormat_t = decimalPackedFormat<_width>;

enum decimal32_constants: uint32
{
    POS_MAX       = 0x77F8967F,
    NEG_MAX       = 0xF7F8967F,
    POS_ZERO      = 0x32800000,
    NEG_ZERO      = 0xB2800000,
    POS_ONE       = 0x32800001,
    NEG_ONE       = 0xB2800001,
    POS_INFINITY  = 0x78000000,
    NEG_INFINITY  = 0xF8000000,
    DEFAULT_NAN   = 0x7C000000
}

// Function: getSpecialCases
//
// Check if nan, zero, inf, or finite
inline specialCaseFlags getSpecialCases(bid32_t a)
{
    return getSpecialCases_internal<_width>(a);
}

inline optional<bid32_t> mul_exactly(bid32_t in1, bid32_t in2)
{
    const auto a = parseDecimalValue<_width>(in1);
    const auto b = parseDecimalValue<_width>(in2);
    const auto a_flags = getSpecialCases_internal<_width>(in1);
    const auto b_flags = getSpecialCases_internal<_width>(in2);

    optional<bid32_t> result;
    if (a_flags.nan || b_flags.nan)
    {
        result.is_valid = true;
        result.value = decimal32_constants::DEFAULT_NAN;
    }
    else if (a_flags.inf || b_flags.inf)
    {
        result.is_valid = true;
        result.value = (a_flags.zero || b_flags.zero) ? decimal32_constants::DEFAULT_NAN :
                       (a.sign != b.sign) ? decimal32_constants::NEG_INFINITY : decimal32_constants::POS_INFINITY;
    }
    else if(a_flags.zero || b_flags.zero)
    {
        result.is_valid = true;
        result.value = 0;
    }
    else
    {
        result = mul_exactly_internal<_width, _max_integer, _bias>(a, b);
    }
    return result;
}
