import data.bits
import data.optional
import numeric.fixed.internal as internal
import numeric.int.operator as intop

//| Fixed-point representation.
template<auto I /*< Integer bit-width.*/, auto F /*< Fractional bit-width.*/>
struct fixed
{
    int<I + F> value;
}

//| Internal function which conditionally performs a `checked_cast` on valid source values.
// Valid values must be representable by the type: fixed<I, F>.
template<auto I, auto F>
inline optional<fixed<I, F>> checked_cast_opt_fixed(auto src, bool is_valid)
{
    const auto fn = lift_optional(checked_cast<int<I + F>>);

    auto opt_result = fn(make_optional(is_valid, src));

    return make_optional(opt_result.is_valid, cast<fixed<I, F>>(opt_result.value));
}
