template
    < auto MaxThreads //< The maximum number of threads that might be manipulating the lock.
                      // This determines the maximum number of read-locks that can be outstanding.
                      // Typically 512 is a reasonable value to use here.
    >
class rwlock
{
private:

counter<MaxThreads, 0> _read_lock_counter;
    bool _write_locked = false;

    inline bool check_lock(bool is_reader)
    {
        bool result = false;
        auto rlocks_used = _read_lock_counter.count();

        if (is_reader)
        {
            result = !_write_locked && (rlocks_used < MaxThreads);
        }
        else
        {
            result = !_write_locked && (rlocks_used == 0);
        }

        // Update lock state
        _read_lock_counter.add(cast<uint1>(result && is_reader));
        _write_locked = (result && !is_reader);

        return result;
    }

public:

    void lock(bool is_reader)
    {
        atomic do; while(!check_lock(is_reader));
    }

    inline void read_lock()
    {
        lock(true);
    }

    inline void write_lock()
    {
        lock(false);
    }

    inline void unlock(bool is_reader)
    {
        if (is_reader)
        {
            read_unlock();
        }
        else
        {
            write_unlock();
        }
    }

    void read_unlock()
    {
        _read_lock_counter.subtract(1);
    }

    void write_unlock()
    {
        atomic
        {
            _write_locked = false;
        }
    }
}
