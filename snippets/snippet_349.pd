import data.bits
import data.optional
import numeric.fixed.internal as internal
import numeric.int.operator as intop

//| Fixed-point representation.
template<auto I /*< Integer bit-width.*/, auto F /*< Fractional bit-width.*/>
struct fixed
{
    int<I + F> value;
}

template<auto I, auto F>
inline optional<fixed<I, F>> dim(fixed<I, F> x, fixed<I, F> y)
{
    optional<fixed<I, F>> result;

    result.value.value = cast<decltype(result.value.value)>(y.value < x.value ? x.value - y.value : 0);
    result.is_valid = result.value.value >= 0;
    return result;
}
