
import data.bits
import data.optional
import numeric.fixed.internal as internal
import numeric.int.operator as intop

//| Fixed-point representation.
template<auto I /*< Integer bit-width.*/, auto F /*< Fractional bit-width.*/>
struct fixed
{
    int<I + F> value;
}

template<auto I, auto F>
inline fixed<I, F> trunc(fixed<I, F> x)
{
    const auto value = x.value;
    const int<I> i = value >> F;
    const uint<F> f = value;
    return { (i + ((i < 0 && f > 0) ? 1 : 0)) << F };
}
