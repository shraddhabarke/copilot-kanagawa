template <auto SeedWidth /*< The bit-width of the LFSR. Widths from 2 to 32 inclusive are supported.*/>
class lfsr_random
{
public:
    using value_t = uint<SeedWidth>;

private:
    value_t _value = 1;

public:
    //| Get the next random number in the sequence, optionally seeding
    // the random number generator first. Do not use zero for the
    // seed value.
value_t next(optional<uint<SeedWidth>> seed /*< If `is_valid` then seed the generator, otherwise ignore.*/)
    {
        sim_assert(!(seed.is_valid && (seed.value == 0)));

        value_t new_value;

        atomic
        {
            new_value = lfsr(from_optional(_value, seed));
            _value = new_value;
        }

        return new_value;
    }
}
