import data.optional

template <typename T, auto N>
using memory = [[memory]] T[N];

template <typename T, auto N>
using memory_norep = [[memory, non_replicated]] T[N];

//| Type returned by reads from `memory_ecc` of type `T`
template <typename T>
struct ecc
{
    //| True when an ECC error was detected, regardless of whether it was
    // corrected or not.
    bool error;

    //| Value read from the memory, valid if there was no ECC error, or an
    // error was corrected.
    optional<T> data;
}

template <typename T, auto N>
using memory_ecc_norep = [[memory, non_replicated, ecc(make_ecc<T>)]] T[N];

template <typename T>
inline optional<T> make_optional_from_ecc_error(bool error, bool valid, T value)
{
    sim_assert(valid || error);
    return make_optional(!error, value);
}
