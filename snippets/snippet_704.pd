DramChannel[NUM_DRAM_CHANNELS] DramChannels;

const auto LOG_NUM_DRAM_CHANNELS = NUM_DRAM_CHANNELS == 1 ? 1 : clog2(NUM_DRAM_CHANNELS);

// Code for applications that want to merge all channels into 1 logical channel (64B wide)
// 64-bit address decomposed into multiple fields
struct DecomposedAddress
{
    // should be 0, all addresses must be 64B aligned
    uint6 _lowBits;

    // Which channel this address refers to
    uint<LOG_NUM_DRAM_CHANNELS> _channelIndex;

    // The address within the particular DRAM channel
    uint<58 - LOG_NUM_DRAM_CHANNELS> _addressWithinChannel;
}


uint512 ReadUnified64(uint64 addr){
    DecomposedAddress decomposedAddr = cast<DecomposedAddress>(addr);
    uint512 result;
    static for(const auto i : NUM_DRAM_CHANNELS) {
        if (i == decomposedAddr._channelIndex)
        {
            result = DramChannels[i].Read(decomposedAddr._addressWithinChannel * 64, 64, true);
        }
    }
    return result;}

