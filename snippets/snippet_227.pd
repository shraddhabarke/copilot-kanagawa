import data.bits
import numeric.float.internal
const auto _mantissa_width = 52;
const auto _exponent_width = 11;
const auto _exponent_bias = 1023;

using float32PackedFormat = floatPackedFormat<23, 8>;
using float64PackedFormat = floatPackedFormat<52, 11>;

enum float64_constants: uint64
{
    POS_MAX       = 0x7FEFFFFFFFFFFFFF,
    NEG_MAX       = 0xFFEFFFFFFFFFFFFF,
    POS_ZERO      = 0x0000000000000000,
    NEG_ZERO      = 0x8000000000000000,
    POS_ONE       = 0x3FF0000000000000,
    NEG_ONE       = 0xBFF0000000000000,
    POS_INFINITY  = 0x7FF0000000000000,
    NEG_INFINITY  = 0xFFF0000000000000,
    DEFAULT_NAN   = 0x7FF8000000000000
}

struct float64ExpandedFormat
{
    uint53 mantissa;
    int12 exponent;
    uint1 sign;
}

struct productFormat
{
    uint53 sticky;
    uint1 round;
    uint1 guard;
    uint53 product;
}

struct float64StickyFormat
{
    uint1 sticky;
    uint55 mantissaGuardRound;
    int13 exponent;
    uint1 sign;
}

struct stickyMantissaFormat
{
    uint1 sticky;
    uint55 mantissaGuardRound;
}

template<Denorm denorm_mode>
inline float64ExpandedFormat unpackFloat64(float64PackedFormat a)
{
    float64ExpandedFormat a_PostUnpack;
    a_PostUnpack.sign = a.sign;
    if (denorm_mode == Denorm::Off)
    {
        a_PostUnpack.exponent = cast<int13>(a.exponent) - 1023;
        a_PostUnpack.mantissa = a.mantissa | (1 << 52);
    }
    else
    {
        a_PostUnpack.exponent = a.exponent == 0 ? -1022 : cast<int13>(a.exponent) - 1023;
        a_PostUnpack.mantissa = a.exponent == 0 ? a.mantissa : a.mantissa | (1 << 52);
    }
    return a_PostUnpack;
}
