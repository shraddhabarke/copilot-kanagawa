template
    < typename T                                            //< Type of memory word
    , auto DepthInBytes                                     //< Depth of memory in bytes
    , template <typename, auto> typename Memory = memory    //< Memory implementation
    >
class byte_addressable_memory
{
    const auto BytesPerWord = bytesizeof T;
    using mem_t = unaligned_read_unaligned_write_memory<uint8, BytesPerWord, DepthInBytes, Memory>;

public:
    using addr_t = mem_t::addr_t;
    using byte_count_t = mem_t::element_count_t;
    using word_t = T;

inline void write_aligned(addr_t addr, word_t word)
    {
        mem.write_aligned(addr, cast<uint8[BytesPerWord]>(word));
    }
}
