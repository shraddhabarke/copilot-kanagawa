import data.array
import data.optional
import type.coerce
import type.stdtype


//| Round up a value to the next larger power of two. For example,
// all values from 33 through 64 (inclusive) round up to 64.
// OutputType must be at least one bit larger than InputType.
//
// #### __Examples__
//
//     >>> roundup_to_pow2<uint15, uint16>(0);
//     {0x0, 0x0}
//
//     >>> roundup_to_pow2<int7, int8>(0x1f);
//     {0x1, 0x20}
//
//     >>> roundup_to_pow2<uint7, uint8>(0x20);
//     {0x1, 0x20}
//
//     >>> roundup_to_pow2<uint15, uint16>(0x21);
//     {0x1, 0x40}

template<typename InputType, typename OutputType>
inline optional<OutputType> roundup_to_pow2(InputType input)
{
    sim_assert(bitsizeof(OutputType) > bitsizeof(InputType));
    optional<OutputType> result;
    if (pop_count(input) == 1)
    {
        // Exactly 1 bit is set -> input is already a power of 2.
        result = make_optional<OutputType>(true, input);
    }
    else
    {
        auto highest = highest_one<OutputType>(input);
        if (highest.is_valid)
        {
            result = make_optional<OutputType>(true, 1 << (highest.value + 1));
        }
        else
        {
            // No bits set, input must have been 0.  Rounding up 0
            // is nonsensical and is treated as an error.
            result = make_optional<OutputType>(false, 0);
        }
    }
    return result;
}
